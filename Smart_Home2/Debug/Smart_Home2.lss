
Smart_Home2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  000040be  00004152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800156  00800156  00004248  2**0
                  ALLOC
  3 .stab         0000420c  00000000  00000000  00004248  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001877  00000000  00000000  00008454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bbc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000caaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__vector_6>
      1c:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__vector_7>
      20:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__vector_8>
      24:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_13>
      38:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__vector_14>
      3c:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__vector_15>
      40:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <main>
      8a:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 20 	jmp	0x404c	; 0x404c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e1       	ldi	r26, 0x1B	; 27
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 20 	jmp	0x404c	; 0x404c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e1       	ldi	r24, 0x1B	; 27
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 20 	jmp	0x406c	; 0x406c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_vidInit>:
#include "ADC_Priv.h"
#include"ADC_Int.h"
#include"ADC_Cfg.h"
static void (*ADC_ISR_PTR)(void)=NULL;//=NULL
void ADC_vidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADMUX=(ADC_VREF<< REFS0)|(RES_ADJ << ADLAR);
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 e4       	ldi	r24, 0x40	; 64
     b54:	80 83       	st	Z, r24
	ADCSRA=(1<<ADEN)|(1<<ADP52)|(1<<ADP51)|(1<<ADP50);
     b56:	e6 e2       	ldi	r30, 0x26	; 38
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	87 e8       	ldi	r24, 0x87	; 135
     b5c:	80 83       	st	Z, r24

#if (ADC_MOD==ADC_INT)
	SET_BIT(ADCSRA,ADIE);
     b5e:	a6 e2       	ldi	r26, 0x26	; 38
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e6 e2       	ldi	r30, 0x26	; 38
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	88 60       	ori	r24, 0x08	; 8
     b6a:	8c 93       	st	X, r24
	//ADCSRA=(1<<ADEN)|(1<<ADP52)|(1<<ADP51)|(1<<ADP50)|(1<<ADIE);
#endif
}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <ADC_getReading>:

u16 ADC_getReading(u8 ChId)//chId ->channel which i select (7 channels)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	0f 92       	push	r0
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	89 83       	std	Y+1, r24	; 0x01
	ChId = ChId & 0b00000111;//masking (prevent user from entering any value greater than 7)
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	87 70       	andi	r24, 0x07	; 7
     b82:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = ( ADMUX & 0xF8)|ChId;//11111011|110=11111111
     b84:	a7 e2       	ldi	r26, 0x27	; 39
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e7 e2       	ldi	r30, 0x27	; 39
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	98 2f       	mov	r25, r24
     b90:	98 7f       	andi	r25, 0xF8	; 248
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	89 2b       	or	r24, r25
     b96:	8c 93       	st	X, r24
	ADCSRA=(1<<ADEN)|(1<<ADSC);
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	80 83       	st	Z, r24
	while((GET_BIT(ADCSRA,ADIF))==0);//stuck in this loop until flag==1
     ba0:	e6 e2       	ldi	r30, 0x26	; 38
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	82 95       	swap	r24
     ba8:	8f 70       	andi	r24, 0x0F	; 15
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	a9 f3       	breq	.-22     	; 0xba0 <ADC_getReading+0x2e>
    return ADC_REG;
     bb6:	e4 e2       	ldi	r30, 0x24	; 36
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
}
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <ADC_StartConversion>:
#if (ADC_MOD==ADC_INT)
void ADC_StartConversion(u8 ChId)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	89 83       	std	Y+1, r24	; 0x01
	ChId = ChId & 0b00000111;
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	87 70       	andi	r24, 0x07	; 7
     bd6:	89 83       	std	Y+1, r24	; 0x01
		ADMUX = ( ADMUX & 0xF8)|ChId;
     bd8:	a7 e2       	ldi	r26, 0x27	; 39
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e2       	ldi	r30, 0x27	; 39
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	98 2f       	mov	r25, r24
     be4:	98 7f       	andi	r25, 0xF8	; 248
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	89 2b       	or	r24, r25
     bea:	8c 93       	st	X, r24
		ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADIE);
     bec:	e6 e2       	ldi	r30, 0x26	; 38
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	88 ec       	ldi	r24, 0xC8	; 200
     bf2:	80 83       	st	Z, r24
	}
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <ADC_GetConvertedDig>:
u16 ADC_GetConvertedDig(void)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62

	return ADC_REG;
     c04:	e4 e2       	ldi	r30, 0x24	; 36
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
	}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <ACD_vidSetISR>:
void ACD_vidSetISR(void (*p)(void))
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <ACD_vidSetISR+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	ADC_ISR_PTR=p;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	90 93 57 01 	sts	0x0157, r25
     c28:	80 93 56 01 	sts	0x0156, r24
	}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <__vector_16>:
//	}
#endif


void __vector_16 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_16 (void){
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
	ADC_ISR_PTR();
     c60:	e0 91 56 01 	lds	r30, 0x0156
     c64:	f0 91 57 01 	lds	r31, 0x0157
     c68:	09 95       	icall
}
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <DIO_vidsetPinval>:
#include "DIO_Interface.h"
#include "DIO_private.h"


void DIO_vidsetPinval(u8 PortId,u8 PinId,u8 val)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	27 97       	sbiw	r28, 0x07	; 7
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6a 83       	std	Y+2, r22	; 0x02
     ca8:	4b 83       	std	Y+3, r20	; 0x03
if ((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	84 30       	cpi	r24, 0x04	; 4
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <DIO_vidsetPinval+0x22>
     cb0:	ee c0       	rjmp	.+476    	; 0xe8e <DIO_vidsetPinval+0x1fe>
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f0       	brcs	.+2      	; 0xcba <DIO_vidsetPinval+0x2a>
     cb8:	ea c0       	rjmp	.+468    	; 0xe8e <DIO_vidsetPinval+0x1fe>
{
	if(val== DIO_LOW)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 23       	and	r24, r24
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <DIO_vidsetPinval+0x32>
     cc0:	74 c0       	rjmp	.+232    	; 0xdaa <DIO_vidsetPinval+0x11a>
	{
		switch (PortId)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3f 83       	std	Y+7, r19	; 0x07
     cca:	2e 83       	std	Y+6, r18	; 0x06
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	59 f1       	breq	.+86     	; 0xd2c <DIO_vidsetPinval+0x9c>
     cd6:	2e 81       	ldd	r18, Y+6	; 0x06
     cd8:	3f 81       	ldd	r19, Y+7	; 0x07
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	2c f4       	brge	.+10     	; 0xcea <DIO_vidsetPinval+0x5a>
     ce0:	8e 81       	ldd	r24, Y+6	; 0x06
     ce2:	9f 81       	ldd	r25, Y+7	; 0x07
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	69 f0       	breq	.+26     	; 0xd02 <DIO_vidsetPinval+0x72>
     ce8:	d2 c0       	rjmp	.+420    	; 0xe8e <DIO_vidsetPinval+0x1fe>
     cea:	2e 81       	ldd	r18, Y+6	; 0x06
     cec:	3f 81       	ldd	r19, Y+7	; 0x07
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	89 f1       	breq	.+98     	; 0xd56 <DIO_vidsetPinval+0xc6>
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	9f 81       	ldd	r25, Y+7	; 0x07
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <DIO_vidsetPinval+0x70>
     cfe:	40 c0       	rjmp	.+128    	; 0xd80 <DIO_vidsetPinval+0xf0>
     d00:	c6 c0       	rjmp	.+396    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		{
		case DIO_PORTA:CLR_BIT(PORTA_REG,PinId); break;
     d02:	ab e3       	ldi	r26, 0x3B	; 59
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	eb e3       	ldi	r30, 0x3B	; 59
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_vidsetPinval+0x90>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_vidsetPinval+0x8c>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	b1 c0       	rjmp	.+354    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTB:CLR_BIT(PORTB_REG,PinId); break;
     d2c:	a8 e3       	ldi	r26, 0x38	; 56
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e3       	ldi	r30, 0x38	; 56
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_vidsetPinval+0xba>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_vidsetPinval+0xb6>
     d4e:	80 95       	com	r24
     d50:	84 23       	and	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	9c c0       	rjmp	.+312    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTC:CLR_BIT(PORTC_REG,PinId); break;
     d56:	a5 e3       	ldi	r26, 0x35	; 53
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e3       	ldi	r30, 0x35	; 53
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_vidsetPinval+0xe4>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_vidsetPinval+0xe0>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	87 c0       	rjmp	.+270    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTD:CLR_BIT(PORTD_REG,PinId); break;
     d80:	a2 e3       	ldi	r26, 0x32	; 50
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e2 e3       	ldi	r30, 0x32	; 50
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_vidsetPinval+0x10e>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_vidsetPinval+0x10a>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	72 c0       	rjmp	.+228    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		}
	}
	else if(val== DIO_HIGH){
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <DIO_vidsetPinval+0x122>
     db0:	6e c0       	rjmp	.+220    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		switch (PortId)
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	3d 83       	std	Y+5, r19	; 0x05
     dba:	2c 83       	std	Y+4, r18	; 0x04
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	49 f1       	breq	.+82     	; 0xe18 <DIO_vidsetPinval+0x188>
     dc6:	2c 81       	ldd	r18, Y+4	; 0x04
     dc8:	3d 81       	ldd	r19, Y+5	; 0x05
     dca:	22 30       	cpi	r18, 0x02	; 2
     dcc:	31 05       	cpc	r19, r1
     dce:	2c f4       	brge	.+10     	; 0xdda <DIO_vidsetPinval+0x14a>
     dd0:	8c 81       	ldd	r24, Y+4	; 0x04
     dd2:	9d 81       	ldd	r25, Y+5	; 0x05
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	61 f0       	breq	.+24     	; 0xdf0 <DIO_vidsetPinval+0x160>
     dd8:	5a c0       	rjmp	.+180    	; 0xe8e <DIO_vidsetPinval+0x1fe>
     dda:	2c 81       	ldd	r18, Y+4	; 0x04
     ddc:	3d 81       	ldd	r19, Y+5	; 0x05
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	31 05       	cpc	r19, r1
     de2:	71 f1       	breq	.+92     	; 0xe40 <DIO_vidsetPinval+0x1b0>
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	e9 f1       	breq	.+122    	; 0xe68 <DIO_vidsetPinval+0x1d8>
     dee:	4f c0       	rjmp	.+158    	; 0xe8e <DIO_vidsetPinval+0x1fe>
				{
        case DIO_PORTA:SET_BIT(PORTA_REG,PinId); break;
     df0:	ab e3       	ldi	r26, 0x3B	; 59
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	eb e3       	ldi	r30, 0x3B	; 59
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_vidsetPinval+0x17e>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_vidsetPinval+0x17a>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	3b c0       	rjmp	.+118    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTB:SET_BIT(PORTB_REG,PinId); break;
     e18:	a8 e3       	ldi	r26, 0x38	; 56
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e8 e3       	ldi	r30, 0x38	; 56
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_vidsetPinval+0x1a6>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_vidsetPinval+0x1a2>
     e3a:	84 2b       	or	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	27 c0       	rjmp	.+78     	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTC:SET_BIT(PORTC_REG,PinId); break;
     e40:	a5 e3       	ldi	r26, 0x35	; 53
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e5 e3       	ldi	r30, 0x35	; 53
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_vidsetPinval+0x1ce>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_vidsetPinval+0x1ca>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	13 c0       	rjmp	.+38     	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTD:SET_BIT(PORTD_REG,PinId); break;
     e68:	a2 e3       	ldi	r26, 0x32	; 50
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e2 e3       	ldi	r30, 0x32	; 50
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_vidsetPinval+0x1f6>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_vidsetPinval+0x1f2>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
	{
	// report error
	}


}
     e8e:	27 96       	adiw	r28, 0x07	; 7
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <DIO_vidsetPinDir>:
void DIO_vidsetPinDir(u8 PortId,u8 PinId,u8 dir){
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	27 97       	sbiw	r28, 0x07	; 7
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6a 83       	std	Y+2, r22	; 0x02
     eb8:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <DIO_vidsetPinDir+0x22>
     ec0:	ee c0       	rjmp	.+476    	; 0x109e <DIO_vidsetPinDir+0x1fe>
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	88 30       	cpi	r24, 0x08	; 8
     ec6:	08 f0       	brcs	.+2      	; 0xeca <DIO_vidsetPinDir+0x2a>
     ec8:	ea c0       	rjmp	.+468    	; 0x109e <DIO_vidsetPinDir+0x1fe>
	{
		if(dir== DIO_INPUT)
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	88 23       	and	r24, r24
     ece:	09 f0       	breq	.+2      	; 0xed2 <DIO_vidsetPinDir+0x32>
     ed0:	74 c0       	rjmp	.+232    	; 0xfba <DIO_vidsetPinDir+0x11a>
		{
			switch (PortId)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3f 83       	std	Y+7, r19	; 0x07
     eda:	2e 83       	std	Y+6, r18	; 0x06
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	59 f1       	breq	.+86     	; 0xf3c <DIO_vidsetPinDir+0x9c>
     ee6:	2e 81       	ldd	r18, Y+6	; 0x06
     ee8:	3f 81       	ldd	r19, Y+7	; 0x07
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	2c f4       	brge	.+10     	; 0xefa <DIO_vidsetPinDir+0x5a>
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	69 f0       	breq	.+26     	; 0xf12 <DIO_vidsetPinDir+0x72>
     ef8:	d2 c0       	rjmp	.+420    	; 0x109e <DIO_vidsetPinDir+0x1fe>
     efa:	2e 81       	ldd	r18, Y+6	; 0x06
     efc:	3f 81       	ldd	r19, Y+7	; 0x07
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	89 f1       	breq	.+98     	; 0xf66 <DIO_vidsetPinDir+0xc6>
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <DIO_vidsetPinDir+0x70>
     f0e:	40 c0       	rjmp	.+128    	; 0xf90 <DIO_vidsetPinDir+0xf0>
     f10:	c6 c0       	rjmp	.+396    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			{
			case DIO_PORTA:CLR_BIT(DDRA_REG,PinId); break;
     f12:	aa e3       	ldi	r26, 0x3A	; 58
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e3       	ldi	r30, 0x3A	; 58
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_vidsetPinDir+0x90>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_vidsetPinDir+0x8c>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	b1 c0       	rjmp	.+354    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			case DIO_PORTB:CLR_BIT(DDRB_REG,PinId); break;
     f3c:	a7 e3       	ldi	r26, 0x37	; 55
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e7 e3       	ldi	r30, 0x37	; 55
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_vidsetPinDir+0xba>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_vidsetPinDir+0xb6>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	9c c0       	rjmp	.+312    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			case DIO_PORTC:CLR_BIT(DDRC_REG,PinId); break;
     f66:	a4 e3       	ldi	r26, 0x34	; 52
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e3       	ldi	r30, 0x34	; 52
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_vidsetPinDir+0xe4>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_vidsetPinDir+0xe0>
     f88:	80 95       	com	r24
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	87 c0       	rjmp	.+270    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			case DIO_PORTD:CLR_BIT(DDRD_REG,PinId); break;
     f90:	a1 e3       	ldi	r26, 0x31	; 49
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_vidsetPinDir+0x10e>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_vidsetPinDir+0x10a>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	72 c0       	rjmp	.+228    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			}
		}
		else if(dir== DIO_OUTPUT){
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <DIO_vidsetPinDir+0x122>
     fc0:	6e c0       	rjmp	.+220    	; 0x109e <DIO_vidsetPinDir+0x1fe>
				switch (PortId)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	3d 83       	std	Y+5, r19	; 0x05
     fca:	2c 83       	std	Y+4, r18	; 0x04
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	91 05       	cpc	r25, r1
     fd4:	49 f1       	breq	.+82     	; 0x1028 <DIO_vidsetPinDir+0x188>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	2c f4       	brge	.+10     	; 0xfea <DIO_vidsetPinDir+0x14a>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	61 f0       	breq	.+24     	; 0x1000 <DIO_vidsetPinDir+0x160>
     fe8:	5a c0       	rjmp	.+180    	; 0x109e <DIO_vidsetPinDir+0x1fe>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	71 f1       	breq	.+92     	; 0x1050 <DIO_vidsetPinDir+0x1b0>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	e9 f1       	breq	.+122    	; 0x1078 <DIO_vidsetPinDir+0x1d8>
     ffe:	4f c0       	rjmp	.+158    	; 0x109e <DIO_vidsetPinDir+0x1fe>
						{
		        case DIO_PORTA:SET_BIT(DDRA_REG,PinId); break;
    1000:	aa e3       	ldi	r26, 0x3A	; 58
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e3       	ldi	r30, 0x3A	; 58
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_vidsetPinDir+0x17e>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_vidsetPinDir+0x17a>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	3b c0       	rjmp	.+118    	; 0x109e <DIO_vidsetPinDir+0x1fe>
				case DIO_PORTB:SET_BIT(DDRB_REG,PinId); break;
    1028:	a7 e3       	ldi	r26, 0x37	; 55
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e7 e3       	ldi	r30, 0x37	; 55
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_vidsetPinDir+0x1a6>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_vidsetPinDir+0x1a2>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	27 c0       	rjmp	.+78     	; 0x109e <DIO_vidsetPinDir+0x1fe>
				case DIO_PORTC:SET_BIT(DDRC_REG,PinId); break;
    1050:	a4 e3       	ldi	r26, 0x34	; 52
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e4 e3       	ldi	r30, 0x34	; 52
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_vidsetPinDir+0x1ce>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_vidsetPinDir+0x1ca>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	13 c0       	rjmp	.+38     	; 0x109e <DIO_vidsetPinDir+0x1fe>
				case DIO_PORTD:SET_BIT(DDRD_REG,PinId); break;
    1078:	a1 e3       	ldi	r26, 0x31	; 49
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e3       	ldi	r30, 0x31	; 49
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_vidsetPinDir+0x1f6>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_vidsetPinDir+0x1f2>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
		// report error
		}



}
    109e:	27 96       	adiw	r28, 0x07	; 7
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <DIO_vidsetPortval>:
void DIO_vidsetPortval(u8 PortId,u8 val){
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_vidsetPortval+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <DIO_vidsetPortval+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <DIO_vidsetPortval+0x7a>
		switch (PortId)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <DIO_vidsetPortval+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_vidsetPortval+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_vidsetPortval+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <DIO_vidsetPortval+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <DIO_vidsetPortval+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <DIO_vidsetPortval+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <DIO_vidsetPortval+0x7a>
								{
				        case DIO_PORTA:PORTA_REG=val ; break;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <DIO_vidsetPortval+0x7a>
						case DIO_PORTB:PORTB_REG=val ; break;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <DIO_vidsetPortval+0x7a>
						case DIO_PORTC:PORTC_REG=val ; break;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <DIO_vidsetPortval+0x7a>
						case DIO_PORTD:PORTD_REG=val ; break;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
	}
	else
			{
			// report error
			}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <DIO_vidsetPORTD_REGir>:
void DIO_vidsetPORTD_REGir(u8 PortId,u8 dir){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_vidsetPORTD_REGir+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_vidsetPORTD_REGir+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
			switch (PortId)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <DIO_vidsetPORTD_REGir+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_vidsetPORTD_REGir+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <DIO_vidsetPORTD_REGir+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <DIO_vidsetPORTD_REGir+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <DIO_vidsetPORTD_REGir+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
									{
					        case DIO_PORTA:DDRA_REG=dir ; break;
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
							case DIO_PORTB:DDRB_REG=dir ; break;
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
							case DIO_PORTC:DDRC_REG=dir ; break;
    11a0:	e4 e3       	ldi	r30, 0x34	; 52
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
							case DIO_PORTD:DDRD_REG=dir ; break;
    11aa:	e1 e3       	ldi	r30, 0x31	; 49
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
	else
			{
			// report error
			}

}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_vidsetPortDir>:
void DIO_vidsetPortDir(u8 PortId,u8 dir){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <DIO_vidsetPortDir+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_vidsetPortDir+0x8>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	90 f5       	brcc	.+100    	; 0x123a <DIO_vidsetPortDir+0x7a>
			switch (PortId)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3c 83       	std	Y+4, r19	; 0x04
    11de:	2b 83       	std	Y+3, r18	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	d1 f0       	breq	.+52     	; 0x121e <DIO_vidsetPortDir+0x5e>
    11ea:	2b 81       	ldd	r18, Y+3	; 0x03
    11ec:	3c 81       	ldd	r19, Y+4	; 0x04
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	2c f4       	brge	.+10     	; 0x11fe <DIO_vidsetPortDir+0x3e>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	61 f0       	breq	.+24     	; 0x1214 <DIO_vidsetPortDir+0x54>
    11fc:	1e c0       	rjmp	.+60     	; 0x123a <DIO_vidsetPortDir+0x7a>
    11fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1200:	3c 81       	ldd	r19, Y+4	; 0x04
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	81 f0       	breq	.+32     	; 0x1228 <DIO_vidsetPortDir+0x68>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	91 05       	cpc	r25, r1
    1210:	81 f0       	breq	.+32     	; 0x1232 <DIO_vidsetPortDir+0x72>
    1212:	13 c0       	rjmp	.+38     	; 0x123a <DIO_vidsetPortDir+0x7a>
									{
					        case DIO_PORTA:DDRA_REG=dir ; break;
    1214:	ea e3       	ldi	r30, 0x3A	; 58
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	80 83       	st	Z, r24
    121c:	0e c0       	rjmp	.+28     	; 0x123a <DIO_vidsetPortDir+0x7a>
							case DIO_PORTB:DDRB_REG=dir ; break;
    121e:	e7 e3       	ldi	r30, 0x37	; 55
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 83       	st	Z, r24
    1226:	09 c0       	rjmp	.+18     	; 0x123a <DIO_vidsetPortDir+0x7a>
							case DIO_PORTC:DDRC_REG=dir ; break;
    1228:	e4 e3       	ldi	r30, 0x34	; 52
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	80 83       	st	Z, r24
    1230:	04 c0       	rjmp	.+8      	; 0x123a <DIO_vidsetPortDir+0x7a>
							case DIO_PORTD:DDRD_REG=dir ; break;
    1232:	e1 e3       	ldi	r30, 0x31	; 49
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 83       	st	Z, r24
	else
			{
			// report error
			}

}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <DIO_vidsetPortval_LowNibble>:
void DIO_vidsetPortval_LowNibble(u8 PortId,u8 val){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_vidsetPortval_LowNibble+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <DIO_vidsetPortval_LowNibble+0x8>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	90 f5       	brcc	.+100    	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
		switch (PortId)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3c 83       	std	Y+4, r19	; 0x04
    1266:	2b 83       	std	Y+3, r18	; 0x03
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	d1 f0       	breq	.+52     	; 0x12a6 <DIO_vidsetPortval_LowNibble+0x5e>
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	3c 81       	ldd	r19, Y+4	; 0x04
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	2c f4       	brge	.+10     	; 0x1286 <DIO_vidsetPortval_LowNibble+0x3e>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	61 f0       	breq	.+24     	; 0x129c <DIO_vidsetPortval_LowNibble+0x54>
    1284:	1e c0       	rjmp	.+60     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <DIO_vidsetPortval_LowNibble+0x68>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	81 f0       	breq	.+32     	; 0x12ba <DIO_vidsetPortval_LowNibble+0x72>
    129a:	13 c0       	rjmp	.+38     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
								{
				        case DIO_PORTA:PORTA_REG=(val) ; break;
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	0e c0       	rjmp	.+28     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
						case DIO_PORTB:PORTB_REG=(val) ; break;
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
						case DIO_PORTC:PORTC_REG=(val); break;
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
						case DIO_PORTD:PORTD_REG=(val) ; break;
    12ba:	e2 e3       	ldi	r30, 0x32	; 50
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
	}
	else
			{
			// report error
			}
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 PortId,u8 PinId)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <DIO_u8GetPinVal+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_u8GetPinVal+0x8>
    12d8:	0f 92       	push	r0
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	8a 83       	std	Y+2, r24	; 0x02
    12e0:	6b 83       	std	Y+3, r22	; 0x03
u8 ret_val =255;//default for check error
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	89 83       	std	Y+1, r24	; 0x01
 if((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <DIO_u8GetPinVal+0x1e>
    12ec:	6b c0       	rjmp	.+214    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 30       	cpi	r24, 0x08	; 8
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <DIO_u8GetPinVal+0x26>
    12f4:	67 c0       	rjmp	.+206    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
 {
switch (PortId)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3d 83       	std	Y+5, r19	; 0x05
    12fe:	2c 83       	std	Y+4, r18	; 0x04
    1300:	4c 81       	ldd	r20, Y+4	; 0x04
    1302:	5d 81       	ldd	r21, Y+5	; 0x05
    1304:	41 30       	cpi	r20, 0x01	; 1
    1306:	51 05       	cpc	r21, r1
    1308:	41 f1       	breq	.+80     	; 0x135a <DIO_u8GetPinVal+0x8a>
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	91 05       	cpc	r25, r1
    1312:	34 f4       	brge	.+12     	; 0x1320 <DIO_u8GetPinVal+0x50>
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	61 f0       	breq	.+24     	; 0x1336 <DIO_u8GetPinVal+0x66>
    131e:	52 c0       	rjmp	.+164    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
    1320:	4c 81       	ldd	r20, Y+4	; 0x04
    1322:	5d 81       	ldd	r21, Y+5	; 0x05
    1324:	42 30       	cpi	r20, 0x02	; 2
    1326:	51 05       	cpc	r21, r1
    1328:	51 f1       	breq	.+84     	; 0x137e <DIO_u8GetPinVal+0xae>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	b9 f1       	breq	.+110    	; 0x13a2 <DIO_u8GetPinVal+0xd2>
    1334:	47 c0       	rjmp	.+142    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			{
			 case DIO_PORTA:ret_val=GET_BIT(PINA_REG,PinId) ; break;
    1336:	e9 e3       	ldi	r30, 0x39	; 57
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_u8GetPinVal+0x7e>
    134a:	55 95       	asr	r21
    134c:	47 95       	ror	r20
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_u8GetPinVal+0x7a>
    1352:	ca 01       	movw	r24, r20
    1354:	81 70       	andi	r24, 0x01	; 1
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	35 c0       	rjmp	.+106    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			 case DIO_PORTB:ret_val=GET_BIT(PINB_REG,PinId); break;
    135a:	e6 e3       	ldi	r30, 0x36	; 54
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a9 01       	movw	r20, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_u8GetPinVal+0xa2>
    136e:	55 95       	asr	r21
    1370:	47 95       	ror	r20
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_u8GetPinVal+0x9e>
    1376:	ca 01       	movw	r24, r20
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	23 c0       	rjmp	.+70     	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			 case DIO_PORTC:ret_val=GET_BIT(PINC_REG,PinId); break;
    137e:	e3 e3       	ldi	r30, 0x33	; 51
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_u8GetPinVal+0xc6>
    1392:	55 95       	asr	r21
    1394:	47 95       	ror	r20
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_u8GetPinVal+0xc2>
    139a:	ca 01       	movw	r24, r20
    139c:	81 70       	andi	r24, 0x01	; 1
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	11 c0       	rjmp	.+34     	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			 case DIO_PORTD:ret_val=GET_BIT(PIND_REG,PinId); break;
    13a2:	e0 e3       	ldi	r30, 0x30	; 48
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_u8GetPinVal+0xea>
    13b6:	55 95       	asr	r21
    13b8:	47 95       	ror	r20
    13ba:	8a 95       	dec	r24
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_u8GetPinVal+0xe6>
    13be:	ca 01       	movw	r24, r20
    13c0:	81 70       	andi	r24, 0x01	; 1
    13c2:	89 83       	std	Y+1, r24	; 0x01
 }
 else
 			{
 			// report error
 			}
 return ret_val;
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <GPIO_voidWriteLowNibble>:


void GPIO_voidWriteLowNibble(u8 copy_u8port,u8 copy_u8value)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_voidWriteLowNibble+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <GPIO_voidWriteLowNibble+0x8>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8value&=0x0f;
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	8f 70       	andi	r24, 0x0F	; 15
    13ea:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8port)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3c 83       	std	Y+4, r19	; 0x04
    13f4:	2b 83       	std	Y+3, r18	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	29 f1       	breq	.+74     	; 0x144a <GPIO_voidWriteLowNibble+0x74>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	2c f4       	brge	.+10     	; 0x1414 <GPIO_voidWriteLowNibble+0x3e>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	61 f0       	breq	.+24     	; 0x142a <GPIO_voidWriteLowNibble+0x54>
    1412:	4a c0       	rjmp	.+148    	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	31 f1       	breq	.+76     	; 0x146a <GPIO_voidWriteLowNibble+0x94>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	89 f1       	breq	.+98     	; 0x148a <GPIO_voidWriteLowNibble+0xb4>
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
	 {
	 case DIO_PORTA:
		PORTA_REG&=0xf0;
    142a:	ab e3       	ldi	r26, 0x3B	; 59
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e3       	ldi	r30, 0x3B	; 59
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 7f       	andi	r24, 0xF0	; 240
    1436:	8c 93       	st	X, r24
		PORTA_REG|=copy_u8value;
    1438:	ab e3       	ldi	r26, 0x3B	; 59
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e3       	ldi	r30, 0x3B	; 59
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	90 81       	ld	r25, Z
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	89 2b       	or	r24, r25
    1446:	8c 93       	st	X, r24
    1448:	2f c0       	rjmp	.+94     	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
		break;
	 case DIO_PORTB:
		PORTB_REG&=0xf0;
    144a:	a8 e3       	ldi	r26, 0x38	; 56
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e8 e3       	ldi	r30, 0x38	; 56
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 7f       	andi	r24, 0xF0	; 240
    1456:	8c 93       	st	X, r24
		PORTB_REG|=copy_u8value;
    1458:	a8 e3       	ldi	r26, 0x38	; 56
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e8 e3       	ldi	r30, 0x38	; 56
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	90 81       	ld	r25, Z
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	89 2b       	or	r24, r25
    1466:	8c 93       	st	X, r24
    1468:	1f c0       	rjmp	.+62     	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
		break;
	 case DIO_PORTC:
		PORTC_REG&=0xf0;
    146a:	a5 e3       	ldi	r26, 0x35	; 53
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 7f       	andi	r24, 0xF0	; 240
    1476:	8c 93       	st	X, r24
		PORTC_REG|=copy_u8value;
    1478:	a5 e3       	ldi	r26, 0x35	; 53
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	90 81       	ld	r25, Z
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	89 2b       	or	r24, r25
    1486:	8c 93       	st	X, r24
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
		break;
	 case DIO_PORTD:
		PORTD_REG&=0xf0;
    148a:	a2 e3       	ldi	r26, 0x32	; 50
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e2 e3       	ldi	r30, 0x32	; 50
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 7f       	andi	r24, 0xF0	; 240
    1496:	8c 93       	st	X, r24
		PORTD_REG|=copy_u8value;
    1498:	a2 e3       	ldi	r26, 0x32	; 50
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	90 81       	ld	r25, Z
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	89 2b       	or	r24, r25
    14a6:	8c 93       	st	X, r24
		break;
		default:
		  break;
	 }
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <GPIO_voidWriteHighNibble>:

void GPIO_voidWriteHighNibble(u8 copy_u8port,u8 copy_u8value)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_voidWriteHighNibble+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <GPIO_voidWriteHighNibble+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	6a 83       	std	Y+2, r22	; 0x02

	copy_u8value&=0xf0;
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 7f       	andi	r24, 0xF0	; 240
    14ca:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8port)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3c 83       	std	Y+4, r19	; 0x04
    14d4:	2b 83       	std	Y+3, r18	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	29 f1       	breq	.+74     	; 0x152a <GPIO_voidWriteHighNibble+0x74>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <GPIO_voidWriteHighNibble+0x3e>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <GPIO_voidWriteHighNibble+0x54>
    14f2:	4a c0       	rjmp	.+148    	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	31 f1       	breq	.+76     	; 0x154a <GPIO_voidWriteHighNibble+0x94>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	89 f1       	breq	.+98     	; 0x156a <GPIO_voidWriteHighNibble+0xb4>
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
	 {
	 case DIO_PORTA:
		PORTA_REG&=0x0f;
    150a:	ab e3       	ldi	r26, 0x3B	; 59
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e3       	ldi	r30, 0x3B	; 59
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 70       	andi	r24, 0x0F	; 15
    1516:	8c 93       	st	X, r24
		PORTA_REG|=copy_u8value;
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	90 81       	ld	r25, Z
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	89 2b       	or	r24, r25
    1526:	8c 93       	st	X, r24
    1528:	2f c0       	rjmp	.+94     	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
		break;
	 case DIO_PORTB:
		PORTB_REG&=0x0f;
    152a:	a8 e3       	ldi	r26, 0x38	; 56
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e8 e3       	ldi	r30, 0x38	; 56
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 70       	andi	r24, 0x0F	; 15
    1536:	8c 93       	st	X, r24
		PORTB_REG|=copy_u8value;
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	90 81       	ld	r25, Z
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	89 2b       	or	r24, r25
    1546:	8c 93       	st	X, r24
    1548:	1f c0       	rjmp	.+62     	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
		break;
	 case DIO_PORTC:
		PORTC_REG&=0x0f;
    154a:	a5 e3       	ldi	r26, 0x35	; 53
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e3       	ldi	r30, 0x35	; 53
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 70       	andi	r24, 0x0F	; 15
    1556:	8c 93       	st	X, r24
		PORTC_REG|=copy_u8value;
    1558:	a5 e3       	ldi	r26, 0x35	; 53
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	90 81       	ld	r25, Z
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	89 2b       	or	r24, r25
    1566:	8c 93       	st	X, r24
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
		break;
	 case DIO_PORTD:
		PORTD_REG&=0x0f;
    156a:	a2 e3       	ldi	r26, 0x32	; 50
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	8f 70       	andi	r24, 0x0F	; 15
    1576:	8c 93       	st	X, r24
		PORTD_REG|=copy_u8value;
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	90 81       	ld	r25, Z
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	89 2b       	or	r24, r25
    1586:	8c 93       	st	X, r24
		default:
		  break;
	 }


}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <GPIO_voidSetHighNibbleDDR>:
void GPIO_voidSetHighNibbleDDR(u8 copy_u8port,u8 copy_u8Mode)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <GPIO_voidSetHighNibbleDDR+0x6>
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	8a 83       	std	Y+2, r24	; 0x02
    15a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 counter;
	for(counter=4;counter<=7;counter++){
    15a6:	84 e0       	ldi	r24, 0x04	; 4
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <GPIO_voidSetHighNibbleDDR+0x26>
		DIO_vidsetPinDir(copy_u8port ,counter , copy_u8Mode);
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	69 81       	ldd	r22, Y+1	; 0x01
    15b0:	4b 81       	ldd	r20, Y+3	; 0x03
    15b2:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>

}
void GPIO_voidSetHighNibbleDDR(u8 copy_u8port,u8 copy_u8Mode)
{
	u8 counter;
	for(counter=4;counter<=7;counter++){
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	a8 f3       	brcs	.-22     	; 0x15ac <GPIO_voidSetHighNibbleDDR+0x16>
		DIO_vidsetPinDir(copy_u8port ,counter , copy_u8Mode);

	}
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <EEPROM_vRead>:
#include "EEPROM_private.h"
#include "EEPROM_config.h"


void EEPROM_vRead(u8 Copy_u8LocationAddress,u8 *Copy_pu8Data)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <EEPROM_vRead+0x6>
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	7b 83       	std	Y+3, r23	; 0x03
    15de:	6a 83       	std	Y+2, r22	; 0x02
	/* Start Condition */
	TWI_enStartCondition();
    15e0:	0e 94 8f 11 	call	0x231e	; 0x231e <TWI_enStartCondition>
	/*Send SLA With  Address */
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    15e4:	80 ea       	ldi	r24, 0xA0	; 160
    15e6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_enSetSlaveAddressWithWrite>
	/*Send Memory location */
	TWI_enMasterWriteData(Copy_u8LocationAddress);
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	0e 94 67 12 	call	0x24ce	; 0x24ce <TWI_enMasterWriteData>
	/*Repeat Start to change Write operation to Read operation*/
	TWI_enRepeateStart();
    15f0:	0e 94 c0 11 	call	0x2380	; 0x2380 <TWI_enRepeateStart>
	TWI_enSetSlaveAddressWithRead(SLAVE_ADDRESS);
    15f4:	80 ea       	ldi	r24, 0xA0	; 160
    15f6:	0e 94 2f 12 	call	0x245e	; 0x245e <TWI_enSetSlaveAddressWithRead>
	/*Master Read Data*/
		TWI_enMasterReadData(Copy_pu8Data);
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	0e 94 97 12 	call	0x252e	; 0x252e <TWI_enMasterReadData>
		TWI_vStopCondition();
    1602:	0e 94 cc 12 	call	0x2598	; 0x2598 <TWI_vStopCondition>
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <EEPROM_vWrite>:

void EEPROM_vWrite(u8 Copy_u8LocationAddress,u8 Copy_pu8Data)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	60 97       	sbiw	r28, 0x10	; 16
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	8f 87       	std	Y+15, r24	; 0x0f
    1628:	68 8b       	std	Y+16, r22	; 0x10
	/* Start Condition */
	TWI_enStartCondition();
    162a:	0e 94 8f 11 	call	0x231e	; 0x231e <TWI_enStartCondition>

	/*Send SLA With  Address */
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    162e:	80 ea       	ldi	r24, 0xA0	; 160
    1630:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_enSetSlaveAddressWithWrite>
	/*Send Memory location */
	TWI_enMasterWriteData(Copy_u8LocationAddress);
    1634:	8f 85       	ldd	r24, Y+15	; 0x0f
    1636:	0e 94 67 12 	call	0x24ce	; 0x24ce <TWI_enMasterWriteData>
	/*Master Send Data*/
	TWI_enMasterWriteData(Copy_pu8Data);
    163a:	88 89       	ldd	r24, Y+16	; 0x10
    163c:	0e 94 67 12 	call	0x24ce	; 0x24ce <TWI_enMasterWriteData>
	TWI_vStopCondition();
    1640:	0e 94 cc 12 	call	0x2598	; 0x2598 <TWI_vStopCondition>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e2       	ldi	r26, 0x20	; 32
    164a:	b1 e4       	ldi	r27, 0x41	; 65
    164c:	8b 87       	std	Y+11, r24	; 0x0b
    164e:	9c 87       	std	Y+12, r25	; 0x0c
    1650:	ad 87       	std	Y+13, r26	; 0x0d
    1652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1654:	6b 85       	ldd	r22, Y+11	; 0x0b
    1656:	7c 85       	ldd	r23, Y+12	; 0x0c
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4a ef       	ldi	r20, 0xFA	; 250
    1662:	54 e4       	ldi	r21, 0x44	; 68
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8f 83       	std	Y+7, r24	; 0x07
    166e:	98 87       	std	Y+8, r25	; 0x08
    1670:	a9 87       	std	Y+9, r26	; 0x09
    1672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1688:	88 23       	and	r24, r24
    168a:	2c f4       	brge	.+10     	; 0x1696 <EEPROM_vWrite+0x84>
		__ticks = 1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	3f c0       	rjmp	.+126    	; 0x1714 <EEPROM_vWrite+0x102>
	else if (__tmp > 65535)
    1696:	6f 81       	ldd	r22, Y+7	; 0x07
    1698:	78 85       	ldd	r23, Y+8	; 0x08
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	3f ef       	ldi	r19, 0xFF	; 255
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	57 e4       	ldi	r21, 0x47	; 71
    16a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	4c f5       	brge	.+82     	; 0x1700 <EEPROM_vWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <EEPROM_vWrite+0xe4>
    16d8:	88 ec       	ldi	r24, 0xC8	; 200
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c 83       	std	Y+4, r25	; 0x04
    16de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <EEPROM_vWrite+0xd2>
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9e 83       	std	Y+6, r25	; 0x06
    16f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <EEPROM_vWrite+0xc6>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <EEPROM_vWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <EEPROM_vWrite+0x10e>
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);

}
    1728:	60 96       	adiw	r28, 0x10	; 16
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <Global_Interrupt_Enable>:
#include "utils.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1742:	af e5       	ldi	r26, 0x5F	; 95
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ef e5       	ldi	r30, 0x5F	; 95
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    175e:	af e5       	ldi	r26, 0x5F	; 95
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ef e5       	ldi	r30, 0x5F	; 95
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	8c 93       	st	X, r24
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <KPD_u8GetPressedKey>:
		{'1','2','3','-'},
		{'c','0','=','+'}
};

u8 KPD_u8GetPressedKey(void)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	61 97       	sbiw	r28, 0x11	; 17
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61

u8 u8SwVal=NOT_PRESSED;
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	89 8b       	std	Y+17, r24	; 0x11
u8 u8Col;
u8 u8Row;

for(u8Col=COL_BGN;u8Col<COL_NUM;u8Col++)
    178a:	18 8a       	std	Y+16, r1	; 0x10
    178c:	ab c0       	rjmp	.+342    	; 0x18e4 <KPD_u8GetPressedKey+0x172>
{
/*  Clear Column Pin */
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_LOW);
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	68 89       	ldd	r22, Y+16	; 0x10
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	for(u8Row=ROW_BGN;u8Row<(ROW_BGN+ROW_NUM);u8Row++)
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	8f 87       	std	Y+15, r24	; 0x0f
    179c:	97 c0       	rjmp	.+302    	; 0x18cc <KPD_u8GetPressedKey+0x15a>
	{
		if(DIO_u8GetPinVal(KPD_PORT,u8Row)==DIO_LOW)
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    17a2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_u8GetPinVal>
    17a6:	88 23       	and	r24, r24
    17a8:	09 f0       	breq	.+2      	; 0x17ac <KPD_u8GetPressedKey+0x3a>
    17aa:	8d c0       	rjmp	.+282    	; 0x18c6 <KPD_u8GetPressedKey+0x154>
		{
			u8SwVal = KPD_au8Array[u8Row-ROW_BGN][u8Col];
    17ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	ac 01       	movw	r20, r24
    17b4:	44 50       	subi	r20, 0x04	; 4
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	88 89       	ldd	r24, Y+16	; 0x10
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	ca 01       	movw	r24, r20
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	fc 01       	movw	r30, r24
    17ce:	eb 5b       	subi	r30, 0xBB	; 187
    17d0:	fe 4f       	sbci	r31, 0xFE	; 254
    17d2:	80 81       	ld	r24, Z
    17d4:	89 8b       	std	Y+17, r24	; 0x11
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e2       	ldi	r26, 0x20	; 32
    17dc:	b1 e4       	ldi	r27, 0x41	; 65
    17de:	8b 87       	std	Y+11, r24	; 0x0b
    17e0:	9c 87       	std	Y+12, r25	; 0x0c
    17e2:	ad 87       	std	Y+13, r26	; 0x0d
    17e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8f 83       	std	Y+7, r24	; 0x07
    1800:	98 87       	std	Y+8, r25	; 0x08
    1802:	a9 87       	std	Y+9, r26	; 0x09
    1804:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <KPD_u8GetPressedKey+0xb6>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <KPD_u8GetPressedKey+0x134>
	else if (__tmp > 65535)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <KPD_u8GetPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	6b 85       	ldd	r22, Y+11	; 0x0b
    1842:	7c 85       	ldd	r23, Y+12	; 0x0c
    1844:	8d 85       	ldd	r24, Y+13	; 0x0d
    1846:	9e 85       	ldd	r25, Y+14	; 0x0e
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <KPD_u8GetPressedKey+0x116>
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <KPD_u8GetPressedKey+0x104>
    187a:	9c 83       	std	Y+4, r25	; 0x04
    187c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <KPD_u8GetPressedKey+0xf8>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <KPD_u8GetPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <KPD_u8GetPressedKey+0x140>
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			while(DIO_u8GetPinVal(KPD_PORT,u8Row)==DIO_LOW);
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    18be:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_u8GetPinVal>
    18c2:	88 23       	and	r24, r24
    18c4:	d1 f3       	breq	.-12     	; 0x18ba <KPD_u8GetPressedKey+0x148>

for(u8Col=COL_BGN;u8Col<COL_NUM;u8Col++)
{
/*  Clear Column Pin */
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_LOW);
	for(u8Row=ROW_BGN;u8Row<(ROW_BGN+ROW_NUM);u8Row++)
    18c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	8f 87       	std	Y+15, r24	; 0x0f
    18cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <KPD_u8GetPressedKey+0x162>
    18d2:	65 cf       	rjmp	.-310    	; 0x179e <KPD_u8GetPressedKey+0x2c>
			_delay_ms(10);
			while(DIO_u8GetPinVal(KPD_PORT,u8Row)==DIO_LOW);

		}
	}
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_HIGH);
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	68 89       	ldd	r22, Y+16	; 0x10
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>

u8 u8SwVal=NOT_PRESSED;
u8 u8Col;
u8 u8Row;

for(u8Col=COL_BGN;u8Col<COL_NUM;u8Col++)
    18de:	88 89       	ldd	r24, Y+16	; 0x10
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	88 8b       	std	Y+16, r24	; 0x10
    18e4:	88 89       	ldd	r24, Y+16	; 0x10
    18e6:	84 30       	cpi	r24, 0x04	; 4
    18e8:	08 f4       	brcc	.+2      	; 0x18ec <KPD_u8GetPressedKey+0x17a>
    18ea:	51 cf       	rjmp	.-350    	; 0x178e <KPD_u8GetPressedKey+0x1c>
		}
	}
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_HIGH);

}
return u8SwVal;
    18ec:	89 89       	ldd	r24, Y+17	; 0x11
}
    18ee:	61 96       	adiw	r28, 0x11	; 17
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <KPD_u8GetString>:
u8* KPD_u8GetString(void)
{
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <KPD_u8GetString+0xa>
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	u8 *Pu8Str;
	u8 i;
	for(i=0;i<4;i++)
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <KPD_u8GetString+0x32>
	{
		Pu8Str[i]=KPD_u8GetPressedKey();
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	8c 01       	movw	r16, r24
    1920:	02 0f       	add	r16, r18
    1922:	13 1f       	adc	r17, r19
    1924:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    1928:	f8 01       	movw	r30, r16
    192a:	80 83       	st	Z, r24
}
u8* KPD_u8GetString(void)
{
	u8 *Pu8Str;
	u8 i;
	for(i=0;i<4;i++)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	70 f3       	brcs	.-36     	; 0x1914 <KPD_u8GetString+0x14>
	{
		Pu8Str[i]=KPD_u8GetPressedKey();
	}
	return Pu8Str;
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <HLCD_vidInit>:
u8 arr2[8]={0, 1, 1, 1, 31, 0, 10, 0};//ي
u8 arr3[8]={1, 0, 1, 1, 31, 0, 0, 0};//ن
u8 arr4[8]={16, 16, 16, 16, 31, 0, 0, 0};//ا

void HLCD_vidInit(void)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	e8 97       	sbiw	r28, 0x38	; 56
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
	DIO_vidsetPortDir(LCD_DATA_PORT,0xFF);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	6f ef       	ldi	r22, 0xFF	; 255
    1964:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_vidsetPortDir>

	DIO_vidsetPinDir(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT);//RS
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(LCD_CONTROL_PORT,LCD_E_PIN,DIO_OUTPUT);//ENABLE
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	61 e0       	ldi	r22, 0x01	; 1
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a8 ec       	ldi	r26, 0xC8	; 200
    1982:	b2 e4       	ldi	r27, 0x42	; 66
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <HLCD_vidInit+0x82>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <HLCD_vidInit+0x100>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <HLCD_vidInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <HLCD_vidInit+0xe2>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <HLCD_vidInit+0xd0>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <HLCD_vidInit+0xc4>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <HLCD_vidInit+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <HLCD_vidInit+0x10c>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	HLCD_vidSendCMD(LCD_FUNCSET_8BIT);
    1a60:	88 e3       	ldi	r24, 0x38	; 56
    1a62:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e4       	ldi	r27, 0x40	; 64
    1a6e:	8f a3       	std	Y+39, r24	; 0x27
    1a70:	98 a7       	std	Y+40, r25	; 0x28
    1a72:	a9 a7       	std	Y+41, r26	; 0x29
    1a74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6f a1       	ldd	r22, Y+39	; 0x27
    1a78:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8b a3       	std	Y+35, r24	; 0x23
    1a90:	9c a3       	std	Y+36, r25	; 0x24
    1a92:	ad a3       	std	Y+37, r26	; 0x25
    1a94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a96:	6b a1       	ldd	r22, Y+35	; 0x23
    1a98:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <HLCD_vidInit+0x16c>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <HLCD_vidInit+0x1ea>
	else if (__tmp > 65535)
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <HLCD_vidInit+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <HLCD_vidInit+0x1cc>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	98 a3       	std	Y+32, r25	; 0x20
    1b00:	8f 8f       	std	Y+31, r24	; 0x1f
    1b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b04:	98 a1       	ldd	r25, Y+32	; 0x20
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <HLCD_vidInit+0x1ba>
    1b0a:	98 a3       	std	Y+32, r25	; 0x20
    1b0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <HLCD_vidInit+0x1ae>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <HLCD_vidInit+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <HLCD_vidInit+0x1f6>
    1b46:	9e 8f       	std	Y+30, r25	; 0x1e
    1b48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_vidSendCMD(LCD_DISPON_CURSOFF);
    1b4a:	8c e0       	ldi	r24, 0x0C	; 12
    1b4c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e4       	ldi	r27, 0x40	; 64
    1b58:	89 8f       	std	Y+25, r24	; 0x19
    1b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	69 8d       	ldd	r22, Y+25	; 0x19
    1b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8d 8b       	std	Y+21, r24	; 0x15
    1b7a:	9e 8b       	std	Y+22, r25	; 0x16
    1b7c:	af 8b       	std	Y+23, r26	; 0x17
    1b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b80:	6d 89       	ldd	r22, Y+21	; 0x15
    1b82:	7e 89       	ldd	r23, Y+22	; 0x16
    1b84:	8f 89       	ldd	r24, Y+23	; 0x17
    1b86:	98 8d       	ldd	r25, Y+24	; 0x18
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <HLCD_vidInit+0x256>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <HLCD_vidInit+0x2d4>
	else if (__tmp > 65535)
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <HLCD_vidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <HLCD_vidInit+0x2b6>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a 8b       	std	Y+18, r25	; 0x12
    1bea:	89 8b       	std	Y+17, r24	; 0x11
    1bec:	89 89       	ldd	r24, Y+17	; 0x11
    1bee:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <HLCD_vidInit+0x2a4>
    1bf4:	9a 8b       	std	Y+18, r25	; 0x12
    1bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9c 8b       	std	Y+20, r25	; 0x14
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <HLCD_vidInit+0x298>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <HLCD_vidInit+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	8b 89       	ldd	r24, Y+19	; 0x13
    1c22:	9c 89       	ldd	r25, Y+20	; 0x14
    1c24:	98 8b       	std	Y+16, r25	; 0x10
    1c26:	8f 87       	std	Y+15, r24	; 0x0f
    1c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2a:	98 89       	ldd	r25, Y+16	; 0x10
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <HLCD_vidInit+0x2e0>
    1c30:	98 8b       	std	Y+16, r25	; 0x10
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_vidSendCMD(LCD_CLR );
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e0       	ldi	r26, 0x00	; 0
    1c40:	b0 e4       	ldi	r27, 0x40	; 64
    1c42:	8b 87       	std	Y+11, r24	; 0x0b
    1c44:	9c 87       	std	Y+12, r25	; 0x0c
    1c46:	ad 87       	std	Y+13, r26	; 0x0d
    1c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	98 87       	std	Y+8, r25	; 0x08
    1c66:	a9 87       	std	Y+9, r26	; 0x09
    1c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <HLCD_vidInit+0x340>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <HLCD_vidInit+0x3be>
	else if (__tmp > 65535)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <HLCD_vidInit+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <HLCD_vidInit+0x3a0>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <HLCD_vidInit+0x38e>
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <HLCD_vidInit+0x382>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <HLCD_vidInit+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <HLCD_vidInit+0x3ca>
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_vidSendCMD(LCD_ENTERYMODE);
    1d1e:	86 e0       	ldi	r24, 0x06	; 6
    1d20:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>

}
    1d24:	e8 96       	adiw	r28, 0x38	; 56
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <HLCD_vidSendCMD>:
void HLCD_vidSendCMD(u8 copy_u8Cmd)
{  	//RS LOW
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	2f 97       	sbiw	r28, 0x0f	; 15
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	62 e0       	ldi	r22, 0x02	; 2
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//COMMAND
	DIO_vidsetPortval(LCD_DATA_PORT,copy_u8Cmd);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d5a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_vidsetPortval>
	//ENABLE
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	61 e0       	ldi	r22, 0x01	; 1
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <HLCD_vidSendCMD+0x84>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <HLCD_vidSendCMD+0x102>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <HLCD_vidSendCMD+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <HLCD_vidSendCMD+0xe4>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <HLCD_vidSendCMD+0xd2>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <HLCD_vidSendCMD+0xc6>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <HLCD_vidSendCMD+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <HLCD_vidSendCMD+0x10e>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
}
    1e56:	2f 96       	adiw	r28, 0x0f	; 15
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <HLCD_vidSendChar>:
void HLCD_vidSendChar(u8 copy_u8Char)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	2f 97       	sbiw	r28, 0x0f	; 15
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
	    //RS HIGH
		DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
		//CHAR
		DIO_vidsetPortval(LCD_DATA_PORT,copy_u8Char);
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e8c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_vidsetPortval>
		//ENABLE
		DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ea0:	bf e3       	ldi	r27, 0x3F	; 63
    1ea2:	8b 87       	std	Y+11, r24	; 0x0b
    1ea4:	9c 87       	std	Y+12, r25	; 0x0c
    1ea6:	ad 87       	std	Y+13, r26	; 0x0d
    1ea8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a ef       	ldi	r20, 0xFA	; 250
    1eb8:	54 e4       	ldi	r21, 0x44	; 68
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8f 83       	std	Y+7, r24	; 0x07
    1ec4:	98 87       	std	Y+8, r25	; 0x08
    1ec6:	a9 87       	std	Y+9, r26	; 0x09
    1ec8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e8       	ldi	r20, 0x80	; 128
    1ed8:	5f e3       	ldi	r21, 0x3F	; 63
    1eda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ede:	88 23       	and	r24, r24
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <HLCD_vidSendChar+0x84>
		__ticks = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	3f c0       	rjmp	.+126    	; 0x1f6a <HLCD_vidSendChar+0x102>
	else if (__tmp > 65535)
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	4c f5       	brge	.+82     	; 0x1f56 <HLCD_vidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <HLCD_vidSendChar+0xe4>
    1f2e:	88 ec       	ldi	r24, 0xC8	; 200
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 83       	std	Y+4, r25	; 0x04
    1f34:	8b 83       	std	Y+3, r24	; 0x03
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <HLCD_vidSendChar+0xd2>
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	69 f7       	brne	.-38     	; 0x1f2e <HLCD_vidSendChar+0xc6>
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <HLCD_vidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f56:	6f 81       	ldd	r22, Y+7	; 0x07
    1f58:	78 85       	ldd	r23, Y+8	; 0x08
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <HLCD_vidSendChar+0x10e>
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	61 e0       	ldi	r22, 0x01	; 1
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
}
    1f88:	2f 96       	adiw	r28, 0x0f	; 15
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <HLCD_vidWriteStr>:
void HLCD_vidWriteStr(char *copy_Pu8str )
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <HLCD_vidWriteStr+0x6>
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1faa:	19 82       	std	Y+1, r1	; 0x01
    1fac:	0e c0       	rjmp	.+28     	; 0x1fca <HLCD_vidWriteStr+0x30>
	while( copy_Pu8str[i]!='\0')
	{
		HLCD_vidSendChar(copy_Pu8str[i]);
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	80 81       	ld	r24, Z
    1fc0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
		i++;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	89 83       	std	Y+1, r24	; 0x01
		DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
}
void HLCD_vidWriteStr(char *copy_Pu8str )
{
	u8 i=0;
	while( copy_Pu8str[i]!='\0')
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	80 81       	ld	r24, Z
    1fdc:	88 23       	and	r24, r24
    1fde:	39 f7       	brne	.-50     	; 0x1fae <HLCD_vidWriteStr+0x14>
	{
		HLCD_vidSendChar(copy_Pu8str[i]);
		i++;
	}

}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <HLCD_vidWriteNum>:
void HLCD_vidWriteNum(u32 copy_u32num  )
{
    1fec:	ef 92       	push	r14
    1fee:	ff 92       	push	r15
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	28 97       	sbiw	r28, 0x08	; 8
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	6d 83       	std	Y+5, r22	; 0x05
    200a:	7e 83       	std	Y+6, r23	; 0x06
    200c:	8f 83       	std	Y+7, r24	; 0x07
    200e:	98 87       	std	Y+8, r25	; 0x08
	u32 temp=1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e0       	ldi	r26, 0x00	; 0
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	ab 83       	std	Y+3, r26	; 0x03
    201e:	bc 83       	std	Y+4, r27	; 0x04
    2020:	36 c0       	rjmp	.+108    	; 0x208e <HLCD_vidWriteNum+0xa2>
	while(copy_u32num!=0){
	temp=(temp*10)+copy_u32num%10;
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	ab 81       	ldd	r26, Y+3	; 0x03
    2028:	bc 81       	ldd	r27, Y+4	; 0x04
    202a:	2a e0       	ldi	r18, 0x0A	; 10
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__mulsi3>
    203a:	7b 01       	movw	r14, r22
    203c:	8c 01       	movw	r16, r24
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	af 81       	ldd	r26, Y+7	; 0x07
    2044:	b8 85       	ldd	r27, Y+8	; 0x08
    2046:	2a e0       	ldi	r18, 0x0A	; 10
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 04 20 	call	0x4008	; 0x4008 <__udivmodsi4>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8e 0d       	add	r24, r14
    205c:	9f 1d       	adc	r25, r15
    205e:	a0 1f       	adc	r26, r16
    2060:	b1 1f       	adc	r27, r17
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	ab 83       	std	Y+3, r26	; 0x03
    2068:	bc 83       	std	Y+4, r27	; 0x04
	copy_u32num/=10;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	af 81       	ldd	r26, Y+7	; 0x07
    2070:	b8 85       	ldd	r27, Y+8	; 0x08
    2072:	2a e0       	ldi	r18, 0x0A	; 10
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 04 20 	call	0x4008	; 0x4008 <__udivmodsi4>
    2082:	da 01       	movw	r26, r20
    2084:	c9 01       	movw	r24, r18
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	af 83       	std	Y+7, r26	; 0x07
    208c:	b8 87       	std	Y+8, r27	; 0x08

}
void HLCD_vidWriteNum(u32 copy_u32num  )
{
	u32 temp=1;
	while(copy_u32num!=0){
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	af 81       	ldd	r26, Y+7	; 0x07
    2094:	b8 85       	ldd	r27, Y+8	; 0x08
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	a1 05       	cpc	r26, r1
    209a:	b1 05       	cpc	r27, r1
    209c:	11 f6       	brne	.-124    	; 0x2022 <HLCD_vidWriteNum+0x36>
	temp=(temp*10)+copy_u32num%10;
	copy_u32num/=10;
	}

	do{
	HLCD_vidSendChar((temp%10)+'0');
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	ab 81       	ldd	r26, Y+3	; 0x03
    20a4:	bc 81       	ldd	r27, Y+4	; 0x04
    20a6:	2a e0       	ldi	r18, 0x0A	; 10
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 04 20 	call	0x4008	; 0x4008 <__udivmodsi4>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	80 5d       	subi	r24, 0xD0	; 208
    20bc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
	temp/=10;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	ab 81       	ldd	r26, Y+3	; 0x03
    20c6:	bc 81       	ldd	r27, Y+4	; 0x04
    20c8:	2a e0       	ldi	r18, 0x0A	; 10
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 04 20 	call	0x4008	; 0x4008 <__udivmodsi4>
    20d8:	da 01       	movw	r26, r20
    20da:	c9 01       	movw	r24, r18
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	ab 83       	std	Y+3, r26	; 0x03
    20e2:	bc 83       	std	Y+4, r27	; 0x04
	}while(temp!=1);
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	ab 81       	ldd	r26, Y+3	; 0x03
    20ea:	bc 81       	ldd	r27, Y+4	; 0x04
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	91 05       	cpc	r25, r1
    20f0:	a1 05       	cpc	r26, r1
    20f2:	b1 05       	cpc	r27, r1
    20f4:	a1 f6       	brne	.-88     	; 0x209e <HLCD_vidWriteNum+0xb2>
}
    20f6:	28 96       	adiw	r28, 0x08	; 8
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	08 95       	ret

00002110 <HLCD_vidGoToXY>:
void HLCD_vidGoToXY(u8 x, u8 y)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <HLCD_vidGoToXY+0x6>
    2116:	0f 92       	push	r0
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	8a 83       	std	Y+2, r24	; 0x02
    211e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
if(x <2 && y<16)
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	82 30       	cpi	r24, 0x02	; 2
    2124:	c8 f4       	brcc	.+50     	; 0x2158 <HLCD_vidGoToXY+0x48>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	80 31       	cpi	r24, 0x10	; 16
    212a:	b0 f4       	brcc	.+44     	; 0x2158 <HLCD_vidGoToXY+0x48>
{
	Address= (x * 0x40) + y;
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	00 24       	eor	r0, r0
    2134:	96 95       	lsr	r25
    2136:	87 95       	ror	r24
    2138:	07 94       	ror	r0
    213a:	96 95       	lsr	r25
    213c:	87 95       	ror	r24
    213e:	07 94       	ror	r0
    2140:	98 2f       	mov	r25, r24
    2142:	80 2d       	mov	r24, r0
    2144:	98 2f       	mov	r25, r24
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	89 0f       	add	r24, r25
    214a:	89 83       	std	Y+1, r24	; 0x01
	Address=SET_BIT(Address,7);
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	80 68       	ori	r24, 0x80	; 128
    2150:	89 83       	std	Y+1, r24	; 0x01
	HLCD_vidSendCMD(Address);
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
}
}
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <HLCD_vidWriteSpecialChar>:

void HLCD_vidWriteSpecialChar(u8 *copy_Pu8Pattern,u8 copy_Pu8PatternNumber,u8 X_pos,u8 Y_pos )
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	27 97       	sbiw	r28, 0x07	; 7
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
    217c:	6d 83       	std	Y+5, r22	; 0x05
    217e:	4e 83       	std	Y+6, r20	; 0x06
    2180:	2f 83       	std	Y+7, r18	; 0x07
	u8 Address, counter;
	/*Calculate the required address of CGRAM*/
	Address=copy_Pu8PatternNumber*8;
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	8a 83       	std	Y+2, r24	; 0x02
	Address=SET_BIT(Address,6);
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	80 64       	ori	r24, 0x40	; 64
    219a:	8a 83       	std	Y+2, r24	; 0x02
	/*set CGRAM Address */
	HLCD_vidSendCMD(Address);
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
	/*write the pattern in CGRAM*/
	for(counter=0;counter<8;counter++)
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	0e c0       	rjmp	.+28     	; 0x21c2 <HLCD_vidWriteSpecialChar+0x5e>
	{
		HLCD_vidSendChar(copy_Pu8Pattern[counter]);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	fc 01       	movw	r30, r24
    21b2:	e2 0f       	add	r30, r18
    21b4:	f3 1f       	adc	r31, r19
    21b6:	80 81       	ld	r24, Z
    21b8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
	Address=copy_Pu8PatternNumber*8;
	Address=SET_BIT(Address,6);
	/*set CGRAM Address */
	HLCD_vidSendCMD(Address);
	/*write the pattern in CGRAM*/
	for(counter=0;counter<8;counter++)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	8f 5f       	subi	r24, 0xFF	; 255
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	88 30       	cpi	r24, 0x08	; 8
    21c6:	78 f3       	brcs	.-34     	; 0x21a6 <HLCD_vidWriteSpecialChar+0x42>
	{
		HLCD_vidSendChar(copy_Pu8Pattern[counter]);
	}
	/*shift the counter to the DDRAM*/
	HLCD_vidGoToXY(X_pos,Y_pos);
    21c8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
	/*Display the CGRAM pattern on the LCD */
	HLCD_vidSendChar(copy_Pu8PatternNumber);
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
}
    21d6:	27 96       	adiw	r28, 0x07	; 7
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <HLCD_option1>:
void HLCD_option1(void)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
	HLCD_vidGoToXY(0,0);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
	HLCD_vidWriteStr("1->ROOM1 2->ROOM ");
    21f8:	80 e6       	ldi	r24, 0x60	; 96
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
	HLCD_vidGoToXY(1,0);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
	HLCD_vidWriteStr("3->TV         ");
    2208:	82 e7       	ldi	r24, 0x72	; 114
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>

}
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <HLCD_option2>:
void HLCD_option2(void)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
	HLCD_vidGoToXY(0,0);
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
	HLCD_vidWriteStr("A->ON B->OFF ");
    2226:	81 e8       	ldi	r24, 0x81	; 129
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
	HLCD_vidGoToXY(1,0);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
	HLCD_vidWriteStr("C->RET         ");
    2236:	8f e8       	ldi	r24, 0x8F	; 143
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>

}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <LCD_Display_myName_x0>:
void LCD_Display_myName_x0(void)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62

		HLCD_vidWriteSpecialChar(arr1,4,1,8);
    224c:	83 e2       	ldi	r24, 0x23	; 35
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	64 e0       	ldi	r22, 0x04	; 4
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	28 e0       	ldi	r18, 0x08	; 8
    2256:	0e 94 b2 10 	call	0x2164	; 0x2164 <HLCD_vidWriteSpecialChar>
		HLCD_vidWriteSpecialChar(arr2,3,1,7);
    225a:	8b e2       	ldi	r24, 0x2B	; 43
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	63 e0       	ldi	r22, 0x03	; 3
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	27 e0       	ldi	r18, 0x07	; 7
    2264:	0e 94 b2 10 	call	0x2164	; 0x2164 <HLCD_vidWriteSpecialChar>
		HLCD_vidWriteSpecialChar(arr3,2,1,6);
    2268:	83 e3       	ldi	r24, 0x33	; 51
    226a:	91 e0       	ldi	r25, 0x01	; 1
    226c:	62 e0       	ldi	r22, 0x02	; 2
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	26 e0       	ldi	r18, 0x06	; 6
    2272:	0e 94 b2 10 	call	0x2164	; 0x2164 <HLCD_vidWriteSpecialChar>
		HLCD_vidWriteSpecialChar(arr4,1,1,5);
    2276:	8b e3       	ldi	r24, 0x3B	; 59
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	25 e0       	ldi	r18, 0x05	; 5
    2280:	0e 94 b2 10 	call	0x2164	; 0x2164 <HLCD_vidWriteSpecialChar>

}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <DC_Intro>:
void DC_Intro(void){
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	HLCD_vidWriteStr("  Welcome Home  ");
    2292:	8f e9       	ldi	r24, 0x9F	; 159
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
	LCD_Display_myName_x0();
    229a:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_Display_myName_x0>
	//	HLCD_vidGoToXY(1,0);
	//	HLCD_vidWriteStr_4BIT("Password: ");
}
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <TWI_vMasterInit>:
#include "MTWI_private.h"
#include "MTWI_config.h"


void TWI_vMasterInit(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	/* Set Clock configuration  TWBR = 2 */
	TWBR = 2;
    22ac:	e0 e2       	ldi	r30, 0x20	; 32
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    22b4:	a1 e2       	ldi	r26, 0x21	; 33
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e1 e2       	ldi	r30, 0x21	; 33
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8e 7f       	andi	r24, 0xFE	; 254
    22c0:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    22c2:	a1 e2       	ldi	r26, 0x21	; 33
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e1 e2       	ldi	r30, 0x21	; 33
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8d 7f       	andi	r24, 0xFD	; 253
    22ce:	8c 93       	st	X, r24

	/* Enable Acknowledge bit */
	//SET_BIT(TWCR , TWCR_TWEA);
	/* Set my own Address */
	TWAR = MASTER_ADDRESS << 1;
    22d0:	e2 e2       	ldi	r30, 0x22	; 34
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	84 e6       	ldi	r24, 0x64	; 100
    22d6:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    22d8:	a6 e5       	ldi	r26, 0x56	; 86
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e6 e5       	ldi	r30, 0x56	; 86
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	84 60       	ori	r24, 0x04	; 4
    22e4:	8c 93       	st	X, r24
}
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <TWI_vSlaveInit>:
void TWI_vSlaveInit(void)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    22f4:	a6 e5       	ldi	r26, 0x56	; 86
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e6 e5       	ldi	r30, 0x56	; 86
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	80 64       	ori	r24, 0x40	; 64
    2300:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = SLAVE_ADDRESS << 1;
    2302:	e2 e2       	ldi	r30, 0x22	; 34
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	88 e2       	ldi	r24, 0x28	; 40
    2308:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    230a:	a6 e5       	ldi	r26, 0x56	; 86
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e6 e5       	ldi	r30, 0x56	; 86
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	84 60       	ori	r24, 0x04	; 4
    2316:	8c 93       	st	X, r24
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <TWI_enStartCondition>:

TWI_ErrorState_t TWI_enStartCondition(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	0f 92       	push	r0
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2328:	19 82       	std	Y+1, r1	; 0x01

	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    232a:	a6 e5       	ldi	r26, 0x56	; 86
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e6 e5       	ldi	r30, 0x56	; 86
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2338:	a6 e5       	ldi	r26, 0x56	; 86
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e6 e5       	ldi	r30, 0x56	; 86
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 68       	ori	r24, 0x80	; 128
    2344:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2346:	a6 e5       	ldi	r26, 0x56	; 86
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e6 e5       	ldi	r30, 0x56	; 86
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	84 60       	ori	r24, 0x04	; 4
    2352:	8c 93       	st	X, r24
	//TWCR = 0b10100100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2354:	e6 e5       	ldi	r30, 0x56	; 86
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	88 23       	and	r24, r24
    235c:	dc f7       	brge	.-10     	; 0x2354 <TWI_enStartCondition+0x36>

	if((TWSR & 0XF8) != START_CONDITION)
    235e:	e1 e2       	ldi	r30, 0x21	; 33
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	88 7f       	andi	r24, 0xF8	; 248
    236a:	90 70       	andi	r25, 0x00	; 0
    236c:	88 30       	cpi	r24, 0x08	; 8
    236e:	91 05       	cpc	r25, r1
    2370:	11 f0       	breq	.+4      	; 0x2376 <TWI_enStartCondition+0x58>
	{
		Local_ErrorState = START_CONDTITION_ERR;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
}
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <TWI_enRepeateStart>:
TWI_ErrorState_t TWI_enRepeateStart(void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	0f 92       	push	r0
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    238a:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    238c:	a6 e5       	ldi	r26, 0x56	; 86
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e6 e5       	ldi	r30, 0x56	; 86
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	80 62       	ori	r24, 0x20	; 32
    2398:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    239a:	a6 e5       	ldi	r26, 0x56	; 86
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e6 e5       	ldi	r30, 0x56	; 86
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	80 68       	ori	r24, 0x80	; 128
    23a6:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    23a8:	a6 e5       	ldi	r26, 0x56	; 86
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e6 e5       	ldi	r30, 0x56	; 86
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	84 60       	ori	r24, 0x04	; 4
    23b4:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    23b6:	e6 e5       	ldi	r30, 0x56	; 86
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	88 23       	and	r24, r24
    23be:	dc f7       	brge	.-10     	; 0x23b6 <TWI_enRepeateStart+0x36>

	if((TWSR & 0XF8) != REPEATE_START_CONDITION)
    23c0:	e1 e2       	ldi	r30, 0x21	; 33
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	88 7f       	andi	r24, 0xF8	; 248
    23cc:	90 70       	andi	r25, 0x00	; 0
    23ce:	80 31       	cpi	r24, 0x10	; 16
    23d0:	91 05       	cpc	r25, r1
    23d2:	11 f0       	breq	.+4      	; 0x23d8 <TWI_enRepeateStart+0x58>
	{
		Local_ErrorState = REPEAT_START_ERR;
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <TWI_enSetSlaveAddressWithWrite>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <TWI_enSetSlaveAddressWithWrite+0x6>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    23ee:	19 82       	std	Y+1, r1	; 0x01
	/* Clear bit 0 to make write operation */
		CLR_BIT(TWDR , TWDR_TWD0);
    23f0:	a3 e2       	ldi	r26, 0x23	; 35
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e3 e2       	ldi	r30, 0x23	; 35
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	8e 7f       	andi	r24, 0xFE	; 254
    23fc:	8c 93       	st	X, r24
	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress;
    23fe:	e3 e2       	ldi	r30, 0x23	; 35
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	80 83       	st	Z, r24
	/* Clear the start condition bit */
		CLR_BIT(TWCR , TWCR_TWSTA);
    2406:	a6 e5       	ldi	r26, 0x56	; 86
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e6 e5       	ldi	r30, 0x56	; 86
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	8f 7d       	andi	r24, 0xDF	; 223
    2412:	8c 93       	st	X, r24


	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2414:	a6 e5       	ldi	r26, 0x56	; 86
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e6 e5       	ldi	r30, 0x56	; 86
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2422:	a6 e5       	ldi	r26, 0x56	; 86
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e6 e5       	ldi	r30, 0x56	; 86
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	84 60       	ori	r24, 0x04	; 4
    242e:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2430:	e6 e5       	ldi	r30, 0x56	; 86
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	88 23       	and	r24, r24
    2438:	dc f7       	brge	.-10     	; 0x2430 <TWI_enSetSlaveAddressWithWrite+0x4e>

	if((TWSR & 0XF8) == SLA_WITH_W_NOAK)
    243a:	e1 e2       	ldi	r30, 0x21	; 33
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	88 7f       	andi	r24, 0xF8	; 248
    2446:	90 70       	andi	r25, 0x00	; 0
    2448:	80 32       	cpi	r24, 0x20	; 32
    244a:	91 05       	cpc	r25, r1
    244c:	11 f4       	brne	.+4      	; 0x2452 <TWI_enSetSlaveAddressWithWrite+0x70>
	{
		Local_ErrorState = SLA_W_NOACK_ERR;
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    2452:	89 81       	ldd	r24, Y+1	; 0x01

}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <TWI_enSetSlaveAddressWithRead>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	00 d0       	rcall	.+0      	; 0x2464 <TWI_enSetSlaveAddressWithRead+0x6>
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    246a:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress | 1;
    246c:	e3 e2       	ldi	r30, 0x23	; 35
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	81 60       	ori	r24, 0x01	; 1
    2474:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    2476:	a6 e5       	ldi	r26, 0x56	; 86
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e6 e5       	ldi	r30, 0x56	; 86
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	8f 7d       	andi	r24, 0xDF	; 223
    2482:	8c 93       	st	X, r24
	/* Set bit 0 to make Read operation */
	//SET_BIT(TWDR , TWDR_TWD0);
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2484:	a6 e5       	ldi	r26, 0x56	; 86
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e6 e5       	ldi	r30, 0x56	; 86
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	80 68       	ori	r24, 0x80	; 128
    2490:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2492:	a6 e5       	ldi	r26, 0x56	; 86
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e6 e5       	ldi	r30, 0x56	; 86
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	84 60       	ori	r24, 0x04	; 4
    249e:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    24a0:	e6 e5       	ldi	r30, 0x56	; 86
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 23       	and	r24, r24
    24a8:	dc f7       	brge	.-10     	; 0x24a0 <TWI_enSetSlaveAddressWithRead+0x42>

	if((TWSR & 0XF8) == SLA_WITH_R_NOAK)
    24aa:	e1 e2       	ldi	r30, 0x21	; 33
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	88 7f       	andi	r24, 0xF8	; 248
    24b6:	90 70       	andi	r25, 0x00	; 0
    24b8:	88 33       	cpi	r24, 0x38	; 56
    24ba:	91 05       	cpc	r25, r1
    24bc:	11 f4       	brne	.+4      	; 0x24c2 <TWI_enSetSlaveAddressWithRead+0x64>
	{
		Local_ErrorState = SLA_R_NOACK_ERR;
    24be:	84 e0       	ldi	r24, 0x04	; 4
    24c0:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01

}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <TWI_enMasterWriteData>:
TWI_ErrorState_t TWI_enMasterWriteData(u8 Copy_u8Data)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <TWI_enMasterWriteData+0x6>
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    24da:	19 82       	std	Y+1, r1	; 0x01
	/* Write data to TWDR */
	TWDR = Copy_u8Data;
    24dc:	e3 e2       	ldi	r30, 0x23	; 35
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	80 83       	st	Z, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    24e4:	a6 e5       	ldi	r26, 0x56	; 86
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e6 e5       	ldi	r30, 0x56	; 86
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	80 68       	ori	r24, 0x80	; 128
    24f0:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    24f2:	a6 e5       	ldi	r26, 0x56	; 86
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e6 e5       	ldi	r30, 0x56	; 86
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	84 60       	ori	r24, 0x04	; 4
    24fe:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2500:	e6 e5       	ldi	r30, 0x56	; 86
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	88 23       	and	r24, r24
    2508:	dc f7       	brge	.-10     	; 0x2500 <TWI_enMasterWriteData+0x32>

	if((TWSR & 0XF8) == MASTER_SEND_DATA_NOAK)
    250a:	e1 e2       	ldi	r30, 0x21	; 33
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	88 7f       	andi	r24, 0xF8	; 248
    2516:	90 70       	andi	r25, 0x00	; 0
    2518:	80 33       	cpi	r24, 0x30	; 48
    251a:	91 05       	cpc	r25, r1
    251c:	11 f4       	brne	.+4      	; 0x2522 <TWI_enMasterWriteData+0x54>
	{
		Local_ErrorState = MASTER_SEND_DATA_ERR;
    251e:	85 e0       	ldi	r24, 0x05	; 5
    2520:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2522:	89 81       	ldd	r24, Y+1	; 0x01

}
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <TWI_enMasterReadData>:
TWI_ErrorState_t TWI_enMasterReadData(u8 *Copy_u8Data)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <TWI_enMasterReadData+0x6>
    2534:	0f 92       	push	r0
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9b 83       	std	Y+3, r25	; 0x03
    253c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    253e:	19 82       	std	Y+1, r1	; 0x01

	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2540:	a6 e5       	ldi	r26, 0x56	; 86
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e6 e5       	ldi	r30, 0x56	; 86
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	84 60       	ori	r24, 0x04	; 4
    254c:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    254e:	a6 e5       	ldi	r26, 0x56	; 86
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e6 e5       	ldi	r30, 0x56	; 86
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	80 68       	ori	r24, 0x80	; 128
    255a:	8c 93       	st	X, r24


	//TWCR = 0b10000100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    255c:	e6 e5       	ldi	r30, 0x56	; 86
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	88 23       	and	r24, r24
    2564:	dc f7       	brge	.-10     	; 0x255c <TWI_enMasterReadData+0x2e>

	if((TWSR & 0XF8) == MASTER_RECEIVE_DATA_NOAK)
    2566:	e1 e2       	ldi	r30, 0x21	; 33
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	88 7f       	andi	r24, 0xF8	; 248
    2572:	90 70       	andi	r25, 0x00	; 0
    2574:	88 35       	cpi	r24, 0x58	; 88
    2576:	91 05       	cpc	r25, r1
    2578:	11 f4       	brne	.+4      	; 0x257e <TWI_enMasterReadData+0x50>
	{
		Local_ErrorState = MASTER_RECEIVE_DATA_ERR;
    257a:	86 e0       	ldi	r24, 0x06	; 6
    257c:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	*Copy_u8Data = TWDR;
    257e:	e3 e2       	ldi	r30, 0x23	; 35
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	ea 81       	ldd	r30, Y+2	; 0x02
    2586:	fb 81       	ldd	r31, Y+3	; 0x03
    2588:	80 83       	st	Z, r24

	return Local_ErrorState;
    258a:	89 81       	ldd	r24, Y+1	; 0x01

}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <TWI_vStopCondition>:
void TWI_vStopCondition(void)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62

	/* Set bit TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTOP);
    25a0:	a6 e5       	ldi	r26, 0x56	; 86
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e6 e5       	ldi	r30, 0x56	; 86
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	80 61       	ori	r24, 0x10	; 16
    25ac:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    25ae:	a6 e5       	ldi	r26, 0x56	; 86
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e6 e5       	ldi	r30, 0x56	; 86
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	80 68       	ori	r24, 0x80	; 128
    25ba:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    25bc:	a6 e5       	ldi	r26, 0x56	; 86
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e6 e5       	ldi	r30, 0x56	; 86
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	84 60       	ori	r24, 0x04	; 4
    25c8:	8c 93       	st	X, r24
}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
    25d8:	af e4       	ldi	r26, 0x4F	; 79
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	ef e4       	ldi	r30, 0x4F	; 79
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	8e 7f       	andi	r24, 0xFE	; 254
    25e4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
    25e6:	af e4       	ldi	r26, 0x4F	; 79
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	ef e4       	ldi	r30, 0x4F	; 79
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	82 60       	ori	r24, 0x02	; 2
    25f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    25f4:	ae e4       	ldi	r26, 0x4E	; 78
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ee e4       	ldi	r30, 0x4E	; 78
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	88 60       	ori	r24, 0x08	; 8
    2600:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    2602:	ae e4       	ldi	r26, 0x4E	; 78
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	ee e4       	ldi	r30, 0x4E	; 78
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	80 61       	ori	r24, 0x10	; 16
    260e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
    2610:	af e4       	ldi	r26, 0x4F	; 79
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	ef e4       	ldi	r30, 0x4F	; 79
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	8f 7b       	andi	r24, 0xBF	; 191
    261c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
    261e:	af e4       	ldi	r26, 0x4F	; 79
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	ef e4       	ldi	r30, 0x4F	; 79
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	80 68       	ori	r24, 0x80	; 128
    262a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
    262c:	af e4       	ldi	r26, 0x4F	; 79
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	ef e4       	ldi	r30, 0x4F	; 79
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	8f 7e       	andi	r24, 0xEF	; 239
    2638:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
    263a:	af e4       	ldi	r26, 0x4F	; 79
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	ef e4       	ldi	r30, 0x4F	; 79
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	80 62       	ori	r24, 0x20	; 32
    2646:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
    2648:	ae e4       	ldi	r26, 0x4E	; 78
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	ee e4       	ldi	r30, 0x4E	; 78
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	88 7f       	andi	r24, 0xF8	; 248
    2654:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
    2656:	a9 e5       	ldi	r26, 0x59	; 89
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e9 e5       	ldi	r30, 0x59	; 89
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	8b 7f       	andi	r24, 0xFB	; 251
    2662:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    2664:	a9 e5       	ldi	r26, 0x59	; 89
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e9 e5       	ldi	r30, 0x59	; 89
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	87 7f       	andi	r24, 0xF7	; 247
    2670:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    2672:	a9 e5       	ldi	r26, 0x59	; 89
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e9 e5       	ldi	r30, 0x59	; 89
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 7e       	andi	r24, 0xEF	; 239
    267e:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    2680:	a9 e5       	ldi	r26, 0x59	; 89
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e9 e5       	ldi	r30, 0x59	; 89
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	8f 7d       	andi	r24, 0xDF	; 223
    268c:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    268e:	a8 e5       	ldi	r26, 0x58	; 88
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e8 e5       	ldi	r30, 0x58	; 88
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	84 60       	ori	r24, 0x04	; 4
    269a:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    269c:	a8 e5       	ldi	r26, 0x58	; 88
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e8 e5       	ldi	r30, 0x58	; 88
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	88 60       	ori	r24, 0x08	; 8
    26a8:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    26aa:	a8 e5       	ldi	r26, 0x58	; 88
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e8 e5       	ldi	r30, 0x58	; 88
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	80 61       	ori	r24, 0x10	; 16
    26b6:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    26b8:	a8 e5       	ldi	r26, 0x58	; 88
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e8 e5       	ldi	r30, 0x58	; 88
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 62       	ori	r24, 0x20	; 32
    26c4:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    26c6:	ea e4       	ldi	r30, 0x4A	; 74
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    26cc:	eb e4       	ldi	r30, 0x4B	; 75
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    26d2:	e8 e4       	ldi	r30, 0x48	; 72
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    26d8:	e9 e4       	ldi	r30, 0x49	; 73
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    26de:	ec e4       	ldi	r30, 0x4C	; 76
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    26e4:	ed e4       	ldi	r30, 0x4D	; 77
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    26ea:	e6 e4       	ldi	r30, 0x46	; 70
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    26f0:	e7 e4       	ldi	r30, 0x47	; 71
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	10 82       	st	Z, r1
  
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <TIM1_voidEnable>:
void TIM1_voidEnable(u8 u8PrescalValCpy)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    2708:	ae e4       	ldi	r26, 0x4E	; 78
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ee e4       	ldi	r30, 0x4E	; 78
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 7f       	andi	r24, 0xF8	; 248
    2714:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    2716:	ae e4       	ldi	r26, 0x4E	; 78
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ee e4       	ldi	r30, 0x4E	; 78
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	98 2f       	mov	r25, r24
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	87 70       	andi	r24, 0x07	; 7
    2726:	89 2b       	or	r24, r25
    2728:	8c 93       	st	X, r24
	
}
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    273a:	ae e4       	ldi	r26, 0x4E	; 78
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	ee e4       	ldi	r30, 0x4E	; 78
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	88 7f       	andi	r24, 0xF8	; 248
    2746:	8c 93       	st	X, r24
	
}
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    2756:	a9 e5       	ldi	r26, 0x59	; 89
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e9 e5       	ldi	r30, 0x59	; 89
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	84 60       	ori	r24, 0x04	; 4
    2762:	8c 93       	st	X, r24
	
}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    2772:	a9 e5       	ldi	r26, 0x59	; 89
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e9 e5       	ldi	r30, 0x59	; 89
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	8b 7f       	andi	r24, 0xFB	; 251
    277e:	8c 93       	st	X, r24
	
}
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    278e:	a9 e5       	ldi	r26, 0x59	; 89
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e9 e5       	ldi	r30, 0x59	; 89
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	80 61       	ori	r24, 0x10	; 16
    279a:	8c 93       	st	X, r24
	
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    27aa:	a9 e5       	ldi	r26, 0x59	; 89
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e9 e5       	ldi	r30, 0x59	; 89
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8f 7e       	andi	r24, 0xEF	; 239
    27b6:	8c 93       	st	X, r24
	
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    27c6:	a9 e5       	ldi	r26, 0x59	; 89
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e9 e5       	ldi	r30, 0x59	; 89
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	88 60       	ori	r24, 0x08	; 8
    27d2:	8c 93       	st	X, r24
	
}
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    27e2:	a9 e5       	ldi	r26, 0x59	; 89
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e9 e5       	ldi	r30, 0x59	; 89
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	87 7f       	andi	r24, 0xF7	; 247
    27ee:	8c 93       	st	X, r24
	
}
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    27fe:	a9 e5       	ldi	r26, 0x59	; 89
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e9 e5       	ldi	r30, 0x59	; 89
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	80 62       	ori	r24, 0x20	; 32
    280a:	8c 93       	st	X, r24
}
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    281a:	a9 e5       	ldi	r26, 0x59	; 89
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e9 e5       	ldi	r30, 0x59	; 89
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	8f 7d       	andi	r24, 0xDF	; 223
    2826:	8c 93       	st	X, r24
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <TIM1_voidSetCallbackOvfInt+0x6>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	90 93 65 01 	sts	0x0165, r25
    2844:	80 93 64 01 	sts	0x0164, r24
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <TIM1_voidSetCallbackCompAInt+0x6>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	90 93 67 01 	sts	0x0167, r25
    2868:	80 93 66 01 	sts	0x0166, r24
}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	00 d0       	rcall	.+0      	; 0x287c <TIM1_voidSetCallbackCompBInt+0x6>
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	90 93 61 01 	sts	0x0161, r25
    288c:	80 93 60 01 	sts	0x0160, r24
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <TIM1_voidSetCallbackIcuInt+0x6>
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	9a 81       	ldd	r25, Y+2	; 0x02
    28ac:	90 93 63 01 	sts	0x0163, r25
    28b0:	80 93 62 01 	sts	0x0162, r24
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(u16 u16TimValCpy) //TCNT
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <TIM1_voidSetTimerValue+0x6>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(u8) u16TimValCpy;
    28cc:	ec e4       	ldi	r30, 0x4C	; 76
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	80 83       	st	Z, r24
	TCNT1H =(u8) (u16TimValCpy>>8);
    28d4:	ed e4       	ldi	r30, 0x4D	; 77
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	89 2f       	mov	r24, r25
    28de:	99 27       	eor	r25, r25
    28e0:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(u16 u16CmpAValCpy)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <TIM1_voidSetCmpARegValue+0x6>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (u8)u16CmpAValCpy;
    28fa:	ea e4       	ldi	r30, 0x4A	; 74
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	80 83       	st	Z, r24
	OCR1AH= (u8)(u16CmpAValCpy>>8);
    2902:	eb e4       	ldi	r30, 0x4B	; 75
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	9a 81       	ldd	r25, Y+2	; 0x02
    290a:	89 2f       	mov	r24, r25
    290c:	99 27       	eor	r25, r25
    290e:	80 83       	st	Z, r24
	
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(u16 u16CmpBValCpy)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	00 d0       	rcall	.+0      	; 0x2920 <TIM1_voidSetCmpBRegValue+0x6>
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (u8)u16CmpBValCpy;
    2928:	e8 e4       	ldi	r30, 0x48	; 72
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	80 83       	st	Z, r24
	OCR1BH= (u8)(u16CmpBValCpy>>8);
    2930:	e9 e4       	ldi	r30, 0x49	; 73
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	9a 81       	ldd	r25, Y+2	; 0x02
    2938:	89 2f       	mov	r24, r25
    293a:	99 27       	eor	r25, r25
    293c:	80 83       	st	Z, r24
	
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(u16 u16IcuValCpy)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <TIM1_voidSetIcuRegValue+0x6>
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	9a 83       	std	Y+2, r25	; 0x02
    2954:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    2956:	e6 e4       	ldi	r30, 0x46	; 70
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24

}
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <TIM1_u8ReadTimerValue>:
u16 TIM1_u8ReadTimerValue(void)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <TIM1_u8ReadTimerValue+0x6>
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
	u16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    2976:	ed e4       	ldi	r30, 0x4D	; 77
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9a 83       	std	Y+2, r25	; 0x02
    2982:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	98 2f       	mov	r25, r24
    298a:	88 27       	eor	r24, r24
    298c:	9a 83       	std	Y+2, r25	; 0x02
    298e:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    2990:	ec e4       	ldi	r30, 0x4C	; 76
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	9a 81       	ldd	r25, Y+2	; 0x02
    299e:	82 2b       	or	r24, r18
    29a0:	93 2b       	or	r25, r19
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    29b4:	1f 92       	push	r1
    29b6:	0f 92       	push	r0
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	0f 92       	push	r0
    29bc:	11 24       	eor	r1, r1
    29be:	2f 93       	push	r18
    29c0:	3f 93       	push	r19
    29c2:	4f 93       	push	r20
    29c4:	5f 93       	push	r21
    29c6:	6f 93       	push	r22
    29c8:	7f 93       	push	r23
    29ca:	8f 93       	push	r24
    29cc:	9f 93       	push	r25
    29ce:	af 93       	push	r26
    29d0:	bf 93       	push	r27
    29d2:	ef 93       	push	r30
    29d4:	ff 93       	push	r31
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    29de:	e0 91 64 01 	lds	r30, 0x0164
    29e2:	f0 91 65 01 	lds	r31, 0x0165
    29e6:	09 95       	icall
	
}
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	ff 91       	pop	r31
    29ee:	ef 91       	pop	r30
    29f0:	bf 91       	pop	r27
    29f2:	af 91       	pop	r26
    29f4:	9f 91       	pop	r25
    29f6:	8f 91       	pop	r24
    29f8:	7f 91       	pop	r23
    29fa:	6f 91       	pop	r22
    29fc:	5f 91       	pop	r21
    29fe:	4f 91       	pop	r20
    2a00:	3f 91       	pop	r19
    2a02:	2f 91       	pop	r18
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	0f 90       	pop	r0
    2a0a:	1f 90       	pop	r1
    2a0c:	18 95       	reti

00002a0e <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    2a0e:	1f 92       	push	r1
    2a10:	0f 92       	push	r0
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	0f 92       	push	r0
    2a16:	11 24       	eor	r1, r1
    2a18:	2f 93       	push	r18
    2a1a:	3f 93       	push	r19
    2a1c:	4f 93       	push	r20
    2a1e:	5f 93       	push	r21
    2a20:	6f 93       	push	r22
    2a22:	7f 93       	push	r23
    2a24:	8f 93       	push	r24
    2a26:	9f 93       	push	r25
    2a28:	af 93       	push	r26
    2a2a:	bf 93       	push	r27
    2a2c:	ef 93       	push	r30
    2a2e:	ff 93       	push	r31
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    2a38:	e0 91 66 01 	lds	r30, 0x0166
    2a3c:	f0 91 67 01 	lds	r31, 0x0167
    2a40:	09 95       	icall
}
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	0f 90       	pop	r0
    2a64:	1f 90       	pop	r1
    2a66:	18 95       	reti

00002a68 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    2a68:	1f 92       	push	r1
    2a6a:	0f 92       	push	r0
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	0f 92       	push	r0
    2a70:	11 24       	eor	r1, r1
    2a72:	2f 93       	push	r18
    2a74:	3f 93       	push	r19
    2a76:	4f 93       	push	r20
    2a78:	5f 93       	push	r21
    2a7a:	6f 93       	push	r22
    2a7c:	7f 93       	push	r23
    2a7e:	8f 93       	push	r24
    2a80:	9f 93       	push	r25
    2a82:	af 93       	push	r26
    2a84:	bf 93       	push	r27
    2a86:	ef 93       	push	r30
    2a88:	ff 93       	push	r31
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    2a92:	e0 91 60 01 	lds	r30, 0x0160
    2a96:	f0 91 61 01 	lds	r31, 0x0161
    2a9a:	09 95       	icall
}
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	ff 91       	pop	r31
    2aa2:	ef 91       	pop	r30
    2aa4:	bf 91       	pop	r27
    2aa6:	af 91       	pop	r26
    2aa8:	9f 91       	pop	r25
    2aaa:	8f 91       	pop	r24
    2aac:	7f 91       	pop	r23
    2aae:	6f 91       	pop	r22
    2ab0:	5f 91       	pop	r21
    2ab2:	4f 91       	pop	r20
    2ab4:	3f 91       	pop	r19
    2ab6:	2f 91       	pop	r18
    2ab8:	0f 90       	pop	r0
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	0f 90       	pop	r0
    2abe:	1f 90       	pop	r1
    2ac0:	18 95       	reti

00002ac2 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    2ac2:	1f 92       	push	r1
    2ac4:	0f 92       	push	r0
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	0f 92       	push	r0
    2aca:	11 24       	eor	r1, r1
    2acc:	2f 93       	push	r18
    2ace:	3f 93       	push	r19
    2ad0:	4f 93       	push	r20
    2ad2:	5f 93       	push	r21
    2ad4:	6f 93       	push	r22
    2ad6:	7f 93       	push	r23
    2ad8:	8f 93       	push	r24
    2ada:	9f 93       	push	r25
    2adc:	af 93       	push	r26
    2ade:	bf 93       	push	r27
    2ae0:	ef 93       	push	r30
    2ae2:	ff 93       	push	r31
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    2aec:	e0 91 62 01 	lds	r30, 0x0162
    2af0:	f0 91 63 01 	lds	r31, 0x0163
    2af4:	09 95       	icall
}
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	ff 91       	pop	r31
    2afc:	ef 91       	pop	r30
    2afe:	bf 91       	pop	r27
    2b00:	af 91       	pop	r26
    2b02:	9f 91       	pop	r25
    2b04:	8f 91       	pop	r24
    2b06:	7f 91       	pop	r23
    2b08:	6f 91       	pop	r22
    2b0a:	5f 91       	pop	r21
    2b0c:	4f 91       	pop	r20
    2b0e:	3f 91       	pop	r19
    2b10:	2f 91       	pop	r18
    2b12:	0f 90       	pop	r0
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	0f 90       	pop	r0
    2b18:	1f 90       	pop	r1
    2b1a:	18 95       	reti

00002b1c <TIM1_u16GetIcuValue>:

/*ICU*/


u16 TIM1_u16GetIcuValue(void)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2b24:	e6 e4       	ldi	r30, 0x46	; 70
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    2b3a:	ae e4       	ldi	r26, 0x4E	; 78
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	ee e4       	ldi	r30, 0x4E	; 78
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	80 64       	ori	r24, 0x40	; 64
    2b46:	8c 93       	st	X, r24
 }
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    2b56:	ae e4       	ldi	r26, 0x4E	; 78
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	ee e4       	ldi	r30, 0x4E	; 78
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	8f 7b       	andi	r24, 0xBF	; 191
    2b62:	8c 93       	st	X, r24
 }
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <UART_voidInit>:
volatile u8 Global_Var=0;
void (*Tx_pf)(void)=NULL;
void (*Rx_pf)(void)=NULL;
u8 Data=0;
void UART_voidInit(void)
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	0f 92       	push	r0
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Temp=0;
    2b74:	19 82       	std	Y+1, r1	; 0x01
/******   Enable Rx Interrupt (RXCIE)   *******/
SET_BIT(UCSRB,UCSRB_RXCIE);
    2b76:	aa e2       	ldi	r26, 0x2A	; 42
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	ea e2       	ldi	r30, 0x2A	; 42
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 68       	ori	r24, 0x80	; 128
    2b82:	8c 93       	st	X, r24
/******   Enable UDRIE          *******/
SET_BIT(UCSRB,UCSRB_UDRIE);
    2b84:	aa e2       	ldi	r26, 0x2A	; 42
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	ea e2       	ldi	r30, 0x2A	; 42
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	80 62       	ori	r24, 0x20	; 32
    2b90:	8c 93       	st	X, r24

/******   Select 8-BIT Data *********/
CLR_BIT(UCSRB,UCSRB_UCSZ2);
    2b92:	aa e2       	ldi	r26, 0x2A	; 42
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ea e2       	ldi	r30, 0x2A	; 42
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8b 7f       	andi	r24, 0xFB	; 251
    2b9e:	8c 93       	st	X, r24
/*select UCSRC Register*/
SET_BIT(Local_Temp,UCSRC_URSEL);
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	80 68       	ori	r24, 0x80	; 128
    2ba4:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ0);
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	82 60       	ori	r24, 0x02	; 2
    2baa:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ1);
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	84 60       	ori	r24, 0x04	; 4
    2bb0:	89 83       	std	Y+1, r24	; 0x01
/******  Select UART Mode *********/
CLR_BIT(Local_Temp,UCSRC_UMSEL);//select  Asynchronous Mode
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	8f 7b       	andi	r24, 0xBF	; 191
    2bb6:	89 83       	std	Y+1, r24	; 0x01
/******   Select Parity Mode *********/
CLR_BIT(Local_Temp,UCSRC_UPM0);//disable Parity
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	8f 7e       	andi	r24, 0xEF	; 239
    2bbc:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(Local_Temp,UCSRC_UPM1);
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8f 7d       	andi	r24, 0xDF	; 223
    2bc2:	89 83       	std	Y+1, r24	; 0x01
/******   Select Stop bit *********/
CLR_BIT(Local_Temp,UCSRC_USBS);
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	87 7f       	andi	r24, 0xF7	; 247
    2bc8:	89 83       	std	Y+1, r24	; 0x01

UCSRC=Local_Temp;
    2bca:	e0 e4       	ldi	r30, 0x40	; 64
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	80 83       	st	Z, r24

/******   Select BuadRate *********/
UBRRL=BUAD_RATE;
    2bd2:	e9 e2       	ldi	r30, 0x29	; 41
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	83 e3       	ldi	r24, 0x33	; 51
    2bd8:	80 83       	st	Z, r24
/******   Enable Rx *********/
SET_BIT(UCSRB,UCSRB_RXEN);
    2bda:	aa e2       	ldi	r26, 0x2A	; 42
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	ea e2       	ldi	r30, 0x2A	; 42
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	80 61       	ori	r24, 0x10	; 16
    2be6:	8c 93       	st	X, r24
/******   Enable Tx *********/
SET_BIT(UCSRB,UCSRB_TXEN);
    2be8:	aa e2       	ldi	r26, 0x2A	; 42
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	ea e2       	ldi	r30, 0x2A	; 42
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	88 60       	ori	r24, 0x08	; 8
    2bf4:	8c 93       	st	X, r24
}
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <UART_voidSendData_Asynch>:
void UART_voidSendData_Asynch(u8 Copy_u8Data)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	0f 92       	push	r0
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	89 83       	std	Y+1, r24	; 0x01
//Global_Var =Copy_u8Data;
UDR =Copy_u8Data;
    2c0a:	ec e2       	ldi	r30, 0x2C	; 44
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	80 83       	st	Z, r24
}
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <UART_u8ReceiveData>:
u8  UART_u8ReceiveData(void)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
//GET_BIT(UCSRA,UCSRA_RXC);
return UDR;
    2c22:	ec e2       	ldi	r30, 0x2C	; 44
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
}
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <__vector_13>:


// USART, RXC
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	2f 93       	push	r18
    2c3a:	3f 93       	push	r19
    2c3c:	4f 93       	push	r20
    2c3e:	5f 93       	push	r21
    2c40:	6f 93       	push	r22
    2c42:	7f 93       	push	r23
    2c44:	8f 93       	push	r24
    2c46:	9f 93       	push	r25
    2c48:	af 93       	push	r26
    2c4a:	bf 93       	push	r27
    2c4c:	ef 93       	push	r30
    2c4e:	ff 93       	push	r31
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
	Rx_pf();
    2c58:	e0 91 5b 01 	lds	r30, 0x015B
    2c5c:	f0 91 5c 01 	lds	r31, 0x015C
    2c60:	09 95       	icall
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	ff 91       	pop	r31
    2c68:	ef 91       	pop	r30
    2c6a:	bf 91       	pop	r27
    2c6c:	af 91       	pop	r26
    2c6e:	9f 91       	pop	r25
    2c70:	8f 91       	pop	r24
    2c72:	7f 91       	pop	r23
    2c74:	6f 91       	pop	r22
    2c76:	5f 91       	pop	r21
    2c78:	4f 91       	pop	r20
    2c7a:	3f 91       	pop	r19
    2c7c:	2f 91       	pop	r18
    2c7e:	0f 90       	pop	r0
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	0f 90       	pop	r0
    2c84:	1f 90       	pop	r1
    2c86:	18 95       	reti

00002c88 <__vector_14>:
// USART, UDRE
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
    2c88:	1f 92       	push	r1
    2c8a:	0f 92       	push	r0
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	0f 92       	push	r0
    2c90:	11 24       	eor	r1, r1
    2c92:	2f 93       	push	r18
    2c94:	3f 93       	push	r19
    2c96:	4f 93       	push	r20
    2c98:	5f 93       	push	r21
    2c9a:	6f 93       	push	r22
    2c9c:	7f 93       	push	r23
    2c9e:	8f 93       	push	r24
    2ca0:	9f 93       	push	r25
    2ca2:	af 93       	push	r26
    2ca4:	bf 93       	push	r27
    2ca6:	ef 93       	push	r30
    2ca8:	ff 93       	push	r31
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
	Tx_pf();
    2cb2:	e0 91 59 01 	lds	r30, 0x0159
    2cb6:	f0 91 5a 01 	lds	r31, 0x015A
    2cba:	09 95       	icall
	//UART_voidSendData_Asynch();
}
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	ff 91       	pop	r31
    2cc2:	ef 91       	pop	r30
    2cc4:	bf 91       	pop	r27
    2cc6:	af 91       	pop	r26
    2cc8:	9f 91       	pop	r25
    2cca:	8f 91       	pop	r24
    2ccc:	7f 91       	pop	r23
    2cce:	6f 91       	pop	r22
    2cd0:	5f 91       	pop	r21
    2cd2:	4f 91       	pop	r20
    2cd4:	3f 91       	pop	r19
    2cd6:	2f 91       	pop	r18
    2cd8:	0f 90       	pop	r0
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	0f 90       	pop	r0
    2cde:	1f 90       	pop	r1
    2ce0:	18 95       	reti

00002ce2 <__vector_15>:
//USART, TXC
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void){
    2ce2:	1f 92       	push	r1
    2ce4:	0f 92       	push	r0
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	0f 92       	push	r0
    2cea:	11 24       	eor	r1, r1
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62

}
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	0f 90       	pop	r0
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	0f 90       	pop	r0
    2cfe:	1f 90       	pop	r1
    2d00:	18 95       	reti

00002d02 <UARTTX_vidSetISR>:
void UARTTX_vidSetISR(void (*p)(void))
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <UARTTX_vidSetISR+0x6>
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01
	Tx_pf=p;
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	90 93 5a 01 	sts	0x015A, r25
    2d18:	80 93 59 01 	sts	0x0159, r24
	//Data=value;
	}
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <UARTRX_vidSetISR>:
void UARTRX_vidSetISR(void (*p)(void))
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <UARTRX_vidSetISR+0x6>
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	9a 83       	std	Y+2, r25	; 0x02
    2d32:	89 83       	std	Y+1, r24	; 0x01
	Rx_pf=p;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	90 93 5c 01 	sts	0x015C, r25
    2d3c:	80 93 5b 01 	sts	0x015B, r24
	//Data=value;
	}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <disable_tx>:

void disable_tx(void)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    2d52:	aa e2       	ldi	r26, 0x2A	; 42
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	ea e2       	ldi	r30, 0x2A	; 42
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8f 7d       	andi	r24, 0xDF	; 223
    2d5e:	8c 93       	st	X, r24

	}
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <enable_tx>:
void enable_tx(void)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
    2d6e:	aa e2       	ldi	r26, 0x2A	; 42
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	ea e2       	ldi	r30, 0x2A	; 42
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	80 62       	ori	r24, 0x20	; 32
    2d7a:	8c 93       	st	X, r24

}
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	08 95       	ret

00002d82 <main>:
#define EEPROM_PASSWORD_LOCATION2   0x32
#define EEPROM_PASSWORD_LOCATION3   0x33
#define EEPROM_PASSWORD_LOCATION4   0x34

void main (void)
{
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	ce 57       	subi	r28, 0x7E	; 126
    2d90:	d0 40       	sbci	r29, 0x00	; 0
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61

	DIO_vidsetPortDir(DIO_PORTC,0x0f);//Initialize Keypad PORT
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	6f e0       	ldi	r22, 0x0F	; 15
    2da0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_vidsetPortDir>
	DIO_vidsetPortval(DIO_PORTC,0xf0);
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	60 ef       	ldi	r22, 0xF0	; 240
    2da8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_vidsetPortval>

	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN0,DIO_INPUT);//ADC0_LM35
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);//ROOM1
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	63 e0       	ldi	r22, 0x03	; 3
    2dba:	41 e0       	ldi	r20, 0x01	; 1
    2dbc:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);//ROOM2
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	64 e0       	ldi	r22, 0x04	; 4
    2dc4:	41 e0       	ldi	r20, 0x01	; 1
    2dc6:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);//Buzzer
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	65 e0       	ldi	r22, 0x05	; 5
    2dce:	41 e0       	ldi	r20, 0x01	; 1
    2dd0:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN6,DIO_INPUT);//ADC6_FLAME_SENSOR
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	66 e0       	ldi	r22, 0x06	; 6
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);//TIM1
    2dde:	83 e0       	ldi	r24, 0x03	; 3
    2de0:	64 e0       	ldi	r22, 0x04	; 4
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);//TV
    2de8:	83 e0       	ldi	r24, 0x03	; 3
    2dea:	65 e0       	ldi	r22, 0x05	; 5
    2dec:	41 e0       	ldi	r20, 0x01	; 1
    2dee:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);//DC Motor
    2df2:	83 e0       	ldi	r24, 0x03	; 3
    2df4:	66 e0       	ldi	r22, 0x06	; 6
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);//LED
    2dfc:	83 e0       	ldi	r24, 0x03	; 3
    2dfe:	67 e0       	ldi	r22, 0x07	; 7
    2e00:	41 e0       	ldi	r20, 0x01	; 1
    2e02:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>


	HLCD_vidInit();
    2e06:	0e 94 a6 0c 	call	0x194c	; 0x194c <HLCD_vidInit>
	ADC_vidInit();
    2e0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_vidInit>

	//TIMER1
	TIM1_voidInit();
    2e0e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TIM1_voidInit>
	TIM1_voidSetIcuRegValue(20000);//->F =50 Hz for PWM
    2e12:	80 e2       	ldi	r24, 0x20	; 32
    2e14:	9e e4       	ldi	r25, 0x4E	; 78
    2e16:	0e 94 a4 14 	call	0x2948	; 0x2948 <TIM1_voidSetIcuRegValue>
	TIM1_voidEnable(2);
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <TIM1_voidEnable>

	//UART
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN1,DIO_INPUT)	;
    2e20:	83 e0       	ldi	r24, 0x03	; 3
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN0,DIO_OUTPUT)	;
    2e2a:	83 e0       	ldi	r24, 0x03	; 3
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	UART_voidInit();
    2e34:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <UART_voidInit>
	UARTTX_vidSetISR(send_char);
    2e38:	88 e0       	ldi	r24, 0x08	; 8
    2e3a:	9e e1       	ldi	r25, 0x1E	; 30
    2e3c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <UARTTX_vidSetISR>
	UARTRX_vidSetISR(receive_char);
    2e40:	85 e1       	ldi	r24, 0x15	; 21
    2e42:	9e e1       	ldi	r25, 0x1E	; 30
    2e44:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UARTRX_vidSetISR>
	Global_Interrupt_Enable();
    2e48:	0e 94 9d 0b 	call	0x173a	; 0x173a <Global_Interrupt_Enable>

	//SERVO
	TIM1_voidSetCmpBRegValue(2000);//90 degree ->875
    2e4c:	80 ed       	ldi	r24, 0xD0	; 208
    2e4e:	97 e0       	ldi	r25, 0x07	; 7
    2e50:	0e 94 8d 14 	call	0x291a	; 0x291a <TIM1_voidSetCmpBRegValue>

	//EEPROM + I2C
	TWI_vMasterInit();
    2e54:	0e 94 52 11 	call	0x22a4	; 0x22a4 <TWI_vMasterInit>


	DC_Intro();
    2e58:	0e 94 45 11 	call	0x228a	; 0x228a <DC_Intro>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e5 58       	subi	r30, 0x85	; 133
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e8       	ldi	r25, 0x80	; 128
    2e66:	ab eb       	ldi	r26, 0xBB	; 187
    2e68:	b4 e4       	ldi	r27, 0x44	; 68
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	a2 83       	std	Z+2, r26	; 0x02
    2e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	8e 01       	movw	r16, r28
    2e74:	09 58       	subi	r16, 0x89	; 137
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e5 58       	subi	r30, 0x85	; 133
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a ef       	ldi	r20, 0xFA	; 250
    2e8c:	54 e4       	ldi	r21, 0x44	; 68
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e9 58       	subi	r30, 0x89	; 137
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	60 81       	ld	r22, Z
    2ea8:	71 81       	ldd	r23, Z+1	; 0x01
    2eaa:	82 81       	ldd	r24, Z+2	; 0x02
    2eac:	93 81       	ldd	r25, Z+3	; 0x03
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	44 f4       	brge	.+16     	; 0x2ece <main+0x14c>
		__ticks = 1;
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	eb 58       	subi	r30, 0x8B	; 139
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	64 c0       	rjmp	.+200    	; 0x2f96 <main+0x214>
	else if (__tmp > 65535)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e9 58       	subi	r30, 0x89	; 137
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	0c f0       	brlt	.+2      	; 0x2eee <main+0x16c>
    2eec:	43 c0       	rjmp	.+134    	; 0x2f74 <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e5 58       	subi	r30, 0x85	; 133
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8e 01       	movw	r16, r28
    2f0e:	0b 58       	subi	r16, 0x8B	; 139
    2f10:	1f 4f       	sbci	r17, 0xFF	; 255
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	f8 01       	movw	r30, r16
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	1f c0       	rjmp	.+62     	; 0x2f64 <main+0x1e2>
    2f26:	fe 01       	movw	r30, r28
    2f28:	ed 58       	subi	r30, 0x8D	; 141
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	88 ec       	ldi	r24, 0xC8	; 200
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    2f34:	fe 01       	movw	r30, r28
    2f36:	ed 58       	subi	r30, 0x8D	; 141
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <main+0x1bc>
    2f42:	fe 01       	movw	r30, r28
    2f44:	ed 58       	subi	r30, 0x8D	; 141
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4c:	de 01       	movw	r26, r28
    2f4e:	ab 58       	subi	r26, 0x8B	; 139
    2f50:	bf 4f       	sbci	r27, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	eb 58       	subi	r30, 0x8B	; 139
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	9c 93       	st	X, r25
    2f62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f64:	fe 01       	movw	r30, r28
    2f66:	eb 58       	subi	r30, 0x8B	; 139
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	d1 f6       	brne	.-76     	; 0x2f26 <main+0x1a4>
    2f72:	27 c0       	rjmp	.+78     	; 0x2fc2 <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	8e 01       	movw	r16, r28
    2f76:	0b 58       	subi	r16, 0x8B	; 139
    2f78:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e9 58       	subi	r30, 0x89	; 137
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	f8 01       	movw	r30, r16
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
    2f96:	de 01       	movw	r26, r28
    2f98:	af 58       	subi	r26, 0x8F	; 143
    2f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	eb 58       	subi	r30, 0x8B	; 139
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	8d 93       	st	X+, r24
    2fa8:	9c 93       	st	X, r25
    2faa:	fe 01       	movw	r30, r28
    2fac:	ef 58       	subi	r30, 0x8F	; 143
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <main+0x232>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ef 58       	subi	r30, 0x8F	; 143
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
	_delay_ms(1500);
	HLCD_vidSendCMD(LCD_CLR);
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
	EEPROM_vWrite(EEPROM_STATUS_LOCATION,NOT_PRESSED);
    2fc8:	8e e5       	ldi	r24, 0x5E	; 94
    2fca:	6f ef       	ldi	r22, 0xFF	; 255
    2fcc:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_vWrite>
	EEPROM_vRead(EEPROM_STATUS_LOCATION,&Status);
    2fd0:	20 e7       	ldi	r18, 0x70	; 112
    2fd2:	31 e0       	ldi	r19, 0x01	; 1
    2fd4:	8e e5       	ldi	r24, 0x5E	; 94
    2fd6:	b9 01       	movw	r22, r18
    2fd8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <EEPROM_vRead>
	if(Status==NOT_PRESSED)
    2fdc:	80 91 70 01 	lds	r24, 0x0170
    2fe0:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <main+0x264>
    2fe4:	e9 c4       	rjmp	.+2514   	; 0x39b8 <main+0xc36>
	{
		HLCD_vidWriteStr("Set Passwd:");
    2fe6:	80 eb       	ldi	r24, 0xB0	; 176
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
		for(i=0;i<=3;i++)
    2fee:	10 92 79 01 	sts	0x0179, r1
    2ff2:	8a c1       	rjmp	.+788    	; 0x3308 <main+0x586>
		{
			do {
				Key = KPD_u8GetPressedKey();
    2ff4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    2ff8:	80 93 80 01 	sts	0x0180, r24
			}while(Key==NOT_PRESSED);
    2ffc:	80 91 80 01 	lds	r24, 0x0180
    3000:	8f 3f       	cpi	r24, 0xFF	; 255
    3002:	c1 f3       	breq	.-16     	; 0x2ff4 <main+0x272>
			HLCD_vidSendChar(Key);
    3004:	80 91 80 01 	lds	r24, 0x0180
    3008:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
    300c:	fe 01       	movw	r30, r28
    300e:	e3 59       	subi	r30, 0x93	; 147
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	aa ef       	ldi	r26, 0xFA	; 250
    3018:	b3 e4       	ldi	r27, 0x43	; 67
    301a:	80 83       	st	Z, r24
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	a2 83       	std	Z+2, r26	; 0x02
    3020:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3022:	8e 01       	movw	r16, r28
    3024:	07 59       	subi	r16, 0x97	; 151
    3026:	1f 4f       	sbci	r17, 0xFF	; 255
    3028:	fe 01       	movw	r30, r28
    302a:	e3 59       	subi	r30, 0x93	; 147
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	82 81       	ldd	r24, Z+2	; 0x02
    3034:	93 81       	ldd	r25, Z+3	; 0x03
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	4a ef       	ldi	r20, 0xFA	; 250
    303c:	54 e4       	ldi	r21, 0x44	; 68
    303e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	f8 01       	movw	r30, r16
    3048:	80 83       	st	Z, r24
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	a2 83       	std	Z+2, r26	; 0x02
    304e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3050:	fe 01       	movw	r30, r28
    3052:	e7 59       	subi	r30, 0x97	; 151
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	44 f4       	brge	.+16     	; 0x307e <main+0x2fc>
		__ticks = 1;
    306e:	fe 01       	movw	r30, r28
    3070:	e9 59       	subi	r30, 0x99	; 153
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	64 c0       	rjmp	.+200    	; 0x3146 <main+0x3c4>
	else if (__tmp > 65535)
    307e:	fe 01       	movw	r30, r28
    3080:	e7 59       	subi	r30, 0x97	; 151
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	3f ef       	ldi	r19, 0xFF	; 255
    3090:	4f e7       	ldi	r20, 0x7F	; 127
    3092:	57 e4       	ldi	r21, 0x47	; 71
    3094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3098:	18 16       	cp	r1, r24
    309a:	0c f0       	brlt	.+2      	; 0x309e <main+0x31c>
    309c:	43 c0       	rjmp	.+134    	; 0x3124 <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	fe 01       	movw	r30, r28
    30a0:	e3 59       	subi	r30, 0x93	; 147
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	60 81       	ld	r22, Z
    30a6:	71 81       	ldd	r23, Z+1	; 0x01
    30a8:	82 81       	ldd	r24, Z+2	; 0x02
    30aa:	93 81       	ldd	r25, Z+3	; 0x03
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e2       	ldi	r20, 0x20	; 32
    30b2:	51 e4       	ldi	r21, 0x41	; 65
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8e 01       	movw	r16, r28
    30be:	09 59       	subi	r16, 0x99	; 153
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	f8 01       	movw	r30, r16
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	80 83       	st	Z, r24
    30d4:	1f c0       	rjmp	.+62     	; 0x3114 <main+0x392>
    30d6:	fe 01       	movw	r30, r28
    30d8:	eb 59       	subi	r30, 0x9B	; 155
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	88 ec       	ldi	r24, 0xC8	; 200
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	fe 01       	movw	r30, r28
    30e6:	eb 59       	subi	r30, 0x9B	; 155
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <main+0x36c>
    30f2:	fe 01       	movw	r30, r28
    30f4:	eb 59       	subi	r30, 0x9B	; 155
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fc:	de 01       	movw	r26, r28
    30fe:	a9 59       	subi	r26, 0x99	; 153
    3100:	bf 4f       	sbci	r27, 0xFF	; 255
    3102:	fe 01       	movw	r30, r28
    3104:	e9 59       	subi	r30, 0x99	; 153
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	11 96       	adiw	r26, 0x01	; 1
    3110:	9c 93       	st	X, r25
    3112:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3114:	fe 01       	movw	r30, r28
    3116:	e9 59       	subi	r30, 0x99	; 153
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	d1 f6       	brne	.-76     	; 0x30d6 <main+0x354>
    3122:	27 c0       	rjmp	.+78     	; 0x3172 <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	8e 01       	movw	r16, r28
    3126:	09 59       	subi	r16, 0x99	; 153
    3128:	1f 4f       	sbci	r17, 0xFF	; 255
    312a:	fe 01       	movw	r30, r28
    312c:	e7 59       	subi	r30, 0x97	; 151
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	f8 01       	movw	r30, r16
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
    3146:	de 01       	movw	r26, r28
    3148:	ad 59       	subi	r26, 0x9D	; 157
    314a:	bf 4f       	sbci	r27, 0xFF	; 255
    314c:	fe 01       	movw	r30, r28
    314e:	e9 59       	subi	r30, 0x99	; 153
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	8d 93       	st	X+, r24
    3158:	9c 93       	st	X, r25
    315a:	fe 01       	movw	r30, r28
    315c:	ed 59       	subi	r30, 0x9D	; 157
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <main+0x3e2>
    3168:	fe 01       	movw	r30, r28
    316a:	ed 59       	subi	r30, 0x9D	; 157
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
			_delay_ms(500);
			HLCD_vidGoToXY(0,11+i);
    3172:	80 91 79 01 	lds	r24, 0x0179
    3176:	98 2f       	mov	r25, r24
    3178:	95 5f       	subi	r25, 0xF5	; 245
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	69 2f       	mov	r22, r25
    317e:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
			HLCD_vidSendChar('*');
    3182:	8a e2       	ldi	r24, 0x2A	; 42
    3184:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
    3188:	fe 01       	movw	r30, r28
    318a:	e1 5a       	subi	r30, 0xA1	; 161
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	aa ef       	ldi	r26, 0xFA	; 250
    3194:	b3 e4       	ldi	r27, 0x43	; 67
    3196:	80 83       	st	Z, r24
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	a2 83       	std	Z+2, r26	; 0x02
    319c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319e:	8e 01       	movw	r16, r28
    31a0:	05 5a       	subi	r16, 0xA5	; 165
    31a2:	1f 4f       	sbci	r17, 0xFF	; 255
    31a4:	fe 01       	movw	r30, r28
    31a6:	e1 5a       	subi	r30, 0xA1	; 161
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	4a ef       	ldi	r20, 0xFA	; 250
    31b8:	54 e4       	ldi	r21, 0x44	; 68
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	f8 01       	movw	r30, r16
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31cc:	fe 01       	movw	r30, r28
    31ce:	e5 5a       	subi	r30, 0xA5	; 165
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e8       	ldi	r20, 0x80	; 128
    31e0:	5f e3       	ldi	r21, 0x3F	; 63
    31e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31e6:	88 23       	and	r24, r24
    31e8:	44 f4       	brge	.+16     	; 0x31fa <main+0x478>
		__ticks = 1;
    31ea:	fe 01       	movw	r30, r28
    31ec:	e7 5a       	subi	r30, 0xA7	; 167
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
    31f8:	64 c0       	rjmp	.+200    	; 0x32c2 <main+0x540>
	else if (__tmp > 65535)
    31fa:	fe 01       	movw	r30, r28
    31fc:	e5 5a       	subi	r30, 0xA5	; 165
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	4f e7       	ldi	r20, 0x7F	; 127
    320e:	57 e4       	ldi	r21, 0x47	; 71
    3210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3214:	18 16       	cp	r1, r24
    3216:	0c f0       	brlt	.+2      	; 0x321a <main+0x498>
    3218:	43 c0       	rjmp	.+134    	; 0x32a0 <main+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	fe 01       	movw	r30, r28
    321c:	e1 5a       	subi	r30, 0xA1	; 161
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	8e 01       	movw	r16, r28
    323a:	07 5a       	subi	r16, 0xA7	; 167
    323c:	1f 4f       	sbci	r17, 0xFF	; 255
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	1f c0       	rjmp	.+62     	; 0x3290 <main+0x50e>
    3252:	fe 01       	movw	r30, r28
    3254:	e9 5a       	subi	r30, 0xA9	; 169
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	88 ec       	ldi	r24, 0xC8	; 200
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	fe 01       	movw	r30, r28
    3262:	e9 5a       	subi	r30, 0xA9	; 169
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <main+0x4e8>
    326e:	fe 01       	movw	r30, r28
    3270:	e9 5a       	subi	r30, 0xA9	; 169
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3278:	de 01       	movw	r26, r28
    327a:	a7 5a       	subi	r26, 0xA7	; 167
    327c:	bf 4f       	sbci	r27, 0xFF	; 255
    327e:	fe 01       	movw	r30, r28
    3280:	e7 5a       	subi	r30, 0xA7	; 167
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	80 81       	ld	r24, Z
    3286:	91 81       	ldd	r25, Z+1	; 0x01
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	11 96       	adiw	r26, 0x01	; 1
    328c:	9c 93       	st	X, r25
    328e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3290:	fe 01       	movw	r30, r28
    3292:	e7 5a       	subi	r30, 0xA7	; 167
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	80 81       	ld	r24, Z
    3298:	91 81       	ldd	r25, Z+1	; 0x01
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	d1 f6       	brne	.-76     	; 0x3252 <main+0x4d0>
    329e:	27 c0       	rjmp	.+78     	; 0x32ee <main+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a0:	8e 01       	movw	r16, r28
    32a2:	07 5a       	subi	r16, 0xA7	; 167
    32a4:	1f 4f       	sbci	r17, 0xFF	; 255
    32a6:	fe 01       	movw	r30, r28
    32a8:	e5 5a       	subi	r30, 0xA5	; 165
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	60 81       	ld	r22, Z
    32ae:	71 81       	ldd	r23, Z+1	; 0x01
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	93 81       	ldd	r25, Z+3	; 0x03
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	f8 01       	movw	r30, r16
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	80 83       	st	Z, r24
    32c2:	de 01       	movw	r26, r28
    32c4:	ab 5a       	subi	r26, 0xAB	; 171
    32c6:	bf 4f       	sbci	r27, 0xFF	; 255
    32c8:	fe 01       	movw	r30, r28
    32ca:	e7 5a       	subi	r30, 0xA7	; 167
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	8d 93       	st	X+, r24
    32d4:	9c 93       	st	X, r25
    32d6:	fe 01       	movw	r30, r28
    32d8:	eb 5a       	subi	r30, 0xAB	; 171
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 81       	ld	r24, Z
    32de:	91 81       	ldd	r25, Z+1	; 0x01
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <main+0x55e>
    32e4:	fe 01       	movw	r30, r28
    32e6:	eb 5a       	subi	r30, 0xAB	; 171
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	91 83       	std	Z+1, r25	; 0x01
    32ec:	80 83       	st	Z, r24
			_delay_ms(500);
			EEPROM_vWrite(EEPROM_PASSWORD_LOCATION1+i,Key);
    32ee:	80 91 79 01 	lds	r24, 0x0179
    32f2:	8f 5c       	subi	r24, 0xCF	; 207
    32f4:	90 91 80 01 	lds	r25, 0x0180
    32f8:	69 2f       	mov	r22, r25
    32fa:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_vWrite>
	EEPROM_vWrite(EEPROM_STATUS_LOCATION,NOT_PRESSED);
	EEPROM_vRead(EEPROM_STATUS_LOCATION,&Status);
	if(Status==NOT_PRESSED)
	{
		HLCD_vidWriteStr("Set Passwd:");
		for(i=0;i<=3;i++)
    32fe:	80 91 79 01 	lds	r24, 0x0179
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	80 93 79 01 	sts	0x0179, r24
    3308:	80 91 79 01 	lds	r24, 0x0179
    330c:	84 30       	cpi	r24, 0x04	; 4
    330e:	08 f4       	brcc	.+2      	; 0x3312 <main+0x590>
    3310:	71 ce       	rjmp	.-798    	; 0x2ff4 <main+0x272>
			HLCD_vidGoToXY(0,11+i);
			HLCD_vidSendChar('*');
			_delay_ms(500);
			EEPROM_vWrite(EEPROM_PASSWORD_LOCATION1+i,Key);
		}
		EEPROM_vWrite(EEPROM_STATUS_LOCATION,0x00);
    3312:	8e e5       	ldi	r24, 0x5E	; 94
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_vWrite>
    331a:	4e c3       	rjmp	.+1692   	; 0x39b8 <main+0xc36>

	}

	while(flag==0)
	{
		HLCD_vidSendCMD(LCD_CLR);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
		HLCD_vidWriteStr(" Check Pass:");
    3322:	8c eb       	ldi	r24, 0xBC	; 188
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>


		for(i=0;i<=3;i++)
    332a:	10 92 79 01 	sts	0x0179, r1
    332e:	5e c1       	rjmp	.+700    	; 0x35ec <main+0x86a>
		{
			do {
				Key = KPD_u8GetPressedKey();
    3330:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    3334:	80 93 80 01 	sts	0x0180, r24
			}while(Key==NOT_PRESSED);
    3338:	80 91 80 01 	lds	r24, 0x0180
    333c:	8f 3f       	cpi	r24, 0xFF	; 255
    333e:	c1 f3       	breq	.-16     	; 0x3330 <main+0x5ae>
			HLCD_vidSendChar(Key);
    3340:	80 91 80 01 	lds	r24, 0x0180
    3344:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
    3348:	fe 01       	movw	r30, r28
    334a:	ef 5a       	subi	r30, 0xAF	; 175
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	aa ef       	ldi	r26, 0xFA	; 250
    3354:	b3 e4       	ldi	r27, 0x43	; 67
    3356:	80 83       	st	Z, r24
    3358:	91 83       	std	Z+1, r25	; 0x01
    335a:	a2 83       	std	Z+2, r26	; 0x02
    335c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335e:	8e 01       	movw	r16, r28
    3360:	03 5b       	subi	r16, 0xB3	; 179
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
    3364:	fe 01       	movw	r30, r28
    3366:	ef 5a       	subi	r30, 0xAF	; 175
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	60 81       	ld	r22, Z
    336c:	71 81       	ldd	r23, Z+1	; 0x01
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	93 81       	ldd	r25, Z+3	; 0x03
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	4a ef       	ldi	r20, 0xFA	; 250
    3378:	54 e4       	ldi	r21, 0x44	; 68
    337a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	f8 01       	movw	r30, r16
    3384:	80 83       	st	Z, r24
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	a2 83       	std	Z+2, r26	; 0x02
    338a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    338c:	fe 01       	movw	r30, r28
    338e:	e3 5b       	subi	r30, 0xB3	; 179
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	60 81       	ld	r22, Z
    3394:	71 81       	ldd	r23, Z+1	; 0x01
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e8       	ldi	r20, 0x80	; 128
    33a0:	5f e3       	ldi	r21, 0x3F	; 63
    33a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33a6:	88 23       	and	r24, r24
    33a8:	44 f4       	brge	.+16     	; 0x33ba <main+0x638>
		__ticks = 1;
    33aa:	fe 01       	movw	r30, r28
    33ac:	e5 5b       	subi	r30, 0xB5	; 181
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	80 83       	st	Z, r24
    33b8:	64 c0       	rjmp	.+200    	; 0x3482 <main+0x700>
	else if (__tmp > 65535)
    33ba:	fe 01       	movw	r30, r28
    33bc:	e3 5b       	subi	r30, 0xB3	; 179
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	60 81       	ld	r22, Z
    33c2:	71 81       	ldd	r23, Z+1	; 0x01
    33c4:	82 81       	ldd	r24, Z+2	; 0x02
    33c6:	93 81       	ldd	r25, Z+3	; 0x03
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	3f ef       	ldi	r19, 0xFF	; 255
    33cc:	4f e7       	ldi	r20, 0x7F	; 127
    33ce:	57 e4       	ldi	r21, 0x47	; 71
    33d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d4:	18 16       	cp	r1, r24
    33d6:	0c f0       	brlt	.+2      	; 0x33da <main+0x658>
    33d8:	43 c0       	rjmp	.+134    	; 0x3460 <main+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33da:	fe 01       	movw	r30, r28
    33dc:	ef 5a       	subi	r30, 0xAF	; 175
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e2       	ldi	r20, 0x20	; 32
    33ee:	51 e4       	ldi	r21, 0x41	; 65
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	8e 01       	movw	r16, r28
    33fa:	05 5b       	subi	r16, 0xB5	; 181
    33fc:	1f 4f       	sbci	r17, 0xFF	; 255
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	f8 01       	movw	r30, r16
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	80 83       	st	Z, r24
    3410:	1f c0       	rjmp	.+62     	; 0x3450 <main+0x6ce>
    3412:	fe 01       	movw	r30, r28
    3414:	e7 5b       	subi	r30, 0xB7	; 183
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	88 ec       	ldi	r24, 0xC8	; 200
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
    3420:	fe 01       	movw	r30, r28
    3422:	e7 5b       	subi	r30, 0xB7	; 183
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	80 81       	ld	r24, Z
    3428:	91 81       	ldd	r25, Z+1	; 0x01
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <main+0x6a8>
    342e:	fe 01       	movw	r30, r28
    3430:	e7 5b       	subi	r30, 0xB7	; 183
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3438:	de 01       	movw	r26, r28
    343a:	a5 5b       	subi	r26, 0xB5	; 181
    343c:	bf 4f       	sbci	r27, 0xFF	; 255
    343e:	fe 01       	movw	r30, r28
    3440:	e5 5b       	subi	r30, 0xB5	; 181
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	11 96       	adiw	r26, 0x01	; 1
    344c:	9c 93       	st	X, r25
    344e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3450:	fe 01       	movw	r30, r28
    3452:	e5 5b       	subi	r30, 0xB5	; 181
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 81       	ld	r24, Z
    3458:	91 81       	ldd	r25, Z+1	; 0x01
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	d1 f6       	brne	.-76     	; 0x3412 <main+0x690>
    345e:	27 c0       	rjmp	.+78     	; 0x34ae <main+0x72c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	8e 01       	movw	r16, r28
    3462:	05 5b       	subi	r16, 0xB5	; 181
    3464:	1f 4f       	sbci	r17, 0xFF	; 255
    3466:	fe 01       	movw	r30, r28
    3468:	e3 5b       	subi	r30, 0xB3	; 179
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	f8 01       	movw	r30, r16
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
    3482:	de 01       	movw	r26, r28
    3484:	a9 5b       	subi	r26, 0xB9	; 185
    3486:	bf 4f       	sbci	r27, 0xFF	; 255
    3488:	fe 01       	movw	r30, r28
    348a:	e5 5b       	subi	r30, 0xB5	; 181
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	80 81       	ld	r24, Z
    3490:	91 81       	ldd	r25, Z+1	; 0x01
    3492:	8d 93       	st	X+, r24
    3494:	9c 93       	st	X, r25
    3496:	fe 01       	movw	r30, r28
    3498:	e9 5b       	subi	r30, 0xB9	; 185
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <main+0x71e>
    34a4:	fe 01       	movw	r30, r28
    34a6:	e9 5b       	subi	r30, 0xB9	; 185
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	80 83       	st	Z, r24
			_delay_ms(500);
			HLCD_vidGoToXY(0,11+i);
    34ae:	80 91 79 01 	lds	r24, 0x0179
    34b2:	98 2f       	mov	r25, r24
    34b4:	95 5f       	subi	r25, 0xF5	; 245
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	69 2f       	mov	r22, r25
    34ba:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
			HLCD_vidSendChar('*');
    34be:	8a e2       	ldi	r24, 0x2A	; 42
    34c0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
    34c4:	fe 01       	movw	r30, r28
    34c6:	ed 5b       	subi	r30, 0xBD	; 189
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	aa ef       	ldi	r26, 0xFA	; 250
    34d0:	b3 e4       	ldi	r27, 0x43	; 67
    34d2:	80 83       	st	Z, r24
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	a2 83       	std	Z+2, r26	; 0x02
    34d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34da:	8e 01       	movw	r16, r28
    34dc:	01 5c       	subi	r16, 0xC1	; 193
    34de:	1f 4f       	sbci	r17, 0xFF	; 255
    34e0:	fe 01       	movw	r30, r28
    34e2:	ed 5b       	subi	r30, 0xBD	; 189
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	60 81       	ld	r22, Z
    34e8:	71 81       	ldd	r23, Z+1	; 0x01
    34ea:	82 81       	ldd	r24, Z+2	; 0x02
    34ec:	93 81       	ldd	r25, Z+3	; 0x03
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	4a ef       	ldi	r20, 0xFA	; 250
    34f4:	54 e4       	ldi	r21, 0x44	; 68
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	f8 01       	movw	r30, r16
    3500:	80 83       	st	Z, r24
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	a2 83       	std	Z+2, r26	; 0x02
    3506:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3508:	fe 01       	movw	r30, r28
    350a:	ff 96       	adiw	r30, 0x3f	; 63
    350c:	60 81       	ld	r22, Z
    350e:	71 81       	ldd	r23, Z+1	; 0x01
    3510:	82 81       	ldd	r24, Z+2	; 0x02
    3512:	93 81       	ldd	r25, Z+3	; 0x03
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e8       	ldi	r20, 0x80	; 128
    351a:	5f e3       	ldi	r21, 0x3F	; 63
    351c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3520:	88 23       	and	r24, r24
    3522:	2c f4       	brge	.+10     	; 0x352e <main+0x7ac>
		__ticks = 1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	9e af       	std	Y+62, r25	; 0x3e
    352a:	8d af       	std	Y+61, r24	; 0x3d
    352c:	46 c0       	rjmp	.+140    	; 0x35ba <main+0x838>
	else if (__tmp > 65535)
    352e:	fe 01       	movw	r30, r28
    3530:	ff 96       	adiw	r30, 0x3f	; 63
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	64 f5       	brge	.+88     	; 0x35a2 <main+0x820>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	fe 01       	movw	r30, r28
    354c:	ed 5b       	subi	r30, 0xBD	; 189
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e2       	ldi	r20, 0x20	; 32
    355e:	51 e4       	ldi	r21, 0x41	; 65
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	bc 01       	movw	r22, r24
    356a:	cd 01       	movw	r24, r26
    356c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	9e af       	std	Y+62, r25	; 0x3e
    3576:	8d af       	std	Y+61, r24	; 0x3d
    3578:	0f c0       	rjmp	.+30     	; 0x3598 <main+0x816>
    357a:	88 ec       	ldi	r24, 0xC8	; 200
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	9c af       	std	Y+60, r25	; 0x3c
    3580:	8b af       	std	Y+59, r24	; 0x3b
    3582:	8b ad       	ldd	r24, Y+59	; 0x3b
    3584:	9c ad       	ldd	r25, Y+60	; 0x3c
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <main+0x804>
    358a:	9c af       	std	Y+60, r25	; 0x3c
    358c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3590:	9e ad       	ldd	r25, Y+62	; 0x3e
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	9e af       	std	Y+62, r25	; 0x3e
    3596:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3598:	8d ad       	ldd	r24, Y+61	; 0x3d
    359a:	9e ad       	ldd	r25, Y+62	; 0x3e
    359c:	00 97       	sbiw	r24, 0x00	; 0
    359e:	69 f7       	brne	.-38     	; 0x357a <main+0x7f8>
    35a0:	16 c0       	rjmp	.+44     	; 0x35ce <main+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a2:	fe 01       	movw	r30, r28
    35a4:	ff 96       	adiw	r30, 0x3f	; 63
    35a6:	60 81       	ld	r22, Z
    35a8:	71 81       	ldd	r23, Z+1	; 0x01
    35aa:	82 81       	ldd	r24, Z+2	; 0x02
    35ac:	93 81       	ldd	r25, Z+3	; 0x03
    35ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	9e af       	std	Y+62, r25	; 0x3e
    35b8:	8d af       	std	Y+61, r24	; 0x3d
    35ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    35bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    35be:	9a af       	std	Y+58, r25	; 0x3a
    35c0:	89 af       	std	Y+57, r24	; 0x39
    35c2:	89 ad       	ldd	r24, Y+57	; 0x39
    35c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <main+0x844>
    35ca:	9a af       	std	Y+58, r25	; 0x3a
    35cc:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			arr[i]=Key;
    35ce:	80 91 79 01 	lds	r24, 0x0179
    35d2:	88 2f       	mov	r24, r24
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	20 91 80 01 	lds	r18, 0x0180
    35da:	fc 01       	movw	r30, r24
    35dc:	e8 59       	subi	r30, 0x98	; 152
    35de:	fe 4f       	sbci	r31, 0xFE	; 254
    35e0:	20 83       	st	Z, r18
	{
		HLCD_vidSendCMD(LCD_CLR);
		HLCD_vidWriteStr(" Check Pass:");


		for(i=0;i<=3;i++)
    35e2:	80 91 79 01 	lds	r24, 0x0179
    35e6:	8f 5f       	subi	r24, 0xFF	; 255
    35e8:	80 93 79 01 	sts	0x0179, r24
    35ec:	80 91 79 01 	lds	r24, 0x0179
    35f0:	84 30       	cpi	r24, 0x04	; 4
    35f2:	08 f4       	brcc	.+2      	; 0x35f6 <main+0x874>
    35f4:	9d ce       	rjmp	.-710    	; 0x3330 <main+0x5ae>
			HLCD_vidSendChar('*');
			_delay_ms(500);
			arr[i]=Key;
		}

		for(i=0;i<=3;i++)
    35f6:	10 92 79 01 	sts	0x0179, r1
    35fa:	17 c0       	rjmp	.+46     	; 0x362a <main+0x8a8>
		{

			EEPROM_vRead(EEPROM_PASSWORD_LOCATION1+i,&E_Data);
    35fc:	80 91 79 01 	lds	r24, 0x0179
    3600:	8f 5c       	subi	r24, 0xCF	; 207
    3602:	28 e7       	ldi	r18, 0x78	; 120
    3604:	31 e0       	ldi	r19, 0x01	; 1
    3606:	b9 01       	movw	r22, r18
    3608:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <EEPROM_vRead>
			arr2[i]=E_Data;
    360c:	80 91 79 01 	lds	r24, 0x0179
    3610:	88 2f       	mov	r24, r24
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	20 91 78 01 	lds	r18, 0x0178
    3618:	fc 01       	movw	r30, r24
    361a:	e5 5d       	subi	r30, 0xD5	; 213
    361c:	fe 4f       	sbci	r31, 0xFE	; 254
    361e:	20 83       	st	Z, r18
			HLCD_vidSendChar('*');
			_delay_ms(500);
			arr[i]=Key;
		}

		for(i=0;i<=3;i++)
    3620:	80 91 79 01 	lds	r24, 0x0179
    3624:	8f 5f       	subi	r24, 0xFF	; 255
    3626:	80 93 79 01 	sts	0x0179, r24
    362a:	80 91 79 01 	lds	r24, 0x0179
    362e:	84 30       	cpi	r24, 0x04	; 4
    3630:	28 f3       	brcs	.-54     	; 0x35fc <main+0x87a>
		{

			EEPROM_vRead(EEPROM_PASSWORD_LOCATION1+i,&E_Data);
			arr2[i]=E_Data;
		}
		if((arr[0]==arr2[0])&&(arr[1]==arr2[1])&&(arr[2]==arr2[2])&&(arr[3]==arr2[3]))
    3632:	90 91 68 01 	lds	r25, 0x0168
    3636:	80 91 2b 01 	lds	r24, 0x012B
    363a:	98 17       	cp	r25, r24
    363c:	b1 f4       	brne	.+44     	; 0x366a <main+0x8e8>
    363e:	90 91 69 01 	lds	r25, 0x0169
    3642:	80 91 2c 01 	lds	r24, 0x012C
    3646:	98 17       	cp	r25, r24
    3648:	81 f4       	brne	.+32     	; 0x366a <main+0x8e8>
    364a:	90 91 6a 01 	lds	r25, 0x016A
    364e:	80 91 2d 01 	lds	r24, 0x012D
    3652:	98 17       	cp	r25, r24
    3654:	51 f4       	brne	.+20     	; 0x366a <main+0x8e8>
    3656:	90 91 6b 01 	lds	r25, 0x016B
    365a:	80 91 2e 01 	lds	r24, 0x012E
    365e:	98 17       	cp	r25, r24
    3660:	21 f4       	brne	.+8      	; 0x366a <main+0x8e8>
		{
			flag=1;
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	80 93 5e 01 	sts	0x015E, r24
    3668:	a7 c1       	rjmp	.+846    	; 0x39b8 <main+0xc36>
		}

		else
		{
			max_tries--;
    366a:	80 91 44 01 	lds	r24, 0x0144
    366e:	81 50       	subi	r24, 0x01	; 1
    3670:	80 93 44 01 	sts	0x0144, r24
			HLCD_vidSendCMD(LCD_CLR);
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
			HLCD_vidGoToXY(0,0);
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
			HLCD_vidWriteStr("Wrong password");
    3682:	89 ec       	ldi	r24, 0xC9	; 201
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
			HLCD_vidGoToXY(1,0);
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
			if(max_tries==0)
    3692:	80 91 44 01 	lds	r24, 0x0144
    3696:	88 23       	and	r24, r24
    3698:	09 f0       	breq	.+2      	; 0x369c <main+0x91a>
    369a:	0e c1       	rjmp	.+540    	; 0x38b8 <main+0xb36>
			{
				HLCD_vidWriteStr("tries left: ");
    369c:	88 ed       	ldi	r24, 0xD8	; 216
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
				HLCD_vidSendChar('0');
    36a4:	80 e3       	ldi	r24, 0x30	; 48
    36a6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <HLCD_vidSendChar>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	aa e7       	ldi	r26, 0x7A	; 122
    36b0:	b4 e4       	ldi	r27, 0x44	; 68
    36b2:	8d ab       	std	Y+53, r24	; 0x35
    36b4:	9e ab       	std	Y+54, r25	; 0x36
    36b6:	af ab       	std	Y+55, r26	; 0x37
    36b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ba:	6d a9       	ldd	r22, Y+53	; 0x35
    36bc:	7e a9       	ldd	r23, Y+54	; 0x36
    36be:	8f a9       	ldd	r24, Y+55	; 0x37
    36c0:	98 ad       	ldd	r25, Y+56	; 0x38
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	4a ef       	ldi	r20, 0xFA	; 250
    36c8:	54 e4       	ldi	r21, 0x44	; 68
    36ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	89 ab       	std	Y+49, r24	; 0x31
    36d4:	9a ab       	std	Y+50, r25	; 0x32
    36d6:	ab ab       	std	Y+51, r26	; 0x33
    36d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36da:	69 a9       	ldd	r22, Y+49	; 0x31
    36dc:	7a a9       	ldd	r23, Y+50	; 0x32
    36de:	8b a9       	ldd	r24, Y+51	; 0x33
    36e0:	9c a9       	ldd	r25, Y+52	; 0x34
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	40 e8       	ldi	r20, 0x80	; 128
    36e8:	5f e3       	ldi	r21, 0x3F	; 63
    36ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36ee:	88 23       	and	r24, r24
    36f0:	2c f4       	brge	.+10     	; 0x36fc <main+0x97a>
		__ticks = 1;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	98 ab       	std	Y+48, r25	; 0x30
    36f8:	8f a7       	std	Y+47, r24	; 0x2f
    36fa:	3f c0       	rjmp	.+126    	; 0x377a <main+0x9f8>
	else if (__tmp > 65535)
    36fc:	69 a9       	ldd	r22, Y+49	; 0x31
    36fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3700:	8b a9       	ldd	r24, Y+51	; 0x33
    3702:	9c a9       	ldd	r25, Y+52	; 0x34
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	3f ef       	ldi	r19, 0xFF	; 255
    3708:	4f e7       	ldi	r20, 0x7F	; 127
    370a:	57 e4       	ldi	r21, 0x47	; 71
    370c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3710:	18 16       	cp	r1, r24
    3712:	4c f5       	brge	.+82     	; 0x3766 <main+0x9e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3714:	6d a9       	ldd	r22, Y+53	; 0x35
    3716:	7e a9       	ldd	r23, Y+54	; 0x36
    3718:	8f a9       	ldd	r24, Y+55	; 0x37
    371a:	98 ad       	ldd	r25, Y+56	; 0x38
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	40 e2       	ldi	r20, 0x20	; 32
    3722:	51 e4       	ldi	r21, 0x41	; 65
    3724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	bc 01       	movw	r22, r24
    372e:	cd 01       	movw	r24, r26
    3730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	98 ab       	std	Y+48, r25	; 0x30
    373a:	8f a7       	std	Y+47, r24	; 0x2f
    373c:	0f c0       	rjmp	.+30     	; 0x375c <main+0x9da>
    373e:	88 ec       	ldi	r24, 0xC8	; 200
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	9e a7       	std	Y+46, r25	; 0x2e
    3744:	8d a7       	std	Y+45, r24	; 0x2d
    3746:	8d a5       	ldd	r24, Y+45	; 0x2d
    3748:	9e a5       	ldd	r25, Y+46	; 0x2e
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	f1 f7       	brne	.-4      	; 0x374a <main+0x9c8>
    374e:	9e a7       	std	Y+46, r25	; 0x2e
    3750:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3752:	8f a5       	ldd	r24, Y+47	; 0x2f
    3754:	98 a9       	ldd	r25, Y+48	; 0x30
    3756:	01 97       	sbiw	r24, 0x01	; 1
    3758:	98 ab       	std	Y+48, r25	; 0x30
    375a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375c:	8f a5       	ldd	r24, Y+47	; 0x2f
    375e:	98 a9       	ldd	r25, Y+48	; 0x30
    3760:	00 97       	sbiw	r24, 0x00	; 0
    3762:	69 f7       	brne	.-38     	; 0x373e <main+0x9bc>
    3764:	14 c0       	rjmp	.+40     	; 0x378e <main+0xa0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3766:	69 a9       	ldd	r22, Y+49	; 0x31
    3768:	7a a9       	ldd	r23, Y+50	; 0x32
    376a:	8b a9       	ldd	r24, Y+51	; 0x33
    376c:	9c a9       	ldd	r25, Y+52	; 0x34
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	98 ab       	std	Y+48, r25	; 0x30
    3778:	8f a7       	std	Y+47, r24	; 0x2f
    377a:	8f a5       	ldd	r24, Y+47	; 0x2f
    377c:	98 a9       	ldd	r25, Y+48	; 0x30
    377e:	9c a7       	std	Y+44, r25	; 0x2c
    3780:	8b a7       	std	Y+43, r24	; 0x2b
    3782:	8b a5       	ldd	r24, Y+43	; 0x2b
    3784:	9c a5       	ldd	r25, Y+44	; 0x2c
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	f1 f7       	brne	.-4      	; 0x3786 <main+0xa04>
    378a:	9c a7       	std	Y+44, r25	; 0x2c
    378c:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				HLCD_vidSendCMD(LCD_CLR);
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
				HLCD_vidGoToXY(0,0);
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	60 e0       	ldi	r22, 0x00	; 0
    3798:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
				HLCD_vidWriteStr("7ARAMY");
    379c:	85 ee       	ldi	r24, 0xE5	; 229
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
				HLCD_vidGoToXY(1,0);
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
				HLCD_vidWriteStr("WAIT A MINUTE ");
    37ac:	8c ee       	ldi	r24, 0xEC	; 236
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
				DIO_vidsetPinval(DIO_PORTA,DIO_PIN5,DIO_HIGH);
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	65 e0       	ldi	r22, 0x05	; 5
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e4       	ldi	r25, 0x40	; 64
    37c2:	ac e1       	ldi	r26, 0x1C	; 28
    37c4:	b6 e4       	ldi	r27, 0x46	; 70
    37c6:	8f a3       	std	Y+39, r24	; 0x27
    37c8:	98 a7       	std	Y+40, r25	; 0x28
    37ca:	a9 a7       	std	Y+41, r26	; 0x29
    37cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ce:	6f a1       	ldd	r22, Y+39	; 0x27
    37d0:	78 a5       	ldd	r23, Y+40	; 0x28
    37d2:	89 a5       	ldd	r24, Y+41	; 0x29
    37d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	4a ef       	ldi	r20, 0xFA	; 250
    37dc:	54 e4       	ldi	r21, 0x44	; 68
    37de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	8b a3       	std	Y+35, r24	; 0x23
    37e8:	9c a3       	std	Y+36, r25	; 0x24
    37ea:	ad a3       	std	Y+37, r26	; 0x25
    37ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37ee:	6b a1       	ldd	r22, Y+35	; 0x23
    37f0:	7c a1       	ldd	r23, Y+36	; 0x24
    37f2:	8d a1       	ldd	r24, Y+37	; 0x25
    37f4:	9e a1       	ldd	r25, Y+38	; 0x26
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e8       	ldi	r20, 0x80	; 128
    37fc:	5f e3       	ldi	r21, 0x3F	; 63
    37fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3802:	88 23       	and	r24, r24
    3804:	2c f4       	brge	.+10     	; 0x3810 <main+0xa8e>
		__ticks = 1;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	9a a3       	std	Y+34, r25	; 0x22
    380c:	89 a3       	std	Y+33, r24	; 0x21
    380e:	3f c0       	rjmp	.+126    	; 0x388e <main+0xb0c>
	else if (__tmp > 65535)
    3810:	6b a1       	ldd	r22, Y+35	; 0x23
    3812:	7c a1       	ldd	r23, Y+36	; 0x24
    3814:	8d a1       	ldd	r24, Y+37	; 0x25
    3816:	9e a1       	ldd	r25, Y+38	; 0x26
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	3f ef       	ldi	r19, 0xFF	; 255
    381c:	4f e7       	ldi	r20, 0x7F	; 127
    381e:	57 e4       	ldi	r21, 0x47	; 71
    3820:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3824:	18 16       	cp	r1, r24
    3826:	4c f5       	brge	.+82     	; 0x387a <main+0xaf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3828:	6f a1       	ldd	r22, Y+39	; 0x27
    382a:	78 a5       	ldd	r23, Y+40	; 0x28
    382c:	89 a5       	ldd	r24, Y+41	; 0x29
    382e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e2       	ldi	r20, 0x20	; 32
    3836:	51 e4       	ldi	r21, 0x41	; 65
    3838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	9a a3       	std	Y+34, r25	; 0x22
    384e:	89 a3       	std	Y+33, r24	; 0x21
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <main+0xaee>
    3852:	88 ec       	ldi	r24, 0xC8	; 200
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	98 a3       	std	Y+32, r25	; 0x20
    3858:	8f 8f       	std	Y+31, r24	; 0x1f
    385a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    385c:	98 a1       	ldd	r25, Y+32	; 0x20
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <main+0xadc>
    3862:	98 a3       	std	Y+32, r25	; 0x20
    3864:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	89 a1       	ldd	r24, Y+33	; 0x21
    3868:	9a a1       	ldd	r25, Y+34	; 0x22
    386a:	01 97       	sbiw	r24, 0x01	; 1
    386c:	9a a3       	std	Y+34, r25	; 0x22
    386e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3870:	89 a1       	ldd	r24, Y+33	; 0x21
    3872:	9a a1       	ldd	r25, Y+34	; 0x22
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	69 f7       	brne	.-38     	; 0x3852 <main+0xad0>
    3878:	14 c0       	rjmp	.+40     	; 0x38a2 <main+0xb20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387a:	6b a1       	ldd	r22, Y+35	; 0x23
    387c:	7c a1       	ldd	r23, Y+36	; 0x24
    387e:	8d a1       	ldd	r24, Y+37	; 0x25
    3880:	9e a1       	ldd	r25, Y+38	; 0x26
    3882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	9a a3       	std	Y+34, r25	; 0x22
    388c:	89 a3       	std	Y+33, r24	; 0x21
    388e:	89 a1       	ldd	r24, Y+33	; 0x21
    3890:	9a a1       	ldd	r25, Y+34	; 0x22
    3892:	9e 8f       	std	Y+30, r25	; 0x1e
    3894:	8d 8f       	std	Y+29, r24	; 0x1d
    3896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3898:	9e 8d       	ldd	r25, Y+30	; 0x1e
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <main+0xb18>
    389e:	9e 8f       	std	Y+30, r25	; 0x1e
    38a0:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10000);
				DIO_vidsetPinval(DIO_PORTA,DIO_PIN5,DIO_LOW);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	65 e0       	ldi	r22, 0x05	; 5
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
				flag=0;
    38ac:	10 92 5e 01 	sts	0x015E, r1
				max_tries=3;
    38b0:	83 e0       	ldi	r24, 0x03	; 3
    38b2:	80 93 44 01 	sts	0x0144, r24
    38b6:	0e c0       	rjmp	.+28     	; 0x38d4 <main+0xb52>
			}
			else
			{
				HLCD_vidWriteStr("tries left: ");
    38b8:	88 ed       	ldi	r24, 0xD8	; 216
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
				HLCD_vidWriteNum(max_tries);
    38c0:	80 91 44 01 	lds	r24, 0x0144
    38c4:	88 2f       	mov	r24, r24
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	a0 e0       	ldi	r26, 0x00	; 0
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <HLCD_vidWriteNum>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	aa e7       	ldi	r26, 0x7A	; 122
    38da:	b4 e4       	ldi	r27, 0x44	; 68
    38dc:	89 8f       	std	Y+25, r24	; 0x19
    38de:	9a 8f       	std	Y+26, r25	; 0x1a
    38e0:	ab 8f       	std	Y+27, r26	; 0x1b
    38e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e4:	69 8d       	ldd	r22, Y+25	; 0x19
    38e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	4a ef       	ldi	r20, 0xFA	; 250
    38f2:	54 e4       	ldi	r21, 0x44	; 68
    38f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	8d 8b       	std	Y+21, r24	; 0x15
    38fe:	9e 8b       	std	Y+22, r25	; 0x16
    3900:	af 8b       	std	Y+23, r26	; 0x17
    3902:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3904:	6d 89       	ldd	r22, Y+21	; 0x15
    3906:	7e 89       	ldd	r23, Y+22	; 0x16
    3908:	8f 89       	ldd	r24, Y+23	; 0x17
    390a:	98 8d       	ldd	r25, Y+24	; 0x18
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e8       	ldi	r20, 0x80	; 128
    3912:	5f e3       	ldi	r21, 0x3F	; 63
    3914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3918:	88 23       	and	r24, r24
    391a:	2c f4       	brge	.+10     	; 0x3926 <main+0xba4>
		__ticks = 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	9c 8b       	std	Y+20, r25	; 0x14
    3922:	8b 8b       	std	Y+19, r24	; 0x13
    3924:	3f c0       	rjmp	.+126    	; 0x39a4 <main+0xc22>
	else if (__tmp > 65535)
    3926:	6d 89       	ldd	r22, Y+21	; 0x15
    3928:	7e 89       	ldd	r23, Y+22	; 0x16
    392a:	8f 89       	ldd	r24, Y+23	; 0x17
    392c:	98 8d       	ldd	r25, Y+24	; 0x18
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	3f ef       	ldi	r19, 0xFF	; 255
    3932:	4f e7       	ldi	r20, 0x7F	; 127
    3934:	57 e4       	ldi	r21, 0x47	; 71
    3936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    393a:	18 16       	cp	r1, r24
    393c:	4c f5       	brge	.+82     	; 0x3990 <main+0xc0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393e:	69 8d       	ldd	r22, Y+25	; 0x19
    3940:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3942:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3944:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	40 e2       	ldi	r20, 0x20	; 32
    394c:	51 e4       	ldi	r21, 0x41	; 65
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	9c 8b       	std	Y+20, r25	; 0x14
    3964:	8b 8b       	std	Y+19, r24	; 0x13
    3966:	0f c0       	rjmp	.+30     	; 0x3986 <main+0xc04>
    3968:	88 ec       	ldi	r24, 0xC8	; 200
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	9a 8b       	std	Y+18, r25	; 0x12
    396e:	89 8b       	std	Y+17, r24	; 0x11
    3970:	89 89       	ldd	r24, Y+17	; 0x11
    3972:	9a 89       	ldd	r25, Y+18	; 0x12
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <main+0xbf2>
    3978:	9a 8b       	std	Y+18, r25	; 0x12
    397a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	9c 8b       	std	Y+20, r25	; 0x14
    3984:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3986:	8b 89       	ldd	r24, Y+19	; 0x13
    3988:	9c 89       	ldd	r25, Y+20	; 0x14
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	69 f7       	brne	.-38     	; 0x3968 <main+0xbe6>
    398e:	14 c0       	rjmp	.+40     	; 0x39b8 <main+0xc36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3990:	6d 89       	ldd	r22, Y+21	; 0x15
    3992:	7e 89       	ldd	r23, Y+22	; 0x16
    3994:	8f 89       	ldd	r24, Y+23	; 0x17
    3996:	98 8d       	ldd	r25, Y+24	; 0x18
    3998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	9c 8b       	std	Y+20, r25	; 0x14
    39a2:	8b 8b       	std	Y+19, r24	; 0x13
    39a4:	8b 89       	ldd	r24, Y+19	; 0x13
    39a6:	9c 89       	ldd	r25, Y+20	; 0x14
    39a8:	98 8b       	std	Y+16, r25	; 0x10
    39aa:	8f 87       	std	Y+15, r24	; 0x0f
    39ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ae:	98 89       	ldd	r25, Y+16	; 0x10
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <main+0xc2e>
    39b4:	98 8b       	std	Y+16, r25	; 0x10
    39b6:	8f 87       	std	Y+15, r24	; 0x0f
		}
		EEPROM_vWrite(EEPROM_STATUS_LOCATION,0x00);

	}

	while(flag==0)
    39b8:	80 91 5e 01 	lds	r24, 0x015E
    39bc:	88 23       	and	r24, r24
    39be:	09 f4       	brne	.+2      	; 0x39c2 <main+0xc40>
    39c0:	ad cc       	rjmp	.-1702   	; 0x331c <main+0x59a>
				HLCD_vidWriteNum(max_tries);
			}
			_delay_ms(1000);
		}
	}
	if(flag==1)
    39c2:	80 91 5e 01 	lds	r24, 0x015E
    39c6:	81 30       	cpi	r24, 0x01	; 1
    39c8:	09 f0       	breq	.+2      	; 0x39cc <main+0xc4a>
    39ca:	8b c0       	rjmp	.+278    	; 0x3ae2 <main+0xd60>
	{
		HLCD_vidSendCMD(LCD_CLR);
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
		HLCD_vidGoToXY(0,0);
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
		HLCD_vidWriteStr("Correct password");
    39da:	8b ef       	ldi	r24, 0xFB	; 251
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>
		HLCD_vidGoToXY(1,0);
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	0e 94 88 10 	call	0x2110	; 0x2110 <HLCD_vidGoToXY>
		HLCD_vidWriteStr("Ya 100 Welcome");
    39ea:	8c e0       	ldi	r24, 0x0C	; 12
    39ec:	91 e0       	ldi	r25, 0x01	; 1
    39ee:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <HLCD_vidWriteStr>

		//SERVO
		TIM1_voidSetCmpBRegValue(500);//90 degree ->875
    39f2:	84 ef       	ldi	r24, 0xF4	; 244
    39f4:	91 e0       	ldi	r25, 0x01	; 1
    39f6:	0e 94 8d 14 	call	0x291a	; 0x291a <TIM1_voidSetCmpBRegValue>
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	aa e7       	ldi	r26, 0x7A	; 122
    3a00:	b4 e4       	ldi	r27, 0x44	; 68
    3a02:	8b 87       	std	Y+11, r24	; 0x0b
    3a04:	9c 87       	std	Y+12, r25	; 0x0c
    3a06:	ad 87       	std	Y+13, r26	; 0x0d
    3a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	4a ef       	ldi	r20, 0xFA	; 250
    3a18:	54 e4       	ldi	r21, 0x44	; 68
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	8f 83       	std	Y+7, r24	; 0x07
    3a24:	98 87       	std	Y+8, r25	; 0x08
    3a26:	a9 87       	std	Y+9, r26	; 0x09
    3a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2c:	78 85       	ldd	r23, Y+8	; 0x08
    3a2e:	89 85       	ldd	r24, Y+9	; 0x09
    3a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e8       	ldi	r20, 0x80	; 128
    3a38:	5f e3       	ldi	r21, 0x3F	; 63
    3a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a3e:	88 23       	and	r24, r24
    3a40:	2c f4       	brge	.+10     	; 0x3a4c <main+0xcca>
		__ticks = 1;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	9e 83       	std	Y+6, r25	; 0x06
    3a48:	8d 83       	std	Y+5, r24	; 0x05
    3a4a:	3f c0       	rjmp	.+126    	; 0x3aca <main+0xd48>
	else if (__tmp > 65535)
    3a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4e:	78 85       	ldd	r23, Y+8	; 0x08
    3a50:	89 85       	ldd	r24, Y+9	; 0x09
    3a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	3f ef       	ldi	r19, 0xFF	; 255
    3a58:	4f e7       	ldi	r20, 0x7F	; 127
    3a5a:	57 e4       	ldi	r21, 0x47	; 71
    3a5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a60:	18 16       	cp	r1, r24
    3a62:	4c f5       	brge	.+82     	; 0x3ab6 <main+0xd34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	40 e2       	ldi	r20, 0x20	; 32
    3a72:	51 e4       	ldi	r21, 0x41	; 65
    3a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	bc 01       	movw	r22, r24
    3a7e:	cd 01       	movw	r24, r26
    3a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9e 83       	std	Y+6, r25	; 0x06
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
    3a8c:	0f c0       	rjmp	.+30     	; 0x3aac <main+0xd2a>
    3a8e:	88 ec       	ldi	r24, 0xC8	; 200
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	9c 83       	std	Y+4, r25	; 0x04
    3a94:	8b 83       	std	Y+3, r24	; 0x03
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	f1 f7       	brne	.-4      	; 0x3a9a <main+0xd18>
    3a9e:	9c 83       	std	Y+4, r25	; 0x04
    3aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	9e 83       	std	Y+6, r25	; 0x06
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aac:	8d 81       	ldd	r24, Y+5	; 0x05
    3aae:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab0:	00 97       	sbiw	r24, 0x00	; 0
    3ab2:	69 f7       	brne	.-38     	; 0x3a8e <main+0xd0c>
    3ab4:	14 c0       	rjmp	.+40     	; 0x3ade <main+0xd5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab8:	78 85       	ldd	r23, Y+8	; 0x08
    3aba:	89 85       	ldd	r24, Y+9	; 0x09
    3abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	9e 83       	std	Y+6, r25	; 0x06
    3ac8:	8d 83       	std	Y+5, r24	; 0x05
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ace:	9a 83       	std	Y+2, r25	; 0x02
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <main+0xd54>
    3ada:	9a 83       	std	Y+2, r25	; 0x02
    3adc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		//DC Motor
		ADC_PRINT();
    3ade:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <ADC_PRINT>
	}

	while(1)
	{

		if(flag==1)
    3ae2:	80 91 5e 01 	lds	r24, 0x015E
    3ae6:	81 30       	cpi	r24, 0x01	; 1
    3ae8:	e1 f7       	brne	.-8      	; 0x3ae2 <main+0xd60>
		{
			//DC Motor
			ADC_PRINT();
    3aea:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <ADC_PRINT>
			HLCD_vidSendCMD(LCD_CLR);
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
			HLCD_option1();
    3af4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <HLCD_option1>
			do {
				Key = KPD_u8GetPressedKey();
    3af8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    3afc:	80 93 80 01 	sts	0x0180, r24
			}while(Key==NOT_PRESSED);
    3b00:	80 91 80 01 	lds	r24, 0x0180
    3b04:	8f 3f       	cpi	r24, 0xFF	; 255
    3b06:	c1 f3       	breq	.-16     	; 0x3af8 <main+0xd76>
			if(Key=='+'||Key=='/'||Key=='x'||Key=='-')
    3b08:	80 91 80 01 	lds	r24, 0x0180
    3b0c:	8b 32       	cpi	r24, 0x2B	; 43
    3b0e:	61 f0       	breq	.+24     	; 0x3b28 <main+0xda6>
    3b10:	80 91 80 01 	lds	r24, 0x0180
    3b14:	8f 32       	cpi	r24, 0x2F	; 47
    3b16:	41 f0       	breq	.+16     	; 0x3b28 <main+0xda6>
    3b18:	80 91 80 01 	lds	r24, 0x0180
    3b1c:	88 37       	cpi	r24, 0x78	; 120
    3b1e:	21 f0       	breq	.+8      	; 0x3b28 <main+0xda6>
    3b20:	80 91 80 01 	lds	r24, 0x0180
    3b24:	8d 32       	cpi	r24, 0x2D	; 45
    3b26:	e9 f6       	brne	.-70     	; 0x3ae2 <main+0xd60>
			{
				HLCD_vidSendCMD(LCD_CLR);
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidSendCMD>
				HLCD_option2();
    3b2e:	0e 94 0b 11 	call	0x2216	; 0x2216 <HLCD_option2>
				flag=3;
    3b32:	83 e0       	ldi	r24, 0x03	; 3
    3b34:	80 93 5e 01 	sts	0x015E, r24
				target=Key;
    3b38:	80 91 80 01 	lds	r24, 0x0180
    3b3c:	80 93 5f 01 	sts	0x015F, r24
				UARTTX_vidSetISR(send_char);
    3b40:	88 e0       	ldi	r24, 0x08	; 8
    3b42:	9e e1       	ldi	r25, 0x1E	; 30
    3b44:	0e 94 81 16 	call	0x2d02	; 0x2d02 <UARTTX_vidSetISR>
				UARTRX_vidSetISR(receive_char);
    3b48:	85 e1       	ldi	r24, 0x15	; 21
    3b4a:	9e e1       	ldi	r25, 0x1E	; 30
    3b4c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UARTRX_vidSetISR>
    3b50:	c8 cf       	rjmp	.-112    	; 0x3ae2 <main+0xd60>

00003b52 <ADC_voidGetData_INT>:

	}
}
//ADC
void ADC_voidGetData_INT(void)
{
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
	Digital_TEMP=ADC_GetConvertedDig();
    3b5a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ADC_GetConvertedDig>
    3b5e:	90 93 6f 01 	sts	0x016F, r25
    3b62:	80 93 6e 01 	sts	0x016E, r24

}
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <ADC_PRINT>:

void ADC_PRINT(void)
{
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
		ADC_StartConversion(DIO_PIN0);//-> interrupt
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ADC_StartConversion>
		ACD_vidSetISR(ADC_voidGetData_INT);
    3b7a:	89 ea       	ldi	r24, 0xA9	; 169
    3b7c:	9d e1       	ldi	r25, 0x1D	; 29
    3b7e:	0e 94 09 06 	call	0xc12	; 0xc12 <ACD_vidSetISR>

	Digital_TEMP =ADC_getReading(DIO_PIN0);//-> polling
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	0e 94 b9 05 	call	0xb72	; 0xb72 <ADC_getReading>
    3b88:	90 93 6f 01 	sts	0x016F, r25
    3b8c:	80 93 6e 01 	sts	0x016E, r24
	//Digital_FLAME=ADC_getReading(DIO_PIN6);

	//CONVERT ADC STEPS TO VOLTAGE
    volt_temp=((u32)Digital_TEMP*5000)/1024;
    3b90:	80 91 6e 01 	lds	r24, 0x016E
    3b94:	90 91 6f 01 	lds	r25, 0x016F
    3b98:	cc 01       	movw	r24, r24
    3b9a:	a0 e0       	ldi	r26, 0x00	; 0
    3b9c:	b0 e0       	ldi	r27, 0x00	; 0
    3b9e:	28 e8       	ldi	r18, 0x88	; 136
    3ba0:	33 e1       	ldi	r19, 0x13	; 19
    3ba2:	40 e0       	ldi	r20, 0x00	; 0
    3ba4:	50 e0       	ldi	r21, 0x00	; 0
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__mulsi3>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	07 2e       	mov	r0, r23
    3bb4:	7a e0       	ldi	r23, 0x0A	; 10
    3bb6:	b6 95       	lsr	r27
    3bb8:	a7 95       	ror	r26
    3bba:	97 95       	ror	r25
    3bbc:	87 95       	ror	r24
    3bbe:	7a 95       	dec	r23
    3bc0:	d1 f7       	brne	.-12     	; 0x3bb6 <ADC_PRINT+0x4a>
    3bc2:	70 2d       	mov	r23, r0
    3bc4:	80 93 7a 01 	sts	0x017A, r24
    3bc8:	90 93 7b 01 	sts	0x017B, r25
    3bcc:	a0 93 7c 01 	sts	0x017C, r26
    3bd0:	b0 93 7d 01 	sts	0x017D, r27
	//volt_flame=(((u32)Digital_FLAME*5000)/1024)/10;

	if(volt_temp>2000)
    3bd4:	80 91 7a 01 	lds	r24, 0x017A
    3bd8:	90 91 7b 01 	lds	r25, 0x017B
    3bdc:	a0 91 7c 01 	lds	r26, 0x017C
    3be0:	b0 91 7d 01 	lds	r27, 0x017D
    3be4:	81 3d       	cpi	r24, 0xD1	; 209
    3be6:	27 e0       	ldi	r18, 0x07	; 7
    3be8:	92 07       	cpc	r25, r18
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	a2 07       	cpc	r26, r18
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	b2 07       	cpc	r27, r18
    3bf2:	30 f0       	brcs	.+12     	; 0x3c00 <ADC_PRINT+0x94>
	{
		//DC Motor
		DIO_vidsetPinval(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	66 e0       	ldi	r22, 0x06	; 6
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    3bfe:	05 c0       	rjmp	.+10     	; 0x3c0a <ADC_PRINT+0x9e>
	}
	else
	{
		DIO_vidsetPinval(DIO_PORTD,DIO_PIN6,DIO_LOW);
    3c00:	83 e0       	ldi	r24, 0x03	; 3
    3c02:	66 e0       	ldi	r22, 0x06	; 6
    3c04:	40 e0       	ldi	r20, 0x00	; 0
    3c06:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
//		DIO_vidsetPinval(DIO_PORTA,DIO_PIN5,DIO_LOW);
//
//	}


}
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <send_char>:
//UART
void send_char(void)
{
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendData_Asynch(Tx_data);
    3c18:	80 91 43 01 	lds	r24, 0x0143
    3c1c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <UART_voidSendData_Asynch>
	disable_tx();
    3c20:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <disable_tx>
}
    3c24:	cf 91       	pop	r28
    3c26:	df 91       	pop	r29
    3c28:	08 95       	ret

00003c2a <receive_char>:
void receive_char(void)
{
    3c2a:	df 93       	push	r29
    3c2c:	cf 93       	push	r28
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
    3c32:	aa 97       	sbiw	r28, 0x2a	; 42
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	f8 94       	cli
    3c38:	de bf       	out	0x3e, r29	; 62
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	cd bf       	out	0x3d, r28	; 61
	Rx_data=UART_u8ReceiveData();
    3c3e:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <UART_u8ReceiveData>
    3c42:	80 93 71 01 	sts	0x0171, r24
	if(Rx_data=='A')
    3c46:	80 91 71 01 	lds	r24, 0x0171
    3c4a:	81 34       	cpi	r24, 0x41	; 65
    3c4c:	09 f0       	breq	.+2      	; 0x3c50 <receive_char+0x26>
    3c4e:	97 c0       	rjmp	.+302    	; 0x3d7e <receive_char+0x154>
	{
		enable_tx();
    3c50:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <enable_tx>
		UART_voidSendData_Asynch('A');
    3c54:	81 e4       	ldi	r24, 0x41	; 65
    3c56:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <UART_voidSendData_Asynch>
		if(target=='+')
    3c5a:	80 91 5f 01 	lds	r24, 0x015F
    3c5e:	8b 32       	cpi	r24, 0x2B	; 43
    3c60:	31 f4       	brne	.+12     	; 0x3c6e <receive_char+0x44>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	63 e0       	ldi	r22, 0x03	; 3
    3c66:	41 e0       	ldi	r20, 0x01	; 1
    3c68:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    3c6c:	13 c0       	rjmp	.+38     	; 0x3c94 <receive_char+0x6a>
		}
		else if(target=='-')
    3c6e:	80 91 5f 01 	lds	r24, 0x015F
    3c72:	8d 32       	cpi	r24, 0x2D	; 45
    3c74:	31 f4       	brne	.+12     	; 0x3c82 <receive_char+0x58>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	64 e0       	ldi	r22, 0x04	; 4
    3c7a:	41 e0       	ldi	r20, 0x01	; 1
    3c7c:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    3c80:	09 c0       	rjmp	.+18     	; 0x3c94 <receive_char+0x6a>
		}
		else if(target=='/')
    3c82:	80 91 5f 01 	lds	r24, 0x015F
    3c86:	8f 32       	cpi	r24, 0x2F	; 47
    3c88:	29 f4       	brne	.+10     	; 0x3c94 <receive_char+0x6a>
		{
			DIO_vidsetPinval(DIO_PORTD,DIO_PIN5,DIO_HIGH);
    3c8a:	83 e0       	ldi	r24, 0x03	; 3
    3c8c:	65 e0       	ldi	r22, 0x05	; 5
    3c8e:	41 e0       	ldi	r20, 0x01	; 1
    3c90:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	aa e7       	ldi	r26, 0x7A	; 122
    3c9a:	b4 e4       	ldi	r27, 0x44	; 68
    3c9c:	8f a3       	std	Y+39, r24	; 0x27
    3c9e:	98 a7       	std	Y+40, r25	; 0x28
    3ca0:	a9 a7       	std	Y+41, r26	; 0x29
    3ca2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    3caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	4a ef       	ldi	r20, 0xFA	; 250
    3cb2:	54 e4       	ldi	r21, 0x44	; 68
    3cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	8b a3       	std	Y+35, r24	; 0x23
    3cbe:	9c a3       	std	Y+36, r25	; 0x24
    3cc0:	ad a3       	std	Y+37, r26	; 0x25
    3cc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    3cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    3cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    3cca:	9e a1       	ldd	r25, Y+38	; 0x26
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e8       	ldi	r20, 0x80	; 128
    3cd2:	5f e3       	ldi	r21, 0x3F	; 63
    3cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cd8:	88 23       	and	r24, r24
    3cda:	2c f4       	brge	.+10     	; 0x3ce6 <receive_char+0xbc>
		__ticks = 1;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	9a a3       	std	Y+34, r25	; 0x22
    3ce2:	89 a3       	std	Y+33, r24	; 0x21
    3ce4:	3f c0       	rjmp	.+126    	; 0x3d64 <receive_char+0x13a>
	else if (__tmp > 65535)
    3ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    3cea:	8d a1       	ldd	r24, Y+37	; 0x25
    3cec:	9e a1       	ldd	r25, Y+38	; 0x26
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	3f ef       	ldi	r19, 0xFF	; 255
    3cf2:	4f e7       	ldi	r20, 0x7F	; 127
    3cf4:	57 e4       	ldi	r21, 0x47	; 71
    3cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cfa:	18 16       	cp	r1, r24
    3cfc:	4c f5       	brge	.+82     	; 0x3d50 <receive_char+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cfe:	6f a1       	ldd	r22, Y+39	; 0x27
    3d00:	78 a5       	ldd	r23, Y+40	; 0x28
    3d02:	89 a5       	ldd	r24, Y+41	; 0x29
    3d04:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e2       	ldi	r20, 0x20	; 32
    3d0c:	51 e4       	ldi	r21, 0x41	; 65
    3d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	bc 01       	movw	r22, r24
    3d18:	cd 01       	movw	r24, r26
    3d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	9a a3       	std	Y+34, r25	; 0x22
    3d24:	89 a3       	std	Y+33, r24	; 0x21
    3d26:	0f c0       	rjmp	.+30     	; 0x3d46 <receive_char+0x11c>
    3d28:	88 ec       	ldi	r24, 0xC8	; 200
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	98 a3       	std	Y+32, r25	; 0x20
    3d2e:	8f 8f       	std	Y+31, r24	; 0x1f
    3d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d32:	98 a1       	ldd	r25, Y+32	; 0x20
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <receive_char+0x10a>
    3d38:	98 a3       	std	Y+32, r25	; 0x20
    3d3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	9a a3       	std	Y+34, r25	; 0x22
    3d44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d46:	89 a1       	ldd	r24, Y+33	; 0x21
    3d48:	9a a1       	ldd	r25, Y+34	; 0x22
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	69 f7       	brne	.-38     	; 0x3d28 <receive_char+0xfe>
    3d4e:	14 c0       	rjmp	.+40     	; 0x3d78 <receive_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d50:	6b a1       	ldd	r22, Y+35	; 0x23
    3d52:	7c a1       	ldd	r23, Y+36	; 0x24
    3d54:	8d a1       	ldd	r24, Y+37	; 0x25
    3d56:	9e a1       	ldd	r25, Y+38	; 0x26
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9a a3       	std	Y+34, r25	; 0x22
    3d62:	89 a3       	std	Y+33, r24	; 0x21
    3d64:	89 a1       	ldd	r24, Y+33	; 0x21
    3d66:	9a a1       	ldd	r25, Y+34	; 0x22
    3d68:	9e 8f       	std	Y+30, r25	; 0x1e
    3d6a:	8d 8f       	std	Y+29, r24	; 0x1d
    3d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <receive_char+0x146>
    3d74:	9e 8f       	std	Y+30, r25	; 0x1e
    3d76:	8d 8f       	std	Y+29, r24	; 0x1d
		else
		{
			//
		}
		_delay_ms(1000);
		disable_tx();
    3d78:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <disable_tx>
    3d7c:	1d c1       	rjmp	.+570    	; 0x3fb8 <receive_char+0x38e>

	}
	else if(Rx_data=='B')
    3d7e:	80 91 71 01 	lds	r24, 0x0171
    3d82:	82 34       	cpi	r24, 0x42	; 66
    3d84:	09 f0       	breq	.+2      	; 0x3d88 <receive_char+0x15e>
    3d86:	97 c0       	rjmp	.+302    	; 0x3eb6 <receive_char+0x28c>
	{

		enable_tx();
    3d88:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <enable_tx>
		UART_voidSendData_Asynch('B');
    3d8c:	82 e4       	ldi	r24, 0x42	; 66
    3d8e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <UART_voidSendData_Asynch>
		if(target=='+')
    3d92:	80 91 5f 01 	lds	r24, 0x015F
    3d96:	8b 32       	cpi	r24, 0x2B	; 43
    3d98:	31 f4       	brne	.+12     	; 0x3da6 <receive_char+0x17c>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN3,DIO_LOW);
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	63 e0       	ldi	r22, 0x03	; 3
    3d9e:	40 e0       	ldi	r20, 0x00	; 0
    3da0:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    3da4:	13 c0       	rjmp	.+38     	; 0x3dcc <receive_char+0x1a2>
		}
		else if(target=='-')
    3da6:	80 91 5f 01 	lds	r24, 0x015F
    3daa:	8d 32       	cpi	r24, 0x2D	; 45
    3dac:	31 f4       	brne	.+12     	; 0x3dba <receive_char+0x190>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN4,DIO_LOW);
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	64 e0       	ldi	r22, 0x04	; 4
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    3db8:	09 c0       	rjmp	.+18     	; 0x3dcc <receive_char+0x1a2>
		}
		else if(target=='/')
    3dba:	80 91 5f 01 	lds	r24, 0x015F
    3dbe:	8f 32       	cpi	r24, 0x2F	; 47
    3dc0:	29 f4       	brne	.+10     	; 0x3dcc <receive_char+0x1a2>
		{
			DIO_vidsetPinval(DIO_PORTD,DIO_PIN5,DIO_LOW);
    3dc2:	83 e0       	ldi	r24, 0x03	; 3
    3dc4:	65 e0       	ldi	r22, 0x05	; 5
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	aa e7       	ldi	r26, 0x7A	; 122
    3dd2:	b4 e4       	ldi	r27, 0x44	; 68
    3dd4:	89 8f       	std	Y+25, r24	; 0x19
    3dd6:	9a 8f       	std	Y+26, r25	; 0x1a
    3dd8:	ab 8f       	std	Y+27, r26	; 0x1b
    3dda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    3dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	4a ef       	ldi	r20, 0xFA	; 250
    3dea:	54 e4       	ldi	r21, 0x44	; 68
    3dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	8d 8b       	std	Y+21, r24	; 0x15
    3df6:	9e 8b       	std	Y+22, r25	; 0x16
    3df8:	af 8b       	std	Y+23, r26	; 0x17
    3dfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    3dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    3e00:	8f 89       	ldd	r24, Y+23	; 0x17
    3e02:	98 8d       	ldd	r25, Y+24	; 0x18
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	40 e8       	ldi	r20, 0x80	; 128
    3e0a:	5f e3       	ldi	r21, 0x3F	; 63
    3e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e10:	88 23       	and	r24, r24
    3e12:	2c f4       	brge	.+10     	; 0x3e1e <receive_char+0x1f4>
		__ticks = 1;
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	9c 8b       	std	Y+20, r25	; 0x14
    3e1a:	8b 8b       	std	Y+19, r24	; 0x13
    3e1c:	3f c0       	rjmp	.+126    	; 0x3e9c <receive_char+0x272>
	else if (__tmp > 65535)
    3e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e20:	7e 89       	ldd	r23, Y+22	; 0x16
    3e22:	8f 89       	ldd	r24, Y+23	; 0x17
    3e24:	98 8d       	ldd	r25, Y+24	; 0x18
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	4f e7       	ldi	r20, 0x7F	; 127
    3e2c:	57 e4       	ldi	r21, 0x47	; 71
    3e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e32:	18 16       	cp	r1, r24
    3e34:	4c f5       	brge	.+82     	; 0x3e88 <receive_char+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e36:	69 8d       	ldd	r22, Y+25	; 0x19
    3e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e2       	ldi	r20, 0x20	; 32
    3e44:	51 e4       	ldi	r21, 0x41	; 65
    3e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	bc 01       	movw	r22, r24
    3e50:	cd 01       	movw	r24, r26
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9c 8b       	std	Y+20, r25	; 0x14
    3e5c:	8b 8b       	std	Y+19, r24	; 0x13
    3e5e:	0f c0       	rjmp	.+30     	; 0x3e7e <receive_char+0x254>
    3e60:	88 ec       	ldi	r24, 0xC8	; 200
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	9a 8b       	std	Y+18, r25	; 0x12
    3e66:	89 8b       	std	Y+17, r24	; 0x11
    3e68:	89 89       	ldd	r24, Y+17	; 0x11
    3e6a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	f1 f7       	brne	.-4      	; 0x3e6c <receive_char+0x242>
    3e70:	9a 8b       	std	Y+18, r25	; 0x12
    3e72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e74:	8b 89       	ldd	r24, Y+19	; 0x13
    3e76:	9c 89       	ldd	r25, Y+20	; 0x14
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	9c 8b       	std	Y+20, r25	; 0x14
    3e7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e80:	9c 89       	ldd	r25, Y+20	; 0x14
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	69 f7       	brne	.-38     	; 0x3e60 <receive_char+0x236>
    3e86:	14 c0       	rjmp	.+40     	; 0x3eb0 <receive_char+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e88:	6d 89       	ldd	r22, Y+21	; 0x15
    3e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	9c 8b       	std	Y+20, r25	; 0x14
    3e9a:	8b 8b       	std	Y+19, r24	; 0x13
    3e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ea0:	98 8b       	std	Y+16, r25	; 0x10
    3ea2:	8f 87       	std	Y+15, r24	; 0x0f
    3ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea6:	98 89       	ldd	r25, Y+16	; 0x10
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <receive_char+0x27e>
    3eac:	98 8b       	std	Y+16, r25	; 0x10
    3eae:	8f 87       	std	Y+15, r24	; 0x0f
		else
		{
			//
		}
		_delay_ms(1000);
		disable_tx();
    3eb0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <disable_tx>
    3eb4:	81 c0       	rjmp	.+258    	; 0x3fb8 <receive_char+0x38e>

	}
	else if(Rx_data=='C')
    3eb6:	80 91 71 01 	lds	r24, 0x0171
    3eba:	83 34       	cpi	r24, 0x43	; 67
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <receive_char+0x296>
    3ebe:	7c c0       	rjmp	.+248    	; 0x3fb8 <receive_char+0x38e>
	{

		enable_tx();
    3ec0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <enable_tx>
		UART_voidSendData_Asynch('C');
    3ec4:	83 e4       	ldi	r24, 0x43	; 67
    3ec6:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <UART_voidSendData_Asynch>
		flag=1;
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	80 93 5e 01 	sts	0x015E, r24
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	aa e7       	ldi	r26, 0x7A	; 122
    3ed6:	b4 e4       	ldi	r27, 0x44	; 68
    3ed8:	8b 87       	std	Y+11, r24	; 0x0b
    3eda:	9c 87       	std	Y+12, r25	; 0x0c
    3edc:	ad 87       	std	Y+13, r26	; 0x0d
    3ede:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	4a ef       	ldi	r20, 0xFA	; 250
    3eee:	54 e4       	ldi	r21, 0x44	; 68
    3ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	8f 83       	std	Y+7, r24	; 0x07
    3efa:	98 87       	std	Y+8, r25	; 0x08
    3efc:	a9 87       	std	Y+9, r26	; 0x09
    3efe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f00:	6f 81       	ldd	r22, Y+7	; 0x07
    3f02:	78 85       	ldd	r23, Y+8	; 0x08
    3f04:	89 85       	ldd	r24, Y+9	; 0x09
    3f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	40 e8       	ldi	r20, 0x80	; 128
    3f0e:	5f e3       	ldi	r21, 0x3F	; 63
    3f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f14:	88 23       	and	r24, r24
    3f16:	2c f4       	brge	.+10     	; 0x3f22 <receive_char+0x2f8>
		__ticks = 1;
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	9e 83       	std	Y+6, r25	; 0x06
    3f1e:	8d 83       	std	Y+5, r24	; 0x05
    3f20:	3f c0       	rjmp	.+126    	; 0x3fa0 <receive_char+0x376>
	else if (__tmp > 65535)
    3f22:	6f 81       	ldd	r22, Y+7	; 0x07
    3f24:	78 85       	ldd	r23, Y+8	; 0x08
    3f26:	89 85       	ldd	r24, Y+9	; 0x09
    3f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	3f ef       	ldi	r19, 0xFF	; 255
    3f2e:	4f e7       	ldi	r20, 0x7F	; 127
    3f30:	57 e4       	ldi	r21, 0x47	; 71
    3f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f36:	18 16       	cp	r1, r24
    3f38:	4c f5       	brge	.+82     	; 0x3f8c <receive_char+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	40 e2       	ldi	r20, 0x20	; 32
    3f48:	51 e4       	ldi	r21, 0x41	; 65
    3f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	bc 01       	movw	r22, r24
    3f54:	cd 01       	movw	r24, r26
    3f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	9e 83       	std	Y+6, r25	; 0x06
    3f60:	8d 83       	std	Y+5, r24	; 0x05
    3f62:	0f c0       	rjmp	.+30     	; 0x3f82 <receive_char+0x358>
    3f64:	88 ec       	ldi	r24, 0xC8	; 200
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	9c 83       	std	Y+4, r25	; 0x04
    3f6a:	8b 83       	std	Y+3, r24	; 0x03
    3f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f70:	01 97       	sbiw	r24, 0x01	; 1
    3f72:	f1 f7       	brne	.-4      	; 0x3f70 <receive_char+0x346>
    3f74:	9c 83       	std	Y+4, r25	; 0x04
    3f76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f78:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7c:	01 97       	sbiw	r24, 0x01	; 1
    3f7e:	9e 83       	std	Y+6, r25	; 0x06
    3f80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f82:	8d 81       	ldd	r24, Y+5	; 0x05
    3f84:	9e 81       	ldd	r25, Y+6	; 0x06
    3f86:	00 97       	sbiw	r24, 0x00	; 0
    3f88:	69 f7       	brne	.-38     	; 0x3f64 <receive_char+0x33a>
    3f8a:	14 c0       	rjmp	.+40     	; 0x3fb4 <receive_char+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8e:	78 85       	ldd	r23, Y+8	; 0x08
    3f90:	89 85       	ldd	r24, Y+9	; 0x09
    3f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	9e 83       	std	Y+6, r25	; 0x06
    3f9e:	8d 83       	std	Y+5, r24	; 0x05
    3fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa4:	9a 83       	std	Y+2, r25	; 0x02
    3fa6:	89 83       	std	Y+1, r24	; 0x01
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	9a 81       	ldd	r25, Y+2	; 0x02
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	f1 f7       	brne	.-4      	; 0x3fac <receive_char+0x382>
    3fb0:	9a 83       	std	Y+2, r25	; 0x02
    3fb2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		disable_tx();
    3fb4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <disable_tx>

	}
}
    3fb8:	aa 96       	adiw	r28, 0x2a	; 42
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <__mulsi3>:
    3fca:	62 9f       	mul	r22, r18
    3fcc:	d0 01       	movw	r26, r0
    3fce:	73 9f       	mul	r23, r19
    3fd0:	f0 01       	movw	r30, r0
    3fd2:	82 9f       	mul	r24, r18
    3fd4:	e0 0d       	add	r30, r0
    3fd6:	f1 1d       	adc	r31, r1
    3fd8:	64 9f       	mul	r22, r20
    3fda:	e0 0d       	add	r30, r0
    3fdc:	f1 1d       	adc	r31, r1
    3fde:	92 9f       	mul	r25, r18
    3fe0:	f0 0d       	add	r31, r0
    3fe2:	83 9f       	mul	r24, r19
    3fe4:	f0 0d       	add	r31, r0
    3fe6:	74 9f       	mul	r23, r20
    3fe8:	f0 0d       	add	r31, r0
    3fea:	65 9f       	mul	r22, r21
    3fec:	f0 0d       	add	r31, r0
    3fee:	99 27       	eor	r25, r25
    3ff0:	72 9f       	mul	r23, r18
    3ff2:	b0 0d       	add	r27, r0
    3ff4:	e1 1d       	adc	r30, r1
    3ff6:	f9 1f       	adc	r31, r25
    3ff8:	63 9f       	mul	r22, r19
    3ffa:	b0 0d       	add	r27, r0
    3ffc:	e1 1d       	adc	r30, r1
    3ffe:	f9 1f       	adc	r31, r25
    4000:	bd 01       	movw	r22, r26
    4002:	cf 01       	movw	r24, r30
    4004:	11 24       	eor	r1, r1
    4006:	08 95       	ret

00004008 <__udivmodsi4>:
    4008:	a1 e2       	ldi	r26, 0x21	; 33
    400a:	1a 2e       	mov	r1, r26
    400c:	aa 1b       	sub	r26, r26
    400e:	bb 1b       	sub	r27, r27
    4010:	fd 01       	movw	r30, r26
    4012:	0d c0       	rjmp	.+26     	; 0x402e <__udivmodsi4_ep>

00004014 <__udivmodsi4_loop>:
    4014:	aa 1f       	adc	r26, r26
    4016:	bb 1f       	adc	r27, r27
    4018:	ee 1f       	adc	r30, r30
    401a:	ff 1f       	adc	r31, r31
    401c:	a2 17       	cp	r26, r18
    401e:	b3 07       	cpc	r27, r19
    4020:	e4 07       	cpc	r30, r20
    4022:	f5 07       	cpc	r31, r21
    4024:	20 f0       	brcs	.+8      	; 0x402e <__udivmodsi4_ep>
    4026:	a2 1b       	sub	r26, r18
    4028:	b3 0b       	sbc	r27, r19
    402a:	e4 0b       	sbc	r30, r20
    402c:	f5 0b       	sbc	r31, r21

0000402e <__udivmodsi4_ep>:
    402e:	66 1f       	adc	r22, r22
    4030:	77 1f       	adc	r23, r23
    4032:	88 1f       	adc	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	1a 94       	dec	r1
    4038:	69 f7       	brne	.-38     	; 0x4014 <__udivmodsi4_loop>
    403a:	60 95       	com	r22
    403c:	70 95       	com	r23
    403e:	80 95       	com	r24
    4040:	90 95       	com	r25
    4042:	9b 01       	movw	r18, r22
    4044:	ac 01       	movw	r20, r24
    4046:	bd 01       	movw	r22, r26
    4048:	cf 01       	movw	r24, r30
    404a:	08 95       	ret

0000404c <__prologue_saves__>:
    404c:	2f 92       	push	r2
    404e:	3f 92       	push	r3
    4050:	4f 92       	push	r4
    4052:	5f 92       	push	r5
    4054:	6f 92       	push	r6
    4056:	7f 92       	push	r7
    4058:	8f 92       	push	r8
    405a:	9f 92       	push	r9
    405c:	af 92       	push	r10
    405e:	bf 92       	push	r11
    4060:	cf 92       	push	r12
    4062:	df 92       	push	r13
    4064:	ef 92       	push	r14
    4066:	ff 92       	push	r15
    4068:	0f 93       	push	r16
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	ca 1b       	sub	r28, r26
    4076:	db 0b       	sbc	r29, r27
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	09 94       	ijmp

00004084 <__epilogue_restores__>:
    4084:	2a 88       	ldd	r2, Y+18	; 0x12
    4086:	39 88       	ldd	r3, Y+17	; 0x11
    4088:	48 88       	ldd	r4, Y+16	; 0x10
    408a:	5f 84       	ldd	r5, Y+15	; 0x0f
    408c:	6e 84       	ldd	r6, Y+14	; 0x0e
    408e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4090:	8c 84       	ldd	r8, Y+12	; 0x0c
    4092:	9b 84       	ldd	r9, Y+11	; 0x0b
    4094:	aa 84       	ldd	r10, Y+10	; 0x0a
    4096:	b9 84       	ldd	r11, Y+9	; 0x09
    4098:	c8 84       	ldd	r12, Y+8	; 0x08
    409a:	df 80       	ldd	r13, Y+7	; 0x07
    409c:	ee 80       	ldd	r14, Y+6	; 0x06
    409e:	fd 80       	ldd	r15, Y+5	; 0x05
    40a0:	0c 81       	ldd	r16, Y+4	; 0x04
    40a2:	1b 81       	ldd	r17, Y+3	; 0x03
    40a4:	aa 81       	ldd	r26, Y+2	; 0x02
    40a6:	b9 81       	ldd	r27, Y+1	; 0x01
    40a8:	ce 0f       	add	r28, r30
    40aa:	d1 1d       	adc	r29, r1
    40ac:	0f b6       	in	r0, 0x3f	; 63
    40ae:	f8 94       	cli
    40b0:	de bf       	out	0x3e, r29	; 62
    40b2:	0f be       	out	0x3f, r0	; 63
    40b4:	cd bf       	out	0x3d, r28	; 61
    40b6:	ed 01       	movw	r28, r26
    40b8:	08 95       	ret

000040ba <_exit>:
    40ba:	f8 94       	cli

000040bc <__stop_program>:
    40bc:	ff cf       	rjmp	.-2      	; 0x40bc <__stop_program>
