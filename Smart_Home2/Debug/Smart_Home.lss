
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  000046a4  00004738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800132  00800132  0000480a  2**0
                  ALLOC
  3 .stab         00004710  00000000  00000000  0000480c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017e6  00000000  00000000  00008f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a702  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a842  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e294  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e681  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 26 19 	jmp	0x324c	; 0x324c <__vector_6>
      1c:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__vector_7>
      20:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__vector_8>
      24:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__vector_13>
      38:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__vector_14>
      3c:	0c 94 36 1a 	jmp	0x346c	; 0x346c <__vector_15>
      40:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 35       	cpi	r26, 0x59	; 89
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 86 1a 	call	0x350c	; 0x350c <main>
      8a:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 23 	jmp	0x4632	; 0x4632 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e1       	ldi	r26, 0x17	; 23
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 23 	jmp	0x466a	; 0x466a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 23 	jmp	0x464a	; 0x464a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 23 	jmp	0x464a	; 0x464a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 23 	jmp	0x4632	; 0x4632 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e1       	ldi	r24, 0x17	; 23
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 23 	jmp	0x466a	; 0x466a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 23 	jmp	0x464a	; 0x464a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 23 	jmp	0x464a	; 0x464a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 23 	jmp	0x464a	; 0x464a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 23 	jmp	0x468a	; 0x468a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_vidInit>:
#include "ADC_Priv.h"
#include"ADC_Int.h"
#include"ADC_Cfg.h"
static void (*ADC_ISR_PTR)(void)=NULL;//=NULL
void ADC_vidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADMUX=(ADC_VREF<< REFS0)|(RES_ADJ << ADLAR);
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 e4       	ldi	r24, 0x40	; 64
     b54:	80 83       	st	Z, r24
	ADCSRA=(1<<ADEN)|(1<<ADP52)|(1<<ADP51)|(1<<ADP50);
     b56:	e6 e2       	ldi	r30, 0x26	; 38
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	87 e8       	ldi	r24, 0x87	; 135
     b5c:	80 83       	st	Z, r24

#if (ADC_MOD==ADC_INT)
	SET_BIT(ADCSRA,ADIE);
     b5e:	a6 e2       	ldi	r26, 0x26	; 38
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e6 e2       	ldi	r30, 0x26	; 38
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	88 60       	ori	r24, 0x08	; 8
     b6a:	8c 93       	st	X, r24
	//ADCSRA=(1<<ADEN)|(1<<ADP52)|(1<<ADP51)|(1<<ADP50)|(1<<ADIE);
#endif
}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <ADC_getReading>:

u16 ADC_getReading(u8 ChId)//chId ->channel which i select (7 channels)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	0f 92       	push	r0
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	89 83       	std	Y+1, r24	; 0x01
	ChId = ChId & 0b00000111;//masking (prevent user from entering any value greater than 7)
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	87 70       	andi	r24, 0x07	; 7
     b82:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = ( ADMUX & 0xF8)|ChId;//11111011|110=11111111
     b84:	a7 e2       	ldi	r26, 0x27	; 39
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e7 e2       	ldi	r30, 0x27	; 39
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	98 2f       	mov	r25, r24
     b90:	98 7f       	andi	r25, 0xF8	; 248
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	89 2b       	or	r24, r25
     b96:	8c 93       	st	X, r24
	ADCSRA=(1<<ADEN)|(1<<ADSC);
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	80 83       	st	Z, r24
	while((GET_BIT(ADCSRA,ADIF))==0);//stuck in this loop until flag==1
     ba0:	e6 e2       	ldi	r30, 0x26	; 38
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	82 95       	swap	r24
     ba8:	8f 70       	andi	r24, 0x0F	; 15
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	a9 f3       	breq	.-22     	; 0xba0 <ADC_getReading+0x2e>
    return ADC_REG;
     bb6:	e4 e2       	ldi	r30, 0x24	; 36
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
}
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <ADC_StartConversion>:
#if (ADC_MOD==ADC_INT)
void ADC_StartConversion(u8 ChId)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	89 83       	std	Y+1, r24	; 0x01
	ChId = ChId & 0b00000111;
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	87 70       	andi	r24, 0x07	; 7
     bd6:	89 83       	std	Y+1, r24	; 0x01
		ADMUX = ( ADMUX & 0xF8)|ChId;
     bd8:	a7 e2       	ldi	r26, 0x27	; 39
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e2       	ldi	r30, 0x27	; 39
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	98 2f       	mov	r25, r24
     be4:	98 7f       	andi	r25, 0xF8	; 248
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	89 2b       	or	r24, r25
     bea:	8c 93       	st	X, r24
		ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADIE);
     bec:	e6 e2       	ldi	r30, 0x26	; 38
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	88 ec       	ldi	r24, 0xC8	; 200
     bf2:	80 83       	st	Z, r24
	}
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <ADC_GetConvertedDig>:
u16 ADC_GetConvertedDig(void)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62

	return ADC_REG;
     c04:	e4 e2       	ldi	r30, 0x24	; 36
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
	}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <ACD_vidSetISR>:
void ACD_vidSetISR(void (*p)(void))
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <ACD_vidSetISR+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	ADC_ISR_PTR=p;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	90 93 33 01 	sts	0x0133, r25
     c28:	80 93 32 01 	sts	0x0132, r24
	}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <__vector_16>:
//	}
#endif


void __vector_16 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_16 (void){
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
	ADC_ISR_PTR();
     c60:	e0 91 32 01 	lds	r30, 0x0132
     c64:	f0 91 33 01 	lds	r31, 0x0133
     c68:	09 95       	icall
}
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <DIO_vidsetPinval>:
#include "DIO_Interface.h"
#include "DIO_private.h"


void DIO_vidsetPinval(u8 PortId,u8 PinId,u8 val)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	27 97       	sbiw	r28, 0x07	; 7
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6a 83       	std	Y+2, r22	; 0x02
     ca8:	4b 83       	std	Y+3, r20	; 0x03
if ((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	84 30       	cpi	r24, 0x04	; 4
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <DIO_vidsetPinval+0x22>
     cb0:	ee c0       	rjmp	.+476    	; 0xe8e <DIO_vidsetPinval+0x1fe>
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f0       	brcs	.+2      	; 0xcba <DIO_vidsetPinval+0x2a>
     cb8:	ea c0       	rjmp	.+468    	; 0xe8e <DIO_vidsetPinval+0x1fe>
{
	if(val== DIO_LOW)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 23       	and	r24, r24
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <DIO_vidsetPinval+0x32>
     cc0:	74 c0       	rjmp	.+232    	; 0xdaa <DIO_vidsetPinval+0x11a>
	{
		switch (PortId)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3f 83       	std	Y+7, r19	; 0x07
     cca:	2e 83       	std	Y+6, r18	; 0x06
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	59 f1       	breq	.+86     	; 0xd2c <DIO_vidsetPinval+0x9c>
     cd6:	2e 81       	ldd	r18, Y+6	; 0x06
     cd8:	3f 81       	ldd	r19, Y+7	; 0x07
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	2c f4       	brge	.+10     	; 0xcea <DIO_vidsetPinval+0x5a>
     ce0:	8e 81       	ldd	r24, Y+6	; 0x06
     ce2:	9f 81       	ldd	r25, Y+7	; 0x07
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	69 f0       	breq	.+26     	; 0xd02 <DIO_vidsetPinval+0x72>
     ce8:	d2 c0       	rjmp	.+420    	; 0xe8e <DIO_vidsetPinval+0x1fe>
     cea:	2e 81       	ldd	r18, Y+6	; 0x06
     cec:	3f 81       	ldd	r19, Y+7	; 0x07
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	89 f1       	breq	.+98     	; 0xd56 <DIO_vidsetPinval+0xc6>
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	9f 81       	ldd	r25, Y+7	; 0x07
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <DIO_vidsetPinval+0x70>
     cfe:	40 c0       	rjmp	.+128    	; 0xd80 <DIO_vidsetPinval+0xf0>
     d00:	c6 c0       	rjmp	.+396    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		{
		case DIO_PORTA:CLR_BIT(PORTA_REG,PinId); break;
     d02:	ab e3       	ldi	r26, 0x3B	; 59
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	eb e3       	ldi	r30, 0x3B	; 59
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_vidsetPinval+0x90>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_vidsetPinval+0x8c>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	b1 c0       	rjmp	.+354    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTB:CLR_BIT(PORTB_REG,PinId); break;
     d2c:	a8 e3       	ldi	r26, 0x38	; 56
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e3       	ldi	r30, 0x38	; 56
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_vidsetPinval+0xba>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_vidsetPinval+0xb6>
     d4e:	80 95       	com	r24
     d50:	84 23       	and	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	9c c0       	rjmp	.+312    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTC:CLR_BIT(PORTC_REG,PinId); break;
     d56:	a5 e3       	ldi	r26, 0x35	; 53
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e3       	ldi	r30, 0x35	; 53
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_vidsetPinval+0xe4>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_vidsetPinval+0xe0>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	87 c0       	rjmp	.+270    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTD:CLR_BIT(PORTD_REG,PinId); break;
     d80:	a2 e3       	ldi	r26, 0x32	; 50
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e2 e3       	ldi	r30, 0x32	; 50
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_vidsetPinval+0x10e>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_vidsetPinval+0x10a>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	72 c0       	rjmp	.+228    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		}
	}
	else if(val== DIO_HIGH){
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <DIO_vidsetPinval+0x122>
     db0:	6e c0       	rjmp	.+220    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		switch (PortId)
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	3d 83       	std	Y+5, r19	; 0x05
     dba:	2c 83       	std	Y+4, r18	; 0x04
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	49 f1       	breq	.+82     	; 0xe18 <DIO_vidsetPinval+0x188>
     dc6:	2c 81       	ldd	r18, Y+4	; 0x04
     dc8:	3d 81       	ldd	r19, Y+5	; 0x05
     dca:	22 30       	cpi	r18, 0x02	; 2
     dcc:	31 05       	cpc	r19, r1
     dce:	2c f4       	brge	.+10     	; 0xdda <DIO_vidsetPinval+0x14a>
     dd0:	8c 81       	ldd	r24, Y+4	; 0x04
     dd2:	9d 81       	ldd	r25, Y+5	; 0x05
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	61 f0       	breq	.+24     	; 0xdf0 <DIO_vidsetPinval+0x160>
     dd8:	5a c0       	rjmp	.+180    	; 0xe8e <DIO_vidsetPinval+0x1fe>
     dda:	2c 81       	ldd	r18, Y+4	; 0x04
     ddc:	3d 81       	ldd	r19, Y+5	; 0x05
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	31 05       	cpc	r19, r1
     de2:	71 f1       	breq	.+92     	; 0xe40 <DIO_vidsetPinval+0x1b0>
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	91 05       	cpc	r25, r1
     dec:	e9 f1       	breq	.+122    	; 0xe68 <DIO_vidsetPinval+0x1d8>
     dee:	4f c0       	rjmp	.+158    	; 0xe8e <DIO_vidsetPinval+0x1fe>
				{
        case DIO_PORTA:SET_BIT(PORTA_REG,PinId); break;
     df0:	ab e3       	ldi	r26, 0x3B	; 59
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	eb e3       	ldi	r30, 0x3B	; 59
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_vidsetPinval+0x17e>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_vidsetPinval+0x17a>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	3b c0       	rjmp	.+118    	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTB:SET_BIT(PORTB_REG,PinId); break;
     e18:	a8 e3       	ldi	r26, 0x38	; 56
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e8 e3       	ldi	r30, 0x38	; 56
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_vidsetPinval+0x1a6>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_vidsetPinval+0x1a2>
     e3a:	84 2b       	or	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	27 c0       	rjmp	.+78     	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTC:SET_BIT(PORTC_REG,PinId); break;
     e40:	a5 e3       	ldi	r26, 0x35	; 53
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e5 e3       	ldi	r30, 0x35	; 53
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_vidsetPinval+0x1ce>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_vidsetPinval+0x1ca>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	13 c0       	rjmp	.+38     	; 0xe8e <DIO_vidsetPinval+0x1fe>
		case DIO_PORTD:SET_BIT(PORTD_REG,PinId); break;
     e68:	a2 e3       	ldi	r26, 0x32	; 50
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e2 e3       	ldi	r30, 0x32	; 50
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_vidsetPinval+0x1f6>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_vidsetPinval+0x1f2>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
	{
	// report error
	}


}
     e8e:	27 96       	adiw	r28, 0x07	; 7
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <DIO_vidsetPinDir>:
void DIO_vidsetPinDir(u8 PortId,u8 PinId,u8 dir){
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	27 97       	sbiw	r28, 0x07	; 7
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6a 83       	std	Y+2, r22	; 0x02
     eb8:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <DIO_vidsetPinDir+0x22>
     ec0:	ee c0       	rjmp	.+476    	; 0x109e <DIO_vidsetPinDir+0x1fe>
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	88 30       	cpi	r24, 0x08	; 8
     ec6:	08 f0       	brcs	.+2      	; 0xeca <DIO_vidsetPinDir+0x2a>
     ec8:	ea c0       	rjmp	.+468    	; 0x109e <DIO_vidsetPinDir+0x1fe>
	{
		if(dir== DIO_INPUT)
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	88 23       	and	r24, r24
     ece:	09 f0       	breq	.+2      	; 0xed2 <DIO_vidsetPinDir+0x32>
     ed0:	74 c0       	rjmp	.+232    	; 0xfba <DIO_vidsetPinDir+0x11a>
		{
			switch (PortId)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3f 83       	std	Y+7, r19	; 0x07
     eda:	2e 83       	std	Y+6, r18	; 0x06
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	59 f1       	breq	.+86     	; 0xf3c <DIO_vidsetPinDir+0x9c>
     ee6:	2e 81       	ldd	r18, Y+6	; 0x06
     ee8:	3f 81       	ldd	r19, Y+7	; 0x07
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	2c f4       	brge	.+10     	; 0xefa <DIO_vidsetPinDir+0x5a>
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	69 f0       	breq	.+26     	; 0xf12 <DIO_vidsetPinDir+0x72>
     ef8:	d2 c0       	rjmp	.+420    	; 0x109e <DIO_vidsetPinDir+0x1fe>
     efa:	2e 81       	ldd	r18, Y+6	; 0x06
     efc:	3f 81       	ldd	r19, Y+7	; 0x07
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	89 f1       	breq	.+98     	; 0xf66 <DIO_vidsetPinDir+0xc6>
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <DIO_vidsetPinDir+0x70>
     f0e:	40 c0       	rjmp	.+128    	; 0xf90 <DIO_vidsetPinDir+0xf0>
     f10:	c6 c0       	rjmp	.+396    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			{
			case DIO_PORTA:CLR_BIT(DDRA_REG,PinId); break;
     f12:	aa e3       	ldi	r26, 0x3A	; 58
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e3       	ldi	r30, 0x3A	; 58
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_vidsetPinDir+0x90>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_vidsetPinDir+0x8c>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	b1 c0       	rjmp	.+354    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			case DIO_PORTB:CLR_BIT(DDRB_REG,PinId); break;
     f3c:	a7 e3       	ldi	r26, 0x37	; 55
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e7 e3       	ldi	r30, 0x37	; 55
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_vidsetPinDir+0xba>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_vidsetPinDir+0xb6>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	9c c0       	rjmp	.+312    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			case DIO_PORTC:CLR_BIT(DDRC_REG,PinId); break;
     f66:	a4 e3       	ldi	r26, 0x34	; 52
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e3       	ldi	r30, 0x34	; 52
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_vidsetPinDir+0xe4>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_vidsetPinDir+0xe0>
     f88:	80 95       	com	r24
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	87 c0       	rjmp	.+270    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			case DIO_PORTD:CLR_BIT(DDRD_REG,PinId); break;
     f90:	a1 e3       	ldi	r26, 0x31	; 49
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_vidsetPinDir+0x10e>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_vidsetPinDir+0x10a>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	72 c0       	rjmp	.+228    	; 0x109e <DIO_vidsetPinDir+0x1fe>
			}
		}
		else if(dir== DIO_OUTPUT){
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <DIO_vidsetPinDir+0x122>
     fc0:	6e c0       	rjmp	.+220    	; 0x109e <DIO_vidsetPinDir+0x1fe>
				switch (PortId)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	3d 83       	std	Y+5, r19	; 0x05
     fca:	2c 83       	std	Y+4, r18	; 0x04
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	91 05       	cpc	r25, r1
     fd4:	49 f1       	breq	.+82     	; 0x1028 <DIO_vidsetPinDir+0x188>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	2c f4       	brge	.+10     	; 0xfea <DIO_vidsetPinDir+0x14a>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	61 f0       	breq	.+24     	; 0x1000 <DIO_vidsetPinDir+0x160>
     fe8:	5a c0       	rjmp	.+180    	; 0x109e <DIO_vidsetPinDir+0x1fe>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	71 f1       	breq	.+92     	; 0x1050 <DIO_vidsetPinDir+0x1b0>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	e9 f1       	breq	.+122    	; 0x1078 <DIO_vidsetPinDir+0x1d8>
     ffe:	4f c0       	rjmp	.+158    	; 0x109e <DIO_vidsetPinDir+0x1fe>
						{
		        case DIO_PORTA:SET_BIT(DDRA_REG,PinId); break;
    1000:	aa e3       	ldi	r26, 0x3A	; 58
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e3       	ldi	r30, 0x3A	; 58
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_vidsetPinDir+0x17e>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_vidsetPinDir+0x17a>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	3b c0       	rjmp	.+118    	; 0x109e <DIO_vidsetPinDir+0x1fe>
				case DIO_PORTB:SET_BIT(DDRB_REG,PinId); break;
    1028:	a7 e3       	ldi	r26, 0x37	; 55
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e7 e3       	ldi	r30, 0x37	; 55
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_vidsetPinDir+0x1a6>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_vidsetPinDir+0x1a2>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	27 c0       	rjmp	.+78     	; 0x109e <DIO_vidsetPinDir+0x1fe>
				case DIO_PORTC:SET_BIT(DDRC_REG,PinId); break;
    1050:	a4 e3       	ldi	r26, 0x34	; 52
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e4 e3       	ldi	r30, 0x34	; 52
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_vidsetPinDir+0x1ce>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_vidsetPinDir+0x1ca>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	13 c0       	rjmp	.+38     	; 0x109e <DIO_vidsetPinDir+0x1fe>
				case DIO_PORTD:SET_BIT(DDRD_REG,PinId); break;
    1078:	a1 e3       	ldi	r26, 0x31	; 49
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e3       	ldi	r30, 0x31	; 49
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_vidsetPinDir+0x1f6>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_vidsetPinDir+0x1f2>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
		// report error
		}



}
    109e:	27 96       	adiw	r28, 0x07	; 7
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <DIO_vidsetPortval>:
void DIO_vidsetPortval(u8 PortId,u8 val){
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_vidsetPortval+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <DIO_vidsetPortval+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <DIO_vidsetPortval+0x7a>
		switch (PortId)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <DIO_vidsetPortval+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_vidsetPortval+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_vidsetPortval+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <DIO_vidsetPortval+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <DIO_vidsetPortval+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <DIO_vidsetPortval+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <DIO_vidsetPortval+0x7a>
								{
				        case DIO_PORTA:PORTA_REG=val ; break;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <DIO_vidsetPortval+0x7a>
						case DIO_PORTB:PORTB_REG=val ; break;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <DIO_vidsetPortval+0x7a>
						case DIO_PORTC:PORTC_REG=val ; break;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <DIO_vidsetPortval+0x7a>
						case DIO_PORTD:PORTD_REG=val ; break;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
	}
	else
			{
			// report error
			}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <DIO_vidsetPORTD_REGir>:
void DIO_vidsetPORTD_REGir(u8 PortId,u8 dir){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_vidsetPORTD_REGir+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_vidsetPORTD_REGir+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
			switch (PortId)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <DIO_vidsetPORTD_REGir+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_vidsetPORTD_REGir+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <DIO_vidsetPORTD_REGir+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <DIO_vidsetPORTD_REGir+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <DIO_vidsetPORTD_REGir+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
									{
					        case DIO_PORTA:DDRA_REG=dir ; break;
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
							case DIO_PORTB:DDRB_REG=dir ; break;
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
							case DIO_PORTC:DDRC_REG=dir ; break;
    11a0:	e4 e3       	ldi	r30, 0x34	; 52
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <DIO_vidsetPORTD_REGir+0x7a>
							case DIO_PORTD:DDRD_REG=dir ; break;
    11aa:	e1 e3       	ldi	r30, 0x31	; 49
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
	else
			{
			// report error
			}

}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_vidsetPortDir>:
void DIO_vidsetPortDir(u8 PortId,u8 dir){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <DIO_vidsetPortDir+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_vidsetPortDir+0x8>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	90 f5       	brcc	.+100    	; 0x123a <DIO_vidsetPortDir+0x7a>
			switch (PortId)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3c 83       	std	Y+4, r19	; 0x04
    11de:	2b 83       	std	Y+3, r18	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	d1 f0       	breq	.+52     	; 0x121e <DIO_vidsetPortDir+0x5e>
    11ea:	2b 81       	ldd	r18, Y+3	; 0x03
    11ec:	3c 81       	ldd	r19, Y+4	; 0x04
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	2c f4       	brge	.+10     	; 0x11fe <DIO_vidsetPortDir+0x3e>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	61 f0       	breq	.+24     	; 0x1214 <DIO_vidsetPortDir+0x54>
    11fc:	1e c0       	rjmp	.+60     	; 0x123a <DIO_vidsetPortDir+0x7a>
    11fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1200:	3c 81       	ldd	r19, Y+4	; 0x04
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	81 f0       	breq	.+32     	; 0x1228 <DIO_vidsetPortDir+0x68>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	91 05       	cpc	r25, r1
    1210:	81 f0       	breq	.+32     	; 0x1232 <DIO_vidsetPortDir+0x72>
    1212:	13 c0       	rjmp	.+38     	; 0x123a <DIO_vidsetPortDir+0x7a>
									{
					        case DIO_PORTA:DDRA_REG=dir ; break;
    1214:	ea e3       	ldi	r30, 0x3A	; 58
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	80 83       	st	Z, r24
    121c:	0e c0       	rjmp	.+28     	; 0x123a <DIO_vidsetPortDir+0x7a>
							case DIO_PORTB:DDRB_REG=dir ; break;
    121e:	e7 e3       	ldi	r30, 0x37	; 55
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 83       	st	Z, r24
    1226:	09 c0       	rjmp	.+18     	; 0x123a <DIO_vidsetPortDir+0x7a>
							case DIO_PORTC:DDRC_REG=dir ; break;
    1228:	e4 e3       	ldi	r30, 0x34	; 52
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	80 83       	st	Z, r24
    1230:	04 c0       	rjmp	.+8      	; 0x123a <DIO_vidsetPortDir+0x7a>
							case DIO_PORTD:DDRD_REG=dir ; break;
    1232:	e1 e3       	ldi	r30, 0x31	; 49
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 83       	st	Z, r24
	else
			{
			// report error
			}

}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <DIO_vidsetPortval_LowNibble>:
void DIO_vidsetPortval_LowNibble(u8 PortId,u8 val){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_vidsetPortval_LowNibble+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <DIO_vidsetPortval_LowNibble+0x8>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId<=DIO_PORTD){
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	90 f5       	brcc	.+100    	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
		switch (PortId)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3c 83       	std	Y+4, r19	; 0x04
    1266:	2b 83       	std	Y+3, r18	; 0x03
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	d1 f0       	breq	.+52     	; 0x12a6 <DIO_vidsetPortval_LowNibble+0x5e>
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	3c 81       	ldd	r19, Y+4	; 0x04
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	2c f4       	brge	.+10     	; 0x1286 <DIO_vidsetPortval_LowNibble+0x3e>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	61 f0       	breq	.+24     	; 0x129c <DIO_vidsetPortval_LowNibble+0x54>
    1284:	1e c0       	rjmp	.+60     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <DIO_vidsetPortval_LowNibble+0x68>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	81 f0       	breq	.+32     	; 0x12ba <DIO_vidsetPortval_LowNibble+0x72>
    129a:	13 c0       	rjmp	.+38     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
								{
				        case DIO_PORTA:PORTA_REG=(val) ; break;
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	0e c0       	rjmp	.+28     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
						case DIO_PORTB:PORTB_REG=(val) ; break;
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
						case DIO_PORTC:PORTC_REG=(val); break;
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <DIO_vidsetPortval_LowNibble+0x7a>
						case DIO_PORTD:PORTD_REG=(val) ; break;
    12ba:	e2 e3       	ldi	r30, 0x32	; 50
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
	}
	else
			{
			// report error
			}
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 PortId,u8 PinId)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <DIO_u8GetPinVal+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_u8GetPinVal+0x8>
    12d8:	0f 92       	push	r0
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	8a 83       	std	Y+2, r24	; 0x02
    12e0:	6b 83       	std	Y+3, r22	; 0x03
u8 ret_val =255;//default for check error
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	89 83       	std	Y+1, r24	; 0x01
 if((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <DIO_u8GetPinVal+0x1e>
    12ec:	6b c0       	rjmp	.+214    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 30       	cpi	r24, 0x08	; 8
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <DIO_u8GetPinVal+0x26>
    12f4:	67 c0       	rjmp	.+206    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
 {
switch (PortId)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3d 83       	std	Y+5, r19	; 0x05
    12fe:	2c 83       	std	Y+4, r18	; 0x04
    1300:	4c 81       	ldd	r20, Y+4	; 0x04
    1302:	5d 81       	ldd	r21, Y+5	; 0x05
    1304:	41 30       	cpi	r20, 0x01	; 1
    1306:	51 05       	cpc	r21, r1
    1308:	41 f1       	breq	.+80     	; 0x135a <DIO_u8GetPinVal+0x8a>
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	91 05       	cpc	r25, r1
    1312:	34 f4       	brge	.+12     	; 0x1320 <DIO_u8GetPinVal+0x50>
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	61 f0       	breq	.+24     	; 0x1336 <DIO_u8GetPinVal+0x66>
    131e:	52 c0       	rjmp	.+164    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
    1320:	4c 81       	ldd	r20, Y+4	; 0x04
    1322:	5d 81       	ldd	r21, Y+5	; 0x05
    1324:	42 30       	cpi	r20, 0x02	; 2
    1326:	51 05       	cpc	r21, r1
    1328:	51 f1       	breq	.+84     	; 0x137e <DIO_u8GetPinVal+0xae>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	b9 f1       	breq	.+110    	; 0x13a2 <DIO_u8GetPinVal+0xd2>
    1334:	47 c0       	rjmp	.+142    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			{
			 case DIO_PORTA:ret_val=GET_BIT(PINA_REG,PinId) ; break;
    1336:	e9 e3       	ldi	r30, 0x39	; 57
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_u8GetPinVal+0x7e>
    134a:	55 95       	asr	r21
    134c:	47 95       	ror	r20
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_u8GetPinVal+0x7a>
    1352:	ca 01       	movw	r24, r20
    1354:	81 70       	andi	r24, 0x01	; 1
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	35 c0       	rjmp	.+106    	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			 case DIO_PORTB:ret_val=GET_BIT(PINB_REG,PinId); break;
    135a:	e6 e3       	ldi	r30, 0x36	; 54
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a9 01       	movw	r20, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_u8GetPinVal+0xa2>
    136e:	55 95       	asr	r21
    1370:	47 95       	ror	r20
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_u8GetPinVal+0x9e>
    1376:	ca 01       	movw	r24, r20
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	23 c0       	rjmp	.+70     	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			 case DIO_PORTC:ret_val=GET_BIT(PINC_REG,PinId); break;
    137e:	e3 e3       	ldi	r30, 0x33	; 51
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_u8GetPinVal+0xc6>
    1392:	55 95       	asr	r21
    1394:	47 95       	ror	r20
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_u8GetPinVal+0xc2>
    139a:	ca 01       	movw	r24, r20
    139c:	81 70       	andi	r24, 0x01	; 1
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	11 c0       	rjmp	.+34     	; 0x13c4 <DIO_u8GetPinVal+0xf4>
			 case DIO_PORTD:ret_val=GET_BIT(PIND_REG,PinId); break;
    13a2:	e0 e3       	ldi	r30, 0x30	; 48
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_u8GetPinVal+0xea>
    13b6:	55 95       	asr	r21
    13b8:	47 95       	ror	r20
    13ba:	8a 95       	dec	r24
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_u8GetPinVal+0xe6>
    13be:	ca 01       	movw	r24, r20
    13c0:	81 70       	andi	r24, 0x01	; 1
    13c2:	89 83       	std	Y+1, r24	; 0x01
 }
 else
 			{
 			// report error
 			}
 return ret_val;
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <GPIO_voidWriteLowNibble>:


void GPIO_voidWriteLowNibble(u8 copy_u8port,u8 copy_u8value)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_voidWriteLowNibble+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <GPIO_voidWriteLowNibble+0x8>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8value&=0x0f;
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	8f 70       	andi	r24, 0x0F	; 15
    13ea:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8port)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3c 83       	std	Y+4, r19	; 0x04
    13f4:	2b 83       	std	Y+3, r18	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	29 f1       	breq	.+74     	; 0x144a <GPIO_voidWriteLowNibble+0x74>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	2c f4       	brge	.+10     	; 0x1414 <GPIO_voidWriteLowNibble+0x3e>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	61 f0       	breq	.+24     	; 0x142a <GPIO_voidWriteLowNibble+0x54>
    1412:	4a c0       	rjmp	.+148    	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	31 f1       	breq	.+76     	; 0x146a <GPIO_voidWriteLowNibble+0x94>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	89 f1       	breq	.+98     	; 0x148a <GPIO_voidWriteLowNibble+0xb4>
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
	 {
	 case DIO_PORTA:
		PORTA_REG&=0xf0;
    142a:	ab e3       	ldi	r26, 0x3B	; 59
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e3       	ldi	r30, 0x3B	; 59
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 7f       	andi	r24, 0xF0	; 240
    1436:	8c 93       	st	X, r24
		PORTA_REG|=copy_u8value;
    1438:	ab e3       	ldi	r26, 0x3B	; 59
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e3       	ldi	r30, 0x3B	; 59
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	90 81       	ld	r25, Z
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	89 2b       	or	r24, r25
    1446:	8c 93       	st	X, r24
    1448:	2f c0       	rjmp	.+94     	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
		break;
	 case DIO_PORTB:
		PORTB_REG&=0xf0;
    144a:	a8 e3       	ldi	r26, 0x38	; 56
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e8 e3       	ldi	r30, 0x38	; 56
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 7f       	andi	r24, 0xF0	; 240
    1456:	8c 93       	st	X, r24
		PORTB_REG|=copy_u8value;
    1458:	a8 e3       	ldi	r26, 0x38	; 56
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e8 e3       	ldi	r30, 0x38	; 56
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	90 81       	ld	r25, Z
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	89 2b       	or	r24, r25
    1466:	8c 93       	st	X, r24
    1468:	1f c0       	rjmp	.+62     	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
		break;
	 case DIO_PORTC:
		PORTC_REG&=0xf0;
    146a:	a5 e3       	ldi	r26, 0x35	; 53
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 7f       	andi	r24, 0xF0	; 240
    1476:	8c 93       	st	X, r24
		PORTC_REG|=copy_u8value;
    1478:	a5 e3       	ldi	r26, 0x35	; 53
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	90 81       	ld	r25, Z
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	89 2b       	or	r24, r25
    1486:	8c 93       	st	X, r24
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <GPIO_voidWriteLowNibble+0xd2>
		break;
	 case DIO_PORTD:
		PORTD_REG&=0xf0;
    148a:	a2 e3       	ldi	r26, 0x32	; 50
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e2 e3       	ldi	r30, 0x32	; 50
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 7f       	andi	r24, 0xF0	; 240
    1496:	8c 93       	st	X, r24
		PORTD_REG|=copy_u8value;
    1498:	a2 e3       	ldi	r26, 0x32	; 50
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	90 81       	ld	r25, Z
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	89 2b       	or	r24, r25
    14a6:	8c 93       	st	X, r24
		break;
		default:
		  break;
	 }
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <GPIO_voidWriteHighNibble>:

void GPIO_voidWriteHighNibble(u8 copy_u8port,u8 copy_u8value)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_voidWriteHighNibble+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <GPIO_voidWriteHighNibble+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	6a 83       	std	Y+2, r22	; 0x02

	copy_u8value&=0xf0;
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 7f       	andi	r24, 0xF0	; 240
    14ca:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8port)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3c 83       	std	Y+4, r19	; 0x04
    14d4:	2b 83       	std	Y+3, r18	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	29 f1       	breq	.+74     	; 0x152a <GPIO_voidWriteHighNibble+0x74>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <GPIO_voidWriteHighNibble+0x3e>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <GPIO_voidWriteHighNibble+0x54>
    14f2:	4a c0       	rjmp	.+148    	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	31 f1       	breq	.+76     	; 0x154a <GPIO_voidWriteHighNibble+0x94>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	89 f1       	breq	.+98     	; 0x156a <GPIO_voidWriteHighNibble+0xb4>
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
	 {
	 case DIO_PORTA:
		PORTA_REG&=0x0f;
    150a:	ab e3       	ldi	r26, 0x3B	; 59
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e3       	ldi	r30, 0x3B	; 59
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 70       	andi	r24, 0x0F	; 15
    1516:	8c 93       	st	X, r24
		PORTA_REG|=copy_u8value;
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	90 81       	ld	r25, Z
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	89 2b       	or	r24, r25
    1526:	8c 93       	st	X, r24
    1528:	2f c0       	rjmp	.+94     	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
		break;
	 case DIO_PORTB:
		PORTB_REG&=0x0f;
    152a:	a8 e3       	ldi	r26, 0x38	; 56
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e8 e3       	ldi	r30, 0x38	; 56
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 70       	andi	r24, 0x0F	; 15
    1536:	8c 93       	st	X, r24
		PORTB_REG|=copy_u8value;
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	90 81       	ld	r25, Z
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	89 2b       	or	r24, r25
    1546:	8c 93       	st	X, r24
    1548:	1f c0       	rjmp	.+62     	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
		break;
	 case DIO_PORTC:
		PORTC_REG&=0x0f;
    154a:	a5 e3       	ldi	r26, 0x35	; 53
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e3       	ldi	r30, 0x35	; 53
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 70       	andi	r24, 0x0F	; 15
    1556:	8c 93       	st	X, r24
		PORTC_REG|=copy_u8value;
    1558:	a5 e3       	ldi	r26, 0x35	; 53
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e3       	ldi	r30, 0x35	; 53
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	90 81       	ld	r25, Z
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	89 2b       	or	r24, r25
    1566:	8c 93       	st	X, r24
    1568:	0f c0       	rjmp	.+30     	; 0x1588 <GPIO_voidWriteHighNibble+0xd2>
		break;
	 case DIO_PORTD:
		PORTD_REG&=0x0f;
    156a:	a2 e3       	ldi	r26, 0x32	; 50
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	8f 70       	andi	r24, 0x0F	; 15
    1576:	8c 93       	st	X, r24
		PORTD_REG|=copy_u8value;
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	90 81       	ld	r25, Z
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	89 2b       	or	r24, r25
    1586:	8c 93       	st	X, r24
		default:
		  break;
	 }


}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <GPIO_voidSetHighNibbleDDR>:
void GPIO_voidSetHighNibbleDDR(u8 copy_u8port,u8 copy_u8Mode)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <GPIO_voidSetHighNibbleDDR+0x6>
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	8a 83       	std	Y+2, r24	; 0x02
    15a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 counter;
	for(counter=4;counter<=7;counter++){
    15a6:	84 e0       	ldi	r24, 0x04	; 4
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <GPIO_voidSetHighNibbleDDR+0x26>
		DIO_vidsetPinDir(copy_u8port ,counter , copy_u8Mode);
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	69 81       	ldd	r22, Y+1	; 0x01
    15b0:	4b 81       	ldd	r20, Y+3	; 0x03
    15b2:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>

}
void GPIO_voidSetHighNibbleDDR(u8 copy_u8port,u8 copy_u8Mode)
{
	u8 counter;
	for(counter=4;counter<=7;counter++){
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	a8 f3       	brcs	.-22     	; 0x15ac <GPIO_voidSetHighNibbleDDR+0x16>
		DIO_vidsetPinDir(copy_u8port ,counter , copy_u8Mode);

	}
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <EEPROM_vRead>:
#include "EEPROM_private.h"
#include "EEPROM_config.h"


void EEPROM_vRead(u8 Copy_u8LocationAddress,u8 *Copy_pu8Data)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <EEPROM_vRead+0x6>
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	7b 83       	std	Y+3, r23	; 0x03
    15de:	6a 83       	std	Y+2, r22	; 0x02
	/* Start Condition */
	TWI_enStartCondition();
    15e0:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <TWI_enStartCondition>
	/*Send SLA With  Address */
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    15e4:	80 ea       	ldi	r24, 0xA0	; 160
    15e6:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <TWI_enSetSlaveAddressWithWrite>
	/*Send Memory location */
	TWI_enMasterWriteData(Copy_u8LocationAddress);
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <TWI_enMasterWriteData>
	/*Repeat Start to change Write operation to Read operation*/
	TWI_enRepeateStart();
    15f0:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <TWI_enRepeateStart>
	TWI_enSetSlaveAddressWithRead(SLAVE_ADDRESS);
    15f4:	80 ea       	ldi	r24, 0xA0	; 160
    15f6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <TWI_enSetSlaveAddressWithRead>
	/*Master Read Data*/
		TWI_enMasterReadData(Copy_pu8Data);
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <TWI_enMasterReadData>
		TWI_vStopCondition();
    1602:	0e 94 91 16 	call	0x2d22	; 0x2d22 <TWI_vStopCondition>
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <EEPROM_vWrite>:

void EEPROM_vWrite(u8 Copy_u8LocationAddress,u8 Copy_pu8Data)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	60 97       	sbiw	r28, 0x10	; 16
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	8f 87       	std	Y+15, r24	; 0x0f
    1628:	68 8b       	std	Y+16, r22	; 0x10
	/* Start Condition */
	TWI_enStartCondition();
    162a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <TWI_enStartCondition>

	/*Send SLA With  Address */
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    162e:	80 ea       	ldi	r24, 0xA0	; 160
    1630:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <TWI_enSetSlaveAddressWithWrite>
	/*Send Memory location */
	TWI_enMasterWriteData(Copy_u8LocationAddress);
    1634:	8f 85       	ldd	r24, Y+15	; 0x0f
    1636:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <TWI_enMasterWriteData>
	/*Master Send Data*/
	TWI_enMasterWriteData(Copy_pu8Data);
    163a:	88 89       	ldd	r24, Y+16	; 0x10
    163c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <TWI_enMasterWriteData>
	TWI_vStopCondition();
    1640:	0e 94 91 16 	call	0x2d22	; 0x2d22 <TWI_vStopCondition>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e2       	ldi	r26, 0x20	; 32
    164a:	b1 e4       	ldi	r27, 0x41	; 65
    164c:	8b 87       	std	Y+11, r24	; 0x0b
    164e:	9c 87       	std	Y+12, r25	; 0x0c
    1650:	ad 87       	std	Y+13, r26	; 0x0d
    1652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1654:	6b 85       	ldd	r22, Y+11	; 0x0b
    1656:	7c 85       	ldd	r23, Y+12	; 0x0c
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4a ef       	ldi	r20, 0xFA	; 250
    1662:	54 e4       	ldi	r21, 0x44	; 68
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8f 83       	std	Y+7, r24	; 0x07
    166e:	98 87       	std	Y+8, r25	; 0x08
    1670:	a9 87       	std	Y+9, r26	; 0x09
    1672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1688:	88 23       	and	r24, r24
    168a:	2c f4       	brge	.+10     	; 0x1696 <EEPROM_vWrite+0x84>
		__ticks = 1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	3f c0       	rjmp	.+126    	; 0x1714 <EEPROM_vWrite+0x102>
	else if (__tmp > 65535)
    1696:	6f 81       	ldd	r22, Y+7	; 0x07
    1698:	78 85       	ldd	r23, Y+8	; 0x08
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	3f ef       	ldi	r19, 0xFF	; 255
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	57 e4       	ldi	r21, 0x47	; 71
    16a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	4c f5       	brge	.+82     	; 0x1700 <EEPROM_vWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <EEPROM_vWrite+0xe4>
    16d8:	88 ec       	ldi	r24, 0xC8	; 200
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c 83       	std	Y+4, r25	; 0x04
    16de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <EEPROM_vWrite+0xd2>
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9e 83       	std	Y+6, r25	; 0x06
    16f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <EEPROM_vWrite+0xc6>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <EEPROM_vWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <EEPROM_vWrite+0x10e>
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);

}
    1728:	60 96       	adiw	r28, 0x10	; 16
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <Global_Interrupt_Enable>:
#include "utils.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1742:	af e5       	ldi	r26, 0x5F	; 95
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ef e5       	ldi	r30, 0x5F	; 95
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    175e:	af e5       	ldi	r26, 0x5F	; 95
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ef e5       	ldi	r30, 0x5F	; 95
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	8c 93       	st	X, r24
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <KPD_u8GetPressedKey>:
		{'1','2','3','-'},
		{'c','0','=','+'}
};

u8 KPD_u8GetPressedKey(void)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	61 97       	sbiw	r28, 0x11	; 17
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61

u8 u8SwVal=NOT_PRESSED;
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	89 8b       	std	Y+17, r24	; 0x11
u8 u8Col;
u8 u8Row;

for(u8Col=COL_BGN;u8Col<COL_NUM;u8Col++)
    178a:	18 8a       	std	Y+16, r1	; 0x10
    178c:	ab c0       	rjmp	.+342    	; 0x18e4 <KPD_u8GetPressedKey+0x172>
{
/*  Clear Column Pin */
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_LOW);
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	68 89       	ldd	r22, Y+16	; 0x10
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	for(u8Row=ROW_BGN;u8Row<(ROW_BGN+ROW_NUM);u8Row++)
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	8f 87       	std	Y+15, r24	; 0x0f
    179c:	97 c0       	rjmp	.+302    	; 0x18cc <KPD_u8GetPressedKey+0x15a>
	{
		if(DIO_u8GetPinVal(KPD_PORT,u8Row)==DIO_LOW)
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    17a2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_u8GetPinVal>
    17a6:	88 23       	and	r24, r24
    17a8:	09 f0       	breq	.+2      	; 0x17ac <KPD_u8GetPressedKey+0x3a>
    17aa:	8d c0       	rjmp	.+282    	; 0x18c6 <KPD_u8GetPressedKey+0x154>
		{
			u8SwVal = KPD_au8Array[u8Row-ROW_BGN][u8Col];
    17ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	ac 01       	movw	r20, r24
    17b4:	44 50       	subi	r20, 0x04	; 4
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	88 89       	ldd	r24, Y+16	; 0x10
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	ca 01       	movw	r24, r20
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	fc 01       	movw	r30, r24
    17ce:	ef 5d       	subi	r30, 0xDF	; 223
    17d0:	fe 4f       	sbci	r31, 0xFE	; 254
    17d2:	80 81       	ld	r24, Z
    17d4:	89 8b       	std	Y+17, r24	; 0x11
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e2       	ldi	r26, 0x20	; 32
    17dc:	b1 e4       	ldi	r27, 0x41	; 65
    17de:	8b 87       	std	Y+11, r24	; 0x0b
    17e0:	9c 87       	std	Y+12, r25	; 0x0c
    17e2:	ad 87       	std	Y+13, r26	; 0x0d
    17e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8f 83       	std	Y+7, r24	; 0x07
    1800:	98 87       	std	Y+8, r25	; 0x08
    1802:	a9 87       	std	Y+9, r26	; 0x09
    1804:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <KPD_u8GetPressedKey+0xb6>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <KPD_u8GetPressedKey+0x134>
	else if (__tmp > 65535)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <KPD_u8GetPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	6b 85       	ldd	r22, Y+11	; 0x0b
    1842:	7c 85       	ldd	r23, Y+12	; 0x0c
    1844:	8d 85       	ldd	r24, Y+13	; 0x0d
    1846:	9e 85       	ldd	r25, Y+14	; 0x0e
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <KPD_u8GetPressedKey+0x116>
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <KPD_u8GetPressedKey+0x104>
    187a:	9c 83       	std	Y+4, r25	; 0x04
    187c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <KPD_u8GetPressedKey+0xf8>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <KPD_u8GetPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <KPD_u8GetPressedKey+0x140>
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			while(DIO_u8GetPinVal(KPD_PORT,u8Row)==DIO_LOW);
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    18be:	0e 94 68 09 	call	0x12d0	; 0x12d0 <DIO_u8GetPinVal>
    18c2:	88 23       	and	r24, r24
    18c4:	d1 f3       	breq	.-12     	; 0x18ba <KPD_u8GetPressedKey+0x148>

for(u8Col=COL_BGN;u8Col<COL_NUM;u8Col++)
{
/*  Clear Column Pin */
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_LOW);
	for(u8Row=ROW_BGN;u8Row<(ROW_BGN+ROW_NUM);u8Row++)
    18c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	8f 87       	std	Y+15, r24	; 0x0f
    18cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <KPD_u8GetPressedKey+0x162>
    18d2:	65 cf       	rjmp	.-310    	; 0x179e <KPD_u8GetPressedKey+0x2c>
			_delay_ms(10);
			while(DIO_u8GetPinVal(KPD_PORT,u8Row)==DIO_LOW);

		}
	}
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_HIGH);
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	68 89       	ldd	r22, Y+16	; 0x10
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>

u8 u8SwVal=NOT_PRESSED;
u8 u8Col;
u8 u8Row;

for(u8Col=COL_BGN;u8Col<COL_NUM;u8Col++)
    18de:	88 89       	ldd	r24, Y+16	; 0x10
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	88 8b       	std	Y+16, r24	; 0x10
    18e4:	88 89       	ldd	r24, Y+16	; 0x10
    18e6:	84 30       	cpi	r24, 0x04	; 4
    18e8:	08 f4       	brcc	.+2      	; 0x18ec <KPD_u8GetPressedKey+0x17a>
    18ea:	51 cf       	rjmp	.-350    	; 0x178e <KPD_u8GetPressedKey+0x1c>
		}
	}
	DIO_vidsetPinval(KPD_PORT,u8Col,DIO_HIGH);

}
return u8SwVal;
    18ec:	89 89       	ldd	r24, Y+17	; 0x11
}
    18ee:	61 96       	adiw	r28, 0x11	; 17
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <KPD_u8GetString>:
u8* KPD_u8GetString(void)
{
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <KPD_u8GetString+0xa>
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	u8 *Pu8Str;
	u8 i;
	for(i=0;i<4;i++)
    1910:	19 82       	std	Y+1, r1	; 0x01
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <KPD_u8GetString+0x32>
	{
		Pu8Str[i]=KPD_u8GetPressedKey();
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	8c 01       	movw	r16, r24
    1920:	02 0f       	add	r16, r18
    1922:	13 1f       	adc	r17, r19
    1924:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    1928:	f8 01       	movw	r30, r16
    192a:	80 83       	st	Z, r24
}
u8* KPD_u8GetString(void)
{
	u8 *Pu8Str;
	u8 i;
	for(i=0;i<4;i++)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	70 f3       	brcs	.-36     	; 0x1914 <KPD_u8GetString+0x14>
	{
		Pu8Str[i]=KPD_u8GetPressedKey();
	}
	return Pu8Str;
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <HLCD_vidInit>:
#include"DIO_Interface.h"
#include "LCD_Int.h"
#include "LCD_Priv.h"
#include "LCD_CONFIG.h"
void HLCD_vidInit(void)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	e8 97       	sbiw	r28, 0x38	; 56
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
	DIO_vidsetPortDir(LCD_DATA_PORT,0xFF);
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	6f ef       	ldi	r22, 0xFF	; 255
    1964:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_vidsetPortDir>

	DIO_vidsetPinDir(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT);//RS
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(LCD_CONTROL_PORT,LCD_E_PIN,DIO_OUTPUT);//ENABLE
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	61 e0       	ldi	r22, 0x01	; 1
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a8 ec       	ldi	r26, 0xC8	; 200
    1982:	b2 e4       	ldi	r27, 0x42	; 66
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <HLCD_vidInit+0x82>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <HLCD_vidInit+0x100>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <HLCD_vidInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <HLCD_vidInit+0xe2>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <HLCD_vidInit+0xd0>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <HLCD_vidInit+0xc4>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <HLCD_vidInit+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <HLCD_vidInit+0x10c>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	HLCD_vidSendCMD(LCD_FUNCSET_8BIT);
    1a60:	88 e3       	ldi	r24, 0x38	; 56
    1a62:	0e 94 93 10 	call	0x2126	; 0x2126 <HLCD_vidSendCMD>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e4       	ldi	r27, 0x40	; 64
    1a6e:	8f a3       	std	Y+39, r24	; 0x27
    1a70:	98 a7       	std	Y+40, r25	; 0x28
    1a72:	a9 a7       	std	Y+41, r26	; 0x29
    1a74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6f a1       	ldd	r22, Y+39	; 0x27
    1a78:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8b a3       	std	Y+35, r24	; 0x23
    1a90:	9c a3       	std	Y+36, r25	; 0x24
    1a92:	ad a3       	std	Y+37, r26	; 0x25
    1a94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a96:	6b a1       	ldd	r22, Y+35	; 0x23
    1a98:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <HLCD_vidInit+0x16c>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <HLCD_vidInit+0x1ea>
	else if (__tmp > 65535)
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <HLCD_vidInit+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <HLCD_vidInit+0x1cc>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	98 a3       	std	Y+32, r25	; 0x20
    1b00:	8f 8f       	std	Y+31, r24	; 0x1f
    1b02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b04:	98 a1       	ldd	r25, Y+32	; 0x20
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <HLCD_vidInit+0x1ba>
    1b0a:	98 a3       	std	Y+32, r25	; 0x20
    1b0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <HLCD_vidInit+0x1ae>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <HLCD_vidInit+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <HLCD_vidInit+0x1f6>
    1b46:	9e 8f       	std	Y+30, r25	; 0x1e
    1b48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_vidSendCMD(LCD_DISPON_CURSOFF);
    1b4a:	8c e0       	ldi	r24, 0x0C	; 12
    1b4c:	0e 94 93 10 	call	0x2126	; 0x2126 <HLCD_vidSendCMD>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e4       	ldi	r27, 0x40	; 64
    1b58:	89 8f       	std	Y+25, r24	; 0x19
    1b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	69 8d       	ldd	r22, Y+25	; 0x19
    1b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8d 8b       	std	Y+21, r24	; 0x15
    1b7a:	9e 8b       	std	Y+22, r25	; 0x16
    1b7c:	af 8b       	std	Y+23, r26	; 0x17
    1b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b80:	6d 89       	ldd	r22, Y+21	; 0x15
    1b82:	7e 89       	ldd	r23, Y+22	; 0x16
    1b84:	8f 89       	ldd	r24, Y+23	; 0x17
    1b86:	98 8d       	ldd	r25, Y+24	; 0x18
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <HLCD_vidInit+0x256>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 8b       	std	Y+20, r25	; 0x14
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <HLCD_vidInit+0x2d4>
	else if (__tmp > 65535)
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <HLCD_vidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <HLCD_vidInit+0x2b6>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a 8b       	std	Y+18, r25	; 0x12
    1bea:	89 8b       	std	Y+17, r24	; 0x11
    1bec:	89 89       	ldd	r24, Y+17	; 0x11
    1bee:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <HLCD_vidInit+0x2a4>
    1bf4:	9a 8b       	std	Y+18, r25	; 0x12
    1bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9c 8b       	std	Y+20, r25	; 0x14
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <HLCD_vidInit+0x298>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <HLCD_vidInit+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	8b 89       	ldd	r24, Y+19	; 0x13
    1c22:	9c 89       	ldd	r25, Y+20	; 0x14
    1c24:	98 8b       	std	Y+16, r25	; 0x10
    1c26:	8f 87       	std	Y+15, r24	; 0x0f
    1c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2a:	98 89       	ldd	r25, Y+16	; 0x10
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <HLCD_vidInit+0x2e0>
    1c30:	98 8b       	std	Y+16, r25	; 0x10
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_vidSendCMD(LCD_CLR );
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 93 10 	call	0x2126	; 0x2126 <HLCD_vidSendCMD>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e0       	ldi	r26, 0x00	; 0
    1c40:	b0 e4       	ldi	r27, 0x40	; 64
    1c42:	8b 87       	std	Y+11, r24	; 0x0b
    1c44:	9c 87       	std	Y+12, r25	; 0x0c
    1c46:	ad 87       	std	Y+13, r26	; 0x0d
    1c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	98 87       	std	Y+8, r25	; 0x08
    1c66:	a9 87       	std	Y+9, r26	; 0x09
    1c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <HLCD_vidInit+0x340>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <HLCD_vidInit+0x3be>
	else if (__tmp > 65535)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <HLCD_vidInit+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <HLCD_vidInit+0x3a0>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <HLCD_vidInit+0x38e>
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <HLCD_vidInit+0x382>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <HLCD_vidInit+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <HLCD_vidInit+0x3ca>
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_vidSendCMD(LCD_ENTERYMODE);
    1d1e:	86 e0       	ldi	r24, 0x06	; 6
    1d20:	0e 94 93 10 	call	0x2126	; 0x2126 <HLCD_vidSendCMD>

}
    1d24:	e8 96       	adiw	r28, 0x38	; 56
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <HLCD_vidInit_4bit>:
void HLCD_vidInit_4bit(void)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	e8 97       	sbiw	r28, 0x38	; 56
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
	//DIO_vidsetPortDir(LCD_DATA_PORT,0xF0);
	GPIO_voidSetHighNibbleDDR(LCD_DATA_PORT,DIO_OUTPUT);
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_voidSetHighNibbleDDR>
	DIO_vidsetPinDir(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT);//RS
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	62 e0       	ldi	r22, 0x02	; 2
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(LCD_CONTROL_PORT,LCD_E_PIN,DIO_OUTPUT);//ENABLE
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	HLCD_vidSendCMD_4BIT(LCD_RETURN_HOME);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a8 ec       	ldi	r26, 0xC8	; 200
    1d72:	b2 e4       	ldi	r27, 0x42	; 66
    1d74:	8d ab       	std	Y+53, r24	; 0x35
    1d76:	9e ab       	std	Y+54, r25	; 0x36
    1d78:	af ab       	std	Y+55, r26	; 0x37
    1d7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d80:	8f a9       	ldd	r24, Y+55	; 0x37
    1d82:	98 ad       	ldd	r25, Y+56	; 0x38
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a ef       	ldi	r20, 0xFA	; 250
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	89 ab       	std	Y+49, r24	; 0x31
    1d96:	9a ab       	std	Y+50, r25	; 0x32
    1d98:	ab ab       	std	Y+51, r26	; 0x33
    1d9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1da0:	8b a9       	ldd	r24, Y+51	; 0x33
    1da2:	9c a9       	ldd	r25, Y+52	; 0x34
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <HLCD_vidInit_4bit+0x88>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	98 ab       	std	Y+48, r25	; 0x30
    1dba:	8f a7       	std	Y+47, r24	; 0x2f
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <HLCD_vidInit_4bit+0x106>
	else if (__tmp > 65535)
    1dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <HLCD_vidInit_4bit+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dda:	8f a9       	ldd	r24, Y+55	; 0x37
    1ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	98 ab       	std	Y+48, r25	; 0x30
    1dfc:	8f a7       	std	Y+47, r24	; 0x2f
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <HLCD_vidInit_4bit+0xe8>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9e a7       	std	Y+46, r25	; 0x2e
    1e06:	8d a7       	std	Y+45, r24	; 0x2d
    1e08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <HLCD_vidInit_4bit+0xd6>
    1e10:	9e a7       	std	Y+46, r25	; 0x2e
    1e12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e16:	98 a9       	ldd	r25, Y+48	; 0x30
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	98 ab       	std	Y+48, r25	; 0x30
    1e1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <HLCD_vidInit_4bit+0xca>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <HLCD_vidInit_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	98 ab       	std	Y+48, r25	; 0x30
    1e3a:	8f a7       	std	Y+47, r24	; 0x2f
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	9c a7       	std	Y+44, r25	; 0x2c
    1e42:	8b a7       	std	Y+43, r24	; 0x2b
    1e44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <HLCD_vidInit_4bit+0x112>
    1e4c:	9c a7       	std	Y+44, r25	; 0x2c
    1e4e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	HLCD_vidSendCMD_4BIT(LCD_FUNCSET_4BIT);
    1e50:	88 e2       	ldi	r24, 0x28	; 40
    1e52:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e4       	ldi	r27, 0x40	; 64
    1e5e:	8f a3       	std	Y+39, r24	; 0x27
    1e60:	98 a7       	std	Y+40, r25	; 0x28
    1e62:	a9 a7       	std	Y+41, r26	; 0x29
    1e64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6f a1       	ldd	r22, Y+39	; 0x27
    1e68:	78 a5       	ldd	r23, Y+40	; 0x28
    1e6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a ef       	ldi	r20, 0xFA	; 250
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8b a3       	std	Y+35, r24	; 0x23
    1e80:	9c a3       	std	Y+36, r25	; 0x24
    1e82:	ad a3       	std	Y+37, r26	; 0x25
    1e84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e86:	6b a1       	ldd	r22, Y+35	; 0x23
    1e88:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <HLCD_vidInit_4bit+0x172>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9a a3       	std	Y+34, r25	; 0x22
    1ea4:	89 a3       	std	Y+33, r24	; 0x21
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <HLCD_vidInit_4bit+0x1f0>
	else if (__tmp > 65535)
    1ea8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eaa:	7c a1       	ldd	r23, Y+36	; 0x24
    1eac:	8d a1       	ldd	r24, Y+37	; 0x25
    1eae:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <HLCD_vidInit_4bit+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9a a3       	std	Y+34, r25	; 0x22
    1ee6:	89 a3       	std	Y+33, r24	; 0x21
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <HLCD_vidInit_4bit+0x1d2>
    1eea:	88 ec       	ldi	r24, 0xC8	; 200
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	98 a3       	std	Y+32, r25	; 0x20
    1ef0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ef4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <HLCD_vidInit_4bit+0x1c0>
    1efa:	98 a3       	std	Y+32, r25	; 0x20
    1efc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	89 a1       	ldd	r24, Y+33	; 0x21
    1f00:	9a a1       	ldd	r25, Y+34	; 0x22
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9a a3       	std	Y+34, r25	; 0x22
    1f06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <HLCD_vidInit_4bit+0x1b4>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <HLCD_vidInit_4bit+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6b a1       	ldd	r22, Y+35	; 0x23
    1f14:	7c a1       	ldd	r23, Y+36	; 0x24
    1f16:	8d a1       	ldd	r24, Y+37	; 0x25
    1f18:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9a a3       	std	Y+34, r25	; 0x22
    1f24:	89 a3       	std	Y+33, r24	; 0x21
    1f26:	89 a1       	ldd	r24, Y+33	; 0x21
    1f28:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <HLCD_vidInit_4bit+0x1fc>
    1f36:	9e 8f       	std	Y+30, r25	; 0x1e
    1f38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_vidSendCMD_4BIT(LCD_DISPON_CURSOFF);
    1f3a:	8c e0       	ldi	r24, 0x0C	; 12
    1f3c:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e4       	ldi	r27, 0x40	; 64
    1f48:	89 8f       	std	Y+25, r24	; 0x19
    1f4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a ef       	ldi	r20, 0xFA	; 250
    1f5e:	54 e4       	ldi	r21, 0x44	; 68
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8d 8b       	std	Y+21, r24	; 0x15
    1f6a:	9e 8b       	std	Y+22, r25	; 0x16
    1f6c:	af 8b       	std	Y+23, r26	; 0x17
    1f6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f70:	6d 89       	ldd	r22, Y+21	; 0x15
    1f72:	7e 89       	ldd	r23, Y+22	; 0x16
    1f74:	8f 89       	ldd	r24, Y+23	; 0x17
    1f76:	98 8d       	ldd	r25, Y+24	; 0x18
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <HLCD_vidInit_4bit+0x25c>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <HLCD_vidInit_4bit+0x2da>
	else if (__tmp > 65535)
    1f92:	6d 89       	ldd	r22, Y+21	; 0x15
    1f94:	7e 89       	ldd	r23, Y+22	; 0x16
    1f96:	8f 89       	ldd	r24, Y+23	; 0x17
    1f98:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <HLCD_vidInit_4bit+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	69 8d       	ldd	r22, Y+25	; 0x19
    1fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <HLCD_vidInit_4bit+0x2bc>
    1fd4:	88 ec       	ldi	r24, 0xC8	; 200
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9a 8b       	std	Y+18, r25	; 0x12
    1fda:	89 8b       	std	Y+17, r24	; 0x11
    1fdc:	89 89       	ldd	r24, Y+17	; 0x11
    1fde:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <HLCD_vidInit_4bit+0x2aa>
    1fe4:	9a 8b       	std	Y+18, r25	; 0x12
    1fe6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fea:	9c 89       	ldd	r25, Y+20	; 0x14
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <HLCD_vidInit_4bit+0x29e>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <HLCD_vidInit_4bit+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	8b 89       	ldd	r24, Y+19	; 0x13
    2012:	9c 89       	ldd	r25, Y+20	; 0x14
    2014:	98 8b       	std	Y+16, r25	; 0x10
    2016:	8f 87       	std	Y+15, r24	; 0x0f
    2018:	8f 85       	ldd	r24, Y+15	; 0x0f
    201a:	98 89       	ldd	r25, Y+16	; 0x10
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <HLCD_vidInit_4bit+0x2e6>
    2020:	98 8b       	std	Y+16, r25	; 0x10
    2022:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_vidSendCMD_4BIT(LCD_CLR );
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e4       	ldi	r27, 0x40	; 64
    2032:	8b 87       	std	Y+11, r24	; 0x0b
    2034:	9c 87       	std	Y+12, r25	; 0x0c
    2036:	ad 87       	std	Y+13, r26	; 0x0d
    2038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6b 85       	ldd	r22, Y+11	; 0x0b
    203c:	7c 85       	ldd	r23, Y+12	; 0x0c
    203e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2040:	9e 85       	ldd	r25, Y+14	; 0x0e
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8f 83       	std	Y+7, r24	; 0x07
    2054:	98 87       	std	Y+8, r25	; 0x08
    2056:	a9 87       	std	Y+9, r26	; 0x09
    2058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <HLCD_vidInit_4bit+0x346>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <HLCD_vidInit_4bit+0x3c4>
	else if (__tmp > 65535)
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <HLCD_vidInit_4bit+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <HLCD_vidInit_4bit+0x3a6>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	8b 83       	std	Y+3, r24	; 0x03
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <HLCD_vidInit_4bit+0x394>
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <HLCD_vidInit_4bit+0x388>
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <HLCD_vidInit_4bit+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <HLCD_vidInit_4bit+0x3d0>
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_vidSendCMD_4BIT(LCD_ENTERYMODE);
    210e:	86 e0       	ldi	r24, 0x06	; 6
    2110:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>

}
    2114:	e8 96       	adiw	r28, 0x38	; 56
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <HLCD_vidSendCMD>:
void HLCD_vidSendCMD(u8 copy_u8Cmd)
{  	//RS LOW
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	2f 97       	sbiw	r28, 0x0f	; 15
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	62 e0       	ldi	r22, 0x02	; 2
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//COMMAND
	DIO_vidsetPortval(LCD_DATA_PORT,copy_u8Cmd);
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	6f 85       	ldd	r22, Y+15	; 0x0f
    214a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_vidsetPortval>
	//ENABLE
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e8       	ldi	r26, 0x80	; 128
    215e:	bf e3       	ldi	r27, 0x3F	; 63
    2160:	8b 87       	std	Y+11, r24	; 0x0b
    2162:	9c 87       	std	Y+12, r25	; 0x0c
    2164:	ad 87       	std	Y+13, r26	; 0x0d
    2166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8f 83       	std	Y+7, r24	; 0x07
    2182:	98 87       	std	Y+8, r25	; 0x08
    2184:	a9 87       	std	Y+9, r26	; 0x09
    2186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <HLCD_vidSendCMD+0x84>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <HLCD_vidSendCMD+0x102>
	else if (__tmp > 65535)
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	3f ef       	ldi	r19, 0xFF	; 255
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	57 e4       	ldi	r21, 0x47	; 71
    21ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <HLCD_vidSendCMD+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e2       	ldi	r20, 0x20	; 32
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <HLCD_vidSendCMD+0xe4>
    21ec:	88 ec       	ldi	r24, 0xC8	; 200
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <HLCD_vidSendCMD+0xd2>
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	69 f7       	brne	.-38     	; 0x21ec <HLCD_vidSendCMD+0xc6>
    2212:	14 c0       	rjmp	.+40     	; 0x223c <HLCD_vidSendCMD+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	9a 81       	ldd	r25, Y+2	; 0x02
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <HLCD_vidSendCMD+0x10e>
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
}
    2246:	2f 96       	adiw	r28, 0x0f	; 15
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <HLCD_vidSendChar>:
void HLCD_vidSendChar(u8 copy_u8Char)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	2f 97       	sbiw	r28, 0x0f	; 15
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	8f 87       	std	Y+15, r24	; 0x0f
	//RS HIGH
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//CHAR
	DIO_vidsetPortval(LCD_DATA_PORT,copy_u8Char);
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	6f 85       	ldd	r22, Y+15	; 0x0f
    227c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_vidsetPortval>
	//ENABLE
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a0 e8       	ldi	r26, 0x80	; 128
    2290:	bf e3       	ldi	r27, 0x3F	; 63
    2292:	8b 87       	std	Y+11, r24	; 0x0b
    2294:	9c 87       	std	Y+12, r25	; 0x0c
    2296:	ad 87       	std	Y+13, r26	; 0x0d
    2298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6b 85       	ldd	r22, Y+11	; 0x0b
    229c:	7c 85       	ldd	r23, Y+12	; 0x0c
    229e:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8f 83       	std	Y+7, r24	; 0x07
    22b4:	98 87       	std	Y+8, r25	; 0x08
    22b6:	a9 87       	std	Y+9, r26	; 0x09
    22b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <HLCD_vidSendChar+0x84>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	3f c0       	rjmp	.+126    	; 0x235a <HLCD_vidSendChar+0x102>
	else if (__tmp > 65535)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <HLCD_vidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	0f c0       	rjmp	.+30     	; 0x233c <HLCD_vidSendChar+0xe4>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <HLCD_vidSendChar+0xd2>
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <HLCD_vidSendChar+0xc6>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <HLCD_vidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <HLCD_vidSendChar+0x10e>
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	61 e0       	ldi	r22, 0x01	; 1
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
}
    2378:	2f 96       	adiw	r28, 0x0f	; 15
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <HLCD_vidSendCMD_4BIT>:
void HLCD_vidSendCMD_4BIT(u8 copy_u8Cmd)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	6d 97       	sbiw	r28, 0x1d	; 29
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	8d 8f       	std	Y+29, r24	; 0x1d

	//RS LOW
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	62 e0       	ldi	r22, 0x02	; 2
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//COMMAND
	//DIO_vidsetPortval_LowNibble(LCD_DATA_PORT,copy_u8Cmd>>4);
	//GPIO_voidWriteLowNibble(LCD_DATA_PORT,copy_u8Cmd>>4);
	GPIO_voidWriteHighNibble(LCD_DATA_PORT,copy_u8Cmd);
    23aa:	82 e0       	ldi	r24, 0x02	; 2
    23ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23ae:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <GPIO_voidWriteHighNibble>
	//ENABLE
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	a0 e8       	ldi	r26, 0x80	; 128
    23c2:	bf e3       	ldi	r27, 0x3F	; 63
    23c4:	89 8f       	std	Y+25, r24	; 0x19
    23c6:	9a 8f       	std	Y+26, r25	; 0x1a
    23c8:	ab 8f       	std	Y+27, r26	; 0x1b
    23ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	69 8d       	ldd	r22, Y+25	; 0x19
    23ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a ef       	ldi	r20, 0xFA	; 250
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8d 8b       	std	Y+21, r24	; 0x15
    23e6:	9e 8b       	std	Y+22, r25	; 0x16
    23e8:	af 8b       	std	Y+23, r26	; 0x17
    23ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ec:	6d 89       	ldd	r22, Y+21	; 0x15
    23ee:	7e 89       	ldd	r23, Y+22	; 0x16
    23f0:	8f 89       	ldd	r24, Y+23	; 0x17
    23f2:	98 8d       	ldd	r25, Y+24	; 0x18
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <HLCD_vidSendCMD_4BIT+0x84>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
    240c:	3f c0       	rjmp	.+126    	; 0x248c <HLCD_vidSendCMD_4BIT+0x102>
	else if (__tmp > 65535)
    240e:	6d 89       	ldd	r22, Y+21	; 0x15
    2410:	7e 89       	ldd	r23, Y+22	; 0x16
    2412:	8f 89       	ldd	r24, Y+23	; 0x17
    2414:	98 8d       	ldd	r25, Y+24	; 0x18
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <HLCD_vidSendCMD_4BIT+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	69 8d       	ldd	r22, Y+25	; 0x19
    2428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9c 8b       	std	Y+20, r25	; 0x14
    244c:	8b 8b       	std	Y+19, r24	; 0x13
    244e:	0f c0       	rjmp	.+30     	; 0x246e <HLCD_vidSendCMD_4BIT+0xe4>
    2450:	88 ec       	ldi	r24, 0xC8	; 200
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
    2458:	89 89       	ldd	r24, Y+17	; 0x11
    245a:	9a 89       	ldd	r25, Y+18	; 0x12
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <HLCD_vidSendCMD_4BIT+0xd2>
    2460:	9a 8b       	std	Y+18, r25	; 0x12
    2462:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8b 89       	ldd	r24, Y+19	; 0x13
    2466:	9c 89       	ldd	r25, Y+20	; 0x14
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9c 8b       	std	Y+20, r25	; 0x14
    246c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8b 89       	ldd	r24, Y+19	; 0x13
    2470:	9c 89       	ldd	r25, Y+20	; 0x14
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <HLCD_vidSendCMD_4BIT+0xc6>
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <HLCD_vidSendCMD_4BIT+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	6d 89       	ldd	r22, Y+21	; 0x15
    247a:	7e 89       	ldd	r23, Y+22	; 0x16
    247c:	8f 89       	ldd	r24, Y+23	; 0x17
    247e:	98 8d       	ldd	r25, Y+24	; 0x18
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
    248c:	8b 89       	ldd	r24, Y+19	; 0x13
    248e:	9c 89       	ldd	r25, Y+20	; 0x14
    2490:	98 8b       	std	Y+16, r25	; 0x10
    2492:	8f 87       	std	Y+15, r24	; 0x0f
    2494:	8f 85       	ldd	r24, Y+15	; 0x0f
    2496:	98 89       	ldd	r25, Y+16	; 0x10
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <HLCD_vidSendCMD_4BIT+0x10e>
    249c:	98 8b       	std	Y+16, r25	; 0x10
    249e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//RS LOW
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	62 e0       	ldi	r22, 0x02	; 2
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//DIO_vidsetPortval_LowNibble(LCD_DATA_PORT,copy_u8Cmd);
	//GPIO_voidWriteLowNibble(LCD_DATA_PORT,copy_u8Cmd);
	GPIO_voidWriteHighNibble(LCD_DATA_PORT,copy_u8Cmd<<4);
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	98 2f       	mov	r25, r24
    24b8:	92 95       	swap	r25
    24ba:	90 7f       	andi	r25, 0xF0	; 240
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	69 2f       	mov	r22, r25
    24c0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <GPIO_voidWriteHighNibble>

	//ENABLE
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 e8       	ldi	r26, 0x80	; 128
    24d4:	bf e3       	ldi	r27, 0x3F	; 63
    24d6:	8b 87       	std	Y+11, r24	; 0x0b
    24d8:	9c 87       	std	Y+12, r25	; 0x0c
    24da:	ad 87       	std	Y+13, r26	; 0x0d
    24dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a ef       	ldi	r20, 0xFA	; 250
    24ec:	54 e4       	ldi	r21, 0x44	; 68
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8f 83       	std	Y+7, r24	; 0x07
    24f8:	98 87       	std	Y+8, r25	; 0x08
    24fa:	a9 87       	std	Y+9, r26	; 0x09
    24fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	2c f4       	brge	.+10     	; 0x2520 <HLCD_vidSendCMD_4BIT+0x196>
		__ticks = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	3f c0       	rjmp	.+126    	; 0x259e <HLCD_vidSendCMD_4BIT+0x214>
	else if (__tmp > 65535)
    2520:	6f 81       	ldd	r22, Y+7	; 0x07
    2522:	78 85       	ldd	r23, Y+8	; 0x08
    2524:	89 85       	ldd	r24, Y+9	; 0x09
    2526:	9a 85       	ldd	r25, Y+10	; 0x0a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	4f e7       	ldi	r20, 0x7F	; 127
    252e:	57 e4       	ldi	r21, 0x47	; 71
    2530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2534:	18 16       	cp	r1, r24
    2536:	4c f5       	brge	.+82     	; 0x258a <HLCD_vidSendCMD_4BIT+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <HLCD_vidSendCMD_4BIT+0x1f6>
    2562:	88 ec       	ldi	r24, 0xC8	; 200
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9c 83       	std	Y+4, r25	; 0x04
    2568:	8b 83       	std	Y+3, r24	; 0x03
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	9c 81       	ldd	r25, Y+4	; 0x04
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <HLCD_vidSendCMD_4BIT+0x1e4>
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	69 f7       	brne	.-38     	; 0x2562 <HLCD_vidSendCMD_4BIT+0x1d8>
    2588:	14 c0       	rjmp	.+40     	; 0x25b2 <HLCD_vidSendCMD_4BIT+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6f 81       	ldd	r22, Y+7	; 0x07
    258c:	78 85       	ldd	r23, Y+8	; 0x08
    258e:	89 85       	ldd	r24, Y+9	; 0x09
    2590:	9a 85       	ldd	r25, Y+10	; 0x0a
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	9a 83       	std	Y+2, r25	; 0x02
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <HLCD_vidSendCMD_4BIT+0x220>
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
}
    25bc:	6d 96       	adiw	r28, 0x1d	; 29
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <HLCD_vidSendChar_4BIT>:
void HLCD_vidSendChar_4BIT(u8 copy_u8Char)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	6d 97       	sbiw	r28, 0x1d	; 29
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	8d 8f       	std	Y+29, r24	; 0x1d

	//RS HIGH
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//CHAR
	//DIO_vidsetPortval_LowNibble(LCD_DATA_PORT,copy_u8Char>>4);
	//GPIO_voidWriteLowNibble(LCD_DATA_PORT,copy_u8Char>>4);
	GPIO_voidWriteHighNibble(LCD_DATA_PORT,copy_u8Char);
    25ee:	82 e0       	ldi	r24, 0x02	; 2
    25f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25f2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <GPIO_voidWriteHighNibble>

	//ENABLE
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	89 8f       	std	Y+25, r24	; 0x19
    260a:	9a 8f       	std	Y+26, r25	; 0x1a
    260c:	ab 8f       	std	Y+27, r26	; 0x1b
    260e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	69 8d       	ldd	r22, Y+25	; 0x19
    2612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a ef       	ldi	r20, 0xFA	; 250
    261e:	54 e4       	ldi	r21, 0x44	; 68
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8d 8b       	std	Y+21, r24	; 0x15
    262a:	9e 8b       	std	Y+22, r25	; 0x16
    262c:	af 8b       	std	Y+23, r26	; 0x17
    262e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <HLCD_vidSendChar_4BIT+0x84>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <HLCD_vidSendChar_4BIT+0x102>
	else if (__tmp > 65535)
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <HLCD_vidSendChar_4BIT+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	69 8d       	ldd	r22, Y+25	; 0x19
    266c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9c 8b       	std	Y+20, r25	; 0x14
    2690:	8b 8b       	std	Y+19, r24	; 0x13
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <HLCD_vidSendChar_4BIT+0xe4>
    2694:	88 ec       	ldi	r24, 0xC8	; 200
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9a 8b       	std	Y+18, r25	; 0x12
    269a:	89 8b       	std	Y+17, r24	; 0x11
    269c:	89 89       	ldd	r24, Y+17	; 0x11
    269e:	9a 89       	ldd	r25, Y+18	; 0x12
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <HLCD_vidSendChar_4BIT+0xd2>
    26a4:	9a 8b       	std	Y+18, r25	; 0x12
    26a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8b 89       	ldd	r24, Y+19	; 0x13
    26aa:	9c 89       	ldd	r25, Y+20	; 0x14
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <HLCD_vidSendChar_4BIT+0xc6>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <HLCD_vidSendChar_4BIT+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9c 8b       	std	Y+20, r25	; 0x14
    26ce:	8b 8b       	std	Y+19, r24	; 0x13
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
    26d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26da:	98 89       	ldd	r25, Y+16	; 0x10
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <HLCD_vidSendChar_4BIT+0x10e>
    26e0:	98 8b       	std	Y+16, r25	; 0x10
    26e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//RS HIGH
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
	//DIO_vidsetPortval_LowNibble(LCD_DATA_PORT,copy_u8Char);
	//GPIO_voidWriteLowNibble(LCD_DATA_PORT,copy_u8Char);
	GPIO_voidWriteHighNibble(LCD_DATA_PORT,copy_u8Char<<4);
    26f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fa:	98 2f       	mov	r25, r24
    26fc:	92 95       	swap	r25
    26fe:	90 7f       	andi	r25, 0xF0	; 240
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	69 2f       	mov	r22, r25
    2704:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <GPIO_voidWriteHighNibble>

	//ENABLE
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	61 e0       	ldi	r22, 0x01	; 1
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e8       	ldi	r26, 0x80	; 128
    2718:	bf e3       	ldi	r27, 0x3F	; 63
    271a:	8b 87       	std	Y+11, r24	; 0x0b
    271c:	9c 87       	std	Y+12, r25	; 0x0c
    271e:	ad 87       	std	Y+13, r26	; 0x0d
    2720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2722:	6b 85       	ldd	r22, Y+11	; 0x0b
    2724:	7c 85       	ldd	r23, Y+12	; 0x0c
    2726:	8d 85       	ldd	r24, Y+13	; 0x0d
    2728:	9e 85       	ldd	r25, Y+14	; 0x0e
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a ef       	ldi	r20, 0xFA	; 250
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8f 83       	std	Y+7, r24	; 0x07
    273c:	98 87       	std	Y+8, r25	; 0x08
    273e:	a9 87       	std	Y+9, r26	; 0x09
    2740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2742:	6f 81       	ldd	r22, Y+7	; 0x07
    2744:	78 85       	ldd	r23, Y+8	; 0x08
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	2c f4       	brge	.+10     	; 0x2764 <HLCD_vidSendChar_4BIT+0x196>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	3f c0       	rjmp	.+126    	; 0x27e2 <HLCD_vidSendChar_4BIT+0x214>
	else if (__tmp > 65535)
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	4c f5       	brge	.+82     	; 0x27ce <HLCD_vidSendChar_4BIT+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	6b 85       	ldd	r22, Y+11	; 0x0b
    277e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <HLCD_vidSendChar_4BIT+0x1f6>
    27a6:	88 ec       	ldi	r24, 0xC8	; 200
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9c 83       	std	Y+4, r25	; 0x04
    27ac:	8b 83       	std	Y+3, r24	; 0x03
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <HLCD_vidSendChar_4BIT+0x1e4>
    27b6:	9c 83       	std	Y+4, r25	; 0x04
    27b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <HLCD_vidSendChar_4BIT+0x1d8>
    27cc:	14 c0       	rjmp	.+40     	; 0x27f6 <HLCD_vidSendChar_4BIT+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ce:	6f 81       	ldd	r22, Y+7	; 0x07
    27d0:	78 85       	ldd	r23, Y+8	; 0x08
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <HLCD_vidSendChar_4BIT+0x220>
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	61 e0       	ldi	r22, 0x01	; 1
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
}
    2800:	6d 96       	adiw	r28, 0x1d	; 29
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <HLCD_vidWriteStr>:
void HLCD_vidWriteStr(u8 *copy_Pu8str )
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <HLCD_vidWriteStr+0x6>
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	9b 83       	std	Y+3, r25	; 0x03
    2820:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2822:	19 82       	std	Y+1, r1	; 0x01
    2824:	0e c0       	rjmp	.+28     	; 0x2842 <HLCD_vidWriteStr+0x30>
	while( copy_Pu8str[i]!='\0')
	{
		HLCD_vidSendChar(copy_Pu8str[i]);
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	9b 81       	ldd	r25, Y+3	; 0x03
    2830:	fc 01       	movw	r30, r24
    2832:	e2 0f       	add	r30, r18
    2834:	f3 1f       	adc	r31, r19
    2836:	80 81       	ld	r24, Z
    2838:	0e 94 2c 11 	call	0x2258	; 0x2258 <HLCD_vidSendChar>
		i++;
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidsetPinval(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
}
void HLCD_vidWriteStr(u8 *copy_Pu8str )
{
	u8 i=0;
	while( copy_Pu8str[i]!='\0')
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	9b 81       	ldd	r25, Y+3	; 0x03
    284c:	fc 01       	movw	r30, r24
    284e:	e2 0f       	add	r30, r18
    2850:	f3 1f       	adc	r31, r19
    2852:	80 81       	ld	r24, Z
    2854:	88 23       	and	r24, r24
    2856:	39 f7       	brne	.-50     	; 0x2826 <HLCD_vidWriteStr+0x14>
	{
		HLCD_vidSendChar(copy_Pu8str[i]);
		i++;
	}

}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <HLCD_vidWriteStr_4BIT>:
void HLCD_vidWriteStr_4BIT(u8 *copy_Pu8str )
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	00 d0       	rcall	.+0      	; 0x286a <HLCD_vidWriteStr_4BIT+0x6>
    286a:	0f 92       	push	r0
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	9b 83       	std	Y+3, r25	; 0x03
    2872:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2874:	19 82       	std	Y+1, r1	; 0x01
    2876:	0e c0       	rjmp	.+28     	; 0x2894 <HLCD_vidWriteStr_4BIT+0x30>
	while( copy_Pu8str[i]!='\0')
	{
		HLCD_vidSendChar_4BIT(copy_Pu8str[i]);
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	fc 01       	movw	r30, r24
    2884:	e2 0f       	add	r30, r18
    2886:	f3 1f       	adc	r31, r19
    2888:	80 81       	ld	r24, Z
    288a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_vidSendChar_4BIT>
		i++;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	8f 5f       	subi	r24, 0xFF	; 255
    2892:	89 83       	std	Y+1, r24	; 0x01

}
void HLCD_vidWriteStr_4BIT(u8 *copy_Pu8str )
{
	u8 i=0;
	while( copy_Pu8str[i]!='\0')
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	28 2f       	mov	r18, r24
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	fc 01       	movw	r30, r24
    28a0:	e2 0f       	add	r30, r18
    28a2:	f3 1f       	adc	r31, r19
    28a4:	80 81       	ld	r24, Z
    28a6:	88 23       	and	r24, r24
    28a8:	39 f7       	brne	.-50     	; 0x2878 <HLCD_vidWriteStr_4BIT+0x14>
	{
		HLCD_vidSendChar_4BIT(copy_Pu8str[i]);
		i++;
	}

}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <HLCD_vidGoToXY>:
void HLCD_vidGoToXY(u8 x, u8 y)
{ u8 Address;
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <HLCD_vidGoToXY+0x6>
    28bc:	0f 92       	push	r0
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	8a 83       	std	Y+2, r24	; 0x02
    28c4:	6b 83       	std	Y+3, r22	; 0x03
if(x <2 && y<16)
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	c8 f4       	brcc	.+50     	; 0x28fe <HLCD_vidGoToXY+0x48>
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	80 31       	cpi	r24, 0x10	; 16
    28d0:	b0 f4       	brcc	.+44     	; 0x28fe <HLCD_vidGoToXY+0x48>
{
	Address= (x * 0x40) + y;
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	00 24       	eor	r0, r0
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	07 94       	ror	r0
    28e0:	96 95       	lsr	r25
    28e2:	87 95       	ror	r24
    28e4:	07 94       	ror	r0
    28e6:	98 2f       	mov	r25, r24
    28e8:	80 2d       	mov	r24, r0
    28ea:	98 2f       	mov	r25, r24
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	89 0f       	add	r24, r25
    28f0:	89 83       	std	Y+1, r24	; 0x01
	Address=SET_BIT(Address,7);
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	80 68       	ori	r24, 0x80	; 128
    28f6:	89 83       	std	Y+1, r24	; 0x01
	HLCD_vidSendCMD_4BIT(Address);
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
}
}
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <DC_Intro>:
void DC_Intro(void){
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
	HLCD_vidWriteStr_4BIT("Welcome Home");
    2912:	80 e6       	ldi	r24, 0x60	; 96
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
	//	HLCD_vidGoToXY(1,0);
	//	HLCD_vidWriteStr_4BIT("Password: ");
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <HLCD_voidDisplayint>:


void HLCD_voidDisplayint(u16 num)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	60 97       	sbiw	r28, 0x10	; 16
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	98 8b       	std	Y+16, r25	; 0x10
    2936:	8f 87       	std	Y+15, r24	; 0x0f
	u8 str[10];
	u16 i = 0;
    2938:	1c 82       	std	Y+4, r1	; 0x04
    293a:	1b 82       	std	Y+3, r1	; 0x03
    293c:	26 c0       	rjmp	.+76     	; 0x298a <HLCD_voidDisplayint+0x6a>
	u16 remainder;
	while(num != 0)
	{
		remainder = num % 10;
    293e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2940:	98 89       	ldd	r25, Y+16	; 0x10
    2942:	2a e0       	ldi	r18, 0x0A	; 10
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	b9 01       	movw	r22, r18
    2948:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__udivmodhi4>
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
		remainder = remainder + 48;
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	c0 96       	adiw	r24, 0x30	; 48
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
		str[i] = remainder;
    295a:	2b 81       	ldd	r18, Y+3	; 0x03
    295c:	3c 81       	ldd	r19, Y+4	; 0x04
    295e:	49 81       	ldd	r20, Y+1	; 0x01
    2960:	ce 01       	movw	r24, r28
    2962:	05 96       	adiw	r24, 0x05	; 5
    2964:	fc 01       	movw	r30, r24
    2966:	e2 0f       	add	r30, r18
    2968:	f3 1f       	adc	r31, r19
    296a:	40 83       	st	Z, r20
		num = num / 10;
    296c:	8f 85       	ldd	r24, Y+15	; 0x0f
    296e:	98 89       	ldd	r25, Y+16	; 0x10
    2970:	2a e0       	ldi	r18, 0x0A	; 10
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	b9 01       	movw	r22, r18
    2976:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__udivmodhi4>
    297a:	cb 01       	movw	r24, r22
    297c:	98 8b       	std	Y+16, r25	; 0x10
    297e:	8f 87       	std	Y+15, r24	; 0x0f
		i++;
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	9c 81       	ldd	r25, Y+4	; 0x04
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	8b 83       	std	Y+3, r24	; 0x03
void HLCD_voidDisplayint(u16 num)
{
	u8 str[10];
	u16 i = 0;
	u16 remainder;
	while(num != 0)
    298a:	8f 85       	ldd	r24, Y+15	; 0x0f
    298c:	98 89       	ldd	r25, Y+16	; 0x10
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	b1 f6       	brne	.-84     	; 0x293e <HLCD_voidDisplayint+0x1e>
    2992:	12 c0       	rjmp	.+36     	; 0x29b8 <HLCD_voidDisplayint+0x98>
		num = num / 10;
		i++;
	}
	while(i > 0)
	{
		HLCD_vidSendChar_4BIT(str[i-1]);
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	9c 01       	movw	r18, r24
    299a:	21 50       	subi	r18, 0x01	; 1
    299c:	30 40       	sbci	r19, 0x00	; 0
    299e:	ce 01       	movw	r24, r28
    29a0:	05 96       	adiw	r24, 0x05	; 5
    29a2:	fc 01       	movw	r30, r24
    29a4:	e2 0f       	add	r30, r18
    29a6:	f3 1f       	adc	r31, r19
    29a8:	80 81       	ld	r24, Z
    29aa:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_vidSendChar_4BIT>
		i--;
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	9c 83       	std	Y+4, r25	; 0x04
    29b6:	8b 83       	std	Y+3, r24	; 0x03
		remainder = remainder + 48;
		str[i] = remainder;
		num = num / 10;
		i++;
	}
	while(i > 0)
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	51 f7       	brne	.-44     	; 0x2994 <HLCD_voidDisplayint+0x74>
	{
		HLCD_vidSendChar_4BIT(str[i-1]);
		i--;

	}
}
    29c0:	60 96       	adiw	r28, 0x10	; 16
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <HLCD_option1>:

void HLCD_option1(void)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	HLCD_vidGoToXY(0,0);
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
	HLCD_vidWriteStr_4BIT("1->ROOM1 2->ROOM ");
    29e2:	8d e6       	ldi	r24, 0x6D	; 109
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
	HLCD_vidGoToXY(1,0);
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
	HLCD_vidWriteStr_4BIT("3->TV         ");
    29f2:	8f e7       	ldi	r24, 0x7F	; 127
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>

}
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <HLCD_option2>:
void HLCD_option2(void)
{
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
	HLCD_vidGoToXY(0,0);
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
	HLCD_vidWriteStr_4BIT("A->ON B->OFF ");
    2a10:	8e e8       	ldi	r24, 0x8E	; 142
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
	HLCD_vidGoToXY(1,0);
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	60 e0       	ldi	r22, 0x00	; 0
    2a1c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
	HLCD_vidWriteStr_4BIT("C->RET         ");
    2a20:	8c e9       	ldi	r24, 0x9C	; 156
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>

}
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <TWI_vMasterInit>:
#include "MTWI_private.h"
#include "MTWI_config.h"


void TWI_vMasterInit(void)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
	/* Set Clock configuration  TWBR = 2 */
	TWBR = 2;
    2a36:	e0 e2       	ldi	r30, 0x20	; 32
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    2a3e:	a1 e2       	ldi	r26, 0x21	; 33
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e1 e2       	ldi	r30, 0x21	; 33
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8e 7f       	andi	r24, 0xFE	; 254
    2a4a:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    2a4c:	a1 e2       	ldi	r26, 0x21	; 33
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e1 e2       	ldi	r30, 0x21	; 33
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	8d 7f       	andi	r24, 0xFD	; 253
    2a58:	8c 93       	st	X, r24

	/* Enable Acknowledge bit */
	//SET_BIT(TWCR , TWCR_TWEA);
	/* Set my own Address */
	TWAR = MASTER_ADDRESS << 1;
    2a5a:	e2 e2       	ldi	r30, 0x22	; 34
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	84 e6       	ldi	r24, 0x64	; 100
    2a60:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2a62:	a6 e5       	ldi	r26, 0x56	; 86
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e6 e5       	ldi	r30, 0x56	; 86
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	84 60       	ori	r24, 0x04	; 4
    2a6e:	8c 93       	st	X, r24
}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <TWI_vSlaveInit>:
void TWI_vSlaveInit(void)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    2a7e:	a6 e5       	ldi	r26, 0x56	; 86
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e6 e5       	ldi	r30, 0x56	; 86
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	80 64       	ori	r24, 0x40	; 64
    2a8a:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = SLAVE_ADDRESS << 1;
    2a8c:	e2 e2       	ldi	r30, 0x22	; 34
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	88 e2       	ldi	r24, 0x28	; 40
    2a92:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2a94:	a6 e5       	ldi	r26, 0x56	; 86
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e6 e5       	ldi	r30, 0x56	; 86
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	84 60       	ori	r24, 0x04	; 4
    2aa0:	8c 93       	st	X, r24
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <TWI_enStartCondition>:

TWI_ErrorState_t TWI_enStartCondition(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	0f 92       	push	r0
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2ab2:	19 82       	std	Y+1, r1	; 0x01

	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    2ab4:	a6 e5       	ldi	r26, 0x56	; 86
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e6 e5       	ldi	r30, 0x56	; 86
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	80 62       	ori	r24, 0x20	; 32
    2ac0:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2ac2:	a6 e5       	ldi	r26, 0x56	; 86
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e6 e5       	ldi	r30, 0x56	; 86
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	80 68       	ori	r24, 0x80	; 128
    2ace:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2ad0:	a6 e5       	ldi	r26, 0x56	; 86
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e6 e5       	ldi	r30, 0x56	; 86
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	84 60       	ori	r24, 0x04	; 4
    2adc:	8c 93       	st	X, r24
	//TWCR = 0b10100100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2ade:	e6 e5       	ldi	r30, 0x56	; 86
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	88 23       	and	r24, r24
    2ae6:	dc f7       	brge	.-10     	; 0x2ade <TWI_enStartCondition+0x36>

	if((TWSR & 0XF8) != START_CONDITION)
    2ae8:	e1 e2       	ldi	r30, 0x21	; 33
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	88 2f       	mov	r24, r24
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	88 7f       	andi	r24, 0xF8	; 248
    2af4:	90 70       	andi	r25, 0x00	; 0
    2af6:	88 30       	cpi	r24, 0x08	; 8
    2af8:	91 05       	cpc	r25, r1
    2afa:	11 f0       	breq	.+4      	; 0x2b00 <TWI_enStartCondition+0x58>
	{
		Local_ErrorState = START_CONDTITION_ERR;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <TWI_enRepeateStart>:
TWI_ErrorState_t TWI_enRepeateStart(void)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	0f 92       	push	r0
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2b14:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    2b16:	a6 e5       	ldi	r26, 0x56	; 86
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e6 e5       	ldi	r30, 0x56	; 86
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	80 62       	ori	r24, 0x20	; 32
    2b22:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2b24:	a6 e5       	ldi	r26, 0x56	; 86
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e6 e5       	ldi	r30, 0x56	; 86
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	80 68       	ori	r24, 0x80	; 128
    2b30:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2b32:	a6 e5       	ldi	r26, 0x56	; 86
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e6 e5       	ldi	r30, 0x56	; 86
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	84 60       	ori	r24, 0x04	; 4
    2b3e:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2b40:	e6 e5       	ldi	r30, 0x56	; 86
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	88 23       	and	r24, r24
    2b48:	dc f7       	brge	.-10     	; 0x2b40 <TWI_enRepeateStart+0x36>

	if((TWSR & 0XF8) != REPEATE_START_CONDITION)
    2b4a:	e1 e2       	ldi	r30, 0x21	; 33
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	88 7f       	andi	r24, 0xF8	; 248
    2b56:	90 70       	andi	r25, 0x00	; 0
    2b58:	80 31       	cpi	r24, 0x10	; 16
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	11 f0       	breq	.+4      	; 0x2b62 <TWI_enRepeateStart+0x58>
	{
		Local_ErrorState = REPEAT_START_ERR;
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <TWI_enSetSlaveAddressWithWrite>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <TWI_enSetSlaveAddressWithWrite+0x6>
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2b78:	19 82       	std	Y+1, r1	; 0x01
	/* Clear bit 0 to make write operation */
		CLR_BIT(TWDR , TWDR_TWD0);
    2b7a:	a3 e2       	ldi	r26, 0x23	; 35
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e3 e2       	ldi	r30, 0x23	; 35
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	8e 7f       	andi	r24, 0xFE	; 254
    2b86:	8c 93       	st	X, r24
	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress;
    2b88:	e3 e2       	ldi	r30, 0x23	; 35
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	80 83       	st	Z, r24
	/* Clear the start condition bit */
		CLR_BIT(TWCR , TWCR_TWSTA);
    2b90:	a6 e5       	ldi	r26, 0x56	; 86
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e6 e5       	ldi	r30, 0x56	; 86
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	8f 7d       	andi	r24, 0xDF	; 223
    2b9c:	8c 93       	st	X, r24


	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2b9e:	a6 e5       	ldi	r26, 0x56	; 86
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e6 e5       	ldi	r30, 0x56	; 86
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	80 68       	ori	r24, 0x80	; 128
    2baa:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2bac:	a6 e5       	ldi	r26, 0x56	; 86
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e6 e5       	ldi	r30, 0x56	; 86
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	84 60       	ori	r24, 0x04	; 4
    2bb8:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2bba:	e6 e5       	ldi	r30, 0x56	; 86
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	88 23       	and	r24, r24
    2bc2:	dc f7       	brge	.-10     	; 0x2bba <TWI_enSetSlaveAddressWithWrite+0x4e>

	if((TWSR & 0XF8) == SLA_WITH_W_NOAK)
    2bc4:	e1 e2       	ldi	r30, 0x21	; 33
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	88 7f       	andi	r24, 0xF8	; 248
    2bd0:	90 70       	andi	r25, 0x00	; 0
    2bd2:	80 32       	cpi	r24, 0x20	; 32
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	11 f4       	brne	.+4      	; 0x2bdc <TWI_enSetSlaveAddressWithWrite+0x70>
	{
		Local_ErrorState = SLA_W_NOACK_ERR;
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <TWI_enSetSlaveAddressWithRead>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <TWI_enSetSlaveAddressWithRead+0x6>
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2bf4:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress | 1;
    2bf6:	e3 e2       	ldi	r30, 0x23	; 35
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	81 60       	ori	r24, 0x01	; 1
    2bfe:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    2c00:	a6 e5       	ldi	r26, 0x56	; 86
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	e6 e5       	ldi	r30, 0x56	; 86
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	8f 7d       	andi	r24, 0xDF	; 223
    2c0c:	8c 93       	st	X, r24
	/* Set bit 0 to make Read operation */
	//SET_BIT(TWDR , TWDR_TWD0);
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2c0e:	a6 e5       	ldi	r26, 0x56	; 86
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e6 e5       	ldi	r30, 0x56	; 86
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	80 68       	ori	r24, 0x80	; 128
    2c1a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2c1c:	a6 e5       	ldi	r26, 0x56	; 86
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e6 e5       	ldi	r30, 0x56	; 86
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	84 60       	ori	r24, 0x04	; 4
    2c28:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2c2a:	e6 e5       	ldi	r30, 0x56	; 86
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	88 23       	and	r24, r24
    2c32:	dc f7       	brge	.-10     	; 0x2c2a <TWI_enSetSlaveAddressWithRead+0x42>

	if((TWSR & 0XF8) == SLA_WITH_R_NOAK)
    2c34:	e1 e2       	ldi	r30, 0x21	; 33
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	88 2f       	mov	r24, r24
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	88 7f       	andi	r24, 0xF8	; 248
    2c40:	90 70       	andi	r25, 0x00	; 0
    2c42:	88 33       	cpi	r24, 0x38	; 56
    2c44:	91 05       	cpc	r25, r1
    2c46:	11 f4       	brne	.+4      	; 0x2c4c <TWI_enSetSlaveAddressWithRead+0x64>
	{
		Local_ErrorState = SLA_R_NOACK_ERR;
    2c48:	84 e0       	ldi	r24, 0x04	; 4
    2c4a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <TWI_enMasterWriteData>:
TWI_ErrorState_t TWI_enMasterWriteData(u8 Copy_u8Data)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <TWI_enMasterWriteData+0x6>
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2c64:	19 82       	std	Y+1, r1	; 0x01
	/* Write data to TWDR */
	TWDR = Copy_u8Data;
    2c66:	e3 e2       	ldi	r30, 0x23	; 35
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	80 83       	st	Z, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2c6e:	a6 e5       	ldi	r26, 0x56	; 86
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e6 e5       	ldi	r30, 0x56	; 86
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	80 68       	ori	r24, 0x80	; 128
    2c7a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2c7c:	a6 e5       	ldi	r26, 0x56	; 86
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e6 e5       	ldi	r30, 0x56	; 86
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	84 60       	ori	r24, 0x04	; 4
    2c88:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2c8a:	e6 e5       	ldi	r30, 0x56	; 86
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 23       	and	r24, r24
    2c92:	dc f7       	brge	.-10     	; 0x2c8a <TWI_enMasterWriteData+0x32>

	if((TWSR & 0XF8) == MASTER_SEND_DATA_NOAK)
    2c94:	e1 e2       	ldi	r30, 0x21	; 33
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	88 2f       	mov	r24, r24
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	88 7f       	andi	r24, 0xF8	; 248
    2ca0:	90 70       	andi	r25, 0x00	; 0
    2ca2:	80 33       	cpi	r24, 0x30	; 48
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	11 f4       	brne	.+4      	; 0x2cac <TWI_enMasterWriteData+0x54>
	{
		Local_ErrorState = MASTER_SEND_DATA_ERR;
    2ca8:	85 e0       	ldi	r24, 0x05	; 5
    2caa:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2cac:	89 81       	ldd	r24, Y+1	; 0x01

}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	08 95       	ret

00002cb8 <TWI_enMasterReadData>:
TWI_ErrorState_t TWI_enMasterReadData(u8 *Copy_u8Data)
{
    2cb8:	df 93       	push	r29
    2cba:	cf 93       	push	r28
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <TWI_enMasterReadData+0x6>
    2cbe:	0f 92       	push	r0
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	9b 83       	std	Y+3, r25	; 0x03
    2cc6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2cc8:	19 82       	std	Y+1, r1	; 0x01

	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2cca:	a6 e5       	ldi	r26, 0x56	; 86
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e6 e5       	ldi	r30, 0x56	; 86
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	84 60       	ori	r24, 0x04	; 4
    2cd6:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2cd8:	a6 e5       	ldi	r26, 0x56	; 86
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e6 e5       	ldi	r30, 0x56	; 86
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	80 68       	ori	r24, 0x80	; 128
    2ce4:	8c 93       	st	X, r24


	//TWCR = 0b10000100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2ce6:	e6 e5       	ldi	r30, 0x56	; 86
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	88 23       	and	r24, r24
    2cee:	dc f7       	brge	.-10     	; 0x2ce6 <TWI_enMasterReadData+0x2e>

	if((TWSR & 0XF8) == MASTER_RECEIVE_DATA_NOAK)
    2cf0:	e1 e2       	ldi	r30, 0x21	; 33
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 2f       	mov	r24, r24
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	88 7f       	andi	r24, 0xF8	; 248
    2cfc:	90 70       	andi	r25, 0x00	; 0
    2cfe:	88 35       	cpi	r24, 0x58	; 88
    2d00:	91 05       	cpc	r25, r1
    2d02:	11 f4       	brne	.+4      	; 0x2d08 <TWI_enMasterReadData+0x50>
	{
		Local_ErrorState = MASTER_RECEIVE_DATA_ERR;
    2d04:	86 e0       	ldi	r24, 0x06	; 6
    2d06:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	*Copy_u8Data = TWDR;
    2d08:	e3 e2       	ldi	r30, 0x23	; 35
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d10:	fb 81       	ldd	r31, Y+3	; 0x03
    2d12:	80 83       	st	Z, r24

	return Local_ErrorState;
    2d14:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <TWI_vStopCondition>:
void TWI_vStopCondition(void)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62

	/* Set bit TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTOP);
    2d2a:	a6 e5       	ldi	r26, 0x56	; 86
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e6 e5       	ldi	r30, 0x56	; 86
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 61       	ori	r24, 0x10	; 16
    2d36:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2d38:	a6 e5       	ldi	r26, 0x56	; 86
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e6 e5       	ldi	r30, 0x56	; 86
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	80 68       	ori	r24, 0x80	; 128
    2d44:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2d46:	a6 e5       	ldi	r26, 0x56	; 86
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e6 e5       	ldi	r30, 0x56	; 86
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	84 60       	ori	r24, 0x04	; 4
    2d52:	8c 93       	st	X, r24
}
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
    2d62:	af e4       	ldi	r26, 0x4F	; 79
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	ef e4       	ldi	r30, 0x4F	; 79
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8e 7f       	andi	r24, 0xFE	; 254
    2d6e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
    2d70:	af e4       	ldi	r26, 0x4F	; 79
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ef e4       	ldi	r30, 0x4F	; 79
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	82 60       	ori	r24, 0x02	; 2
    2d7c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    2d7e:	ae e4       	ldi	r26, 0x4E	; 78
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	ee e4       	ldi	r30, 0x4E	; 78
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	88 60       	ori	r24, 0x08	; 8
    2d8a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    2d8c:	ae e4       	ldi	r26, 0x4E	; 78
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	ee e4       	ldi	r30, 0x4E	; 78
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	80 61       	ori	r24, 0x10	; 16
    2d98:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
    2d9a:	af e4       	ldi	r26, 0x4F	; 79
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	ef e4       	ldi	r30, 0x4F	; 79
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 7b       	andi	r24, 0xBF	; 191
    2da6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
    2da8:	af e4       	ldi	r26, 0x4F	; 79
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	ef e4       	ldi	r30, 0x4F	; 79
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 68       	ori	r24, 0x80	; 128
    2db4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
    2db6:	af e4       	ldi	r26, 0x4F	; 79
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ef e4       	ldi	r30, 0x4F	; 79
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8f 7e       	andi	r24, 0xEF	; 239
    2dc2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
    2dc4:	af e4       	ldi	r26, 0x4F	; 79
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ef e4       	ldi	r30, 0x4F	; 79
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	80 62       	ori	r24, 0x20	; 32
    2dd0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
    2dd2:	ae e4       	ldi	r26, 0x4E	; 78
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	ee e4       	ldi	r30, 0x4E	; 78
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	88 7f       	andi	r24, 0xF8	; 248
    2dde:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
    2de0:	a9 e5       	ldi	r26, 0x59	; 89
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e9 e5       	ldi	r30, 0x59	; 89
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	8b 7f       	andi	r24, 0xFB	; 251
    2dec:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    2dee:	a9 e5       	ldi	r26, 0x59	; 89
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e9 e5       	ldi	r30, 0x59	; 89
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	87 7f       	andi	r24, 0xF7	; 247
    2dfa:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    2dfc:	a9 e5       	ldi	r26, 0x59	; 89
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e9 e5       	ldi	r30, 0x59	; 89
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	8f 7e       	andi	r24, 0xEF	; 239
    2e08:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    2e0a:	a9 e5       	ldi	r26, 0x59	; 89
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e9 e5       	ldi	r30, 0x59	; 89
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	8f 7d       	andi	r24, 0xDF	; 223
    2e16:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    2e18:	a8 e5       	ldi	r26, 0x58	; 88
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e8 e5       	ldi	r30, 0x58	; 88
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	84 60       	ori	r24, 0x04	; 4
    2e24:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    2e26:	a8 e5       	ldi	r26, 0x58	; 88
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e8 e5       	ldi	r30, 0x58	; 88
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	88 60       	ori	r24, 0x08	; 8
    2e32:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    2e34:	a8 e5       	ldi	r26, 0x58	; 88
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e8 e5       	ldi	r30, 0x58	; 88
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	80 61       	ori	r24, 0x10	; 16
    2e40:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    2e42:	a8 e5       	ldi	r26, 0x58	; 88
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	e8 e5       	ldi	r30, 0x58	; 88
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	80 62       	ori	r24, 0x20	; 32
    2e4e:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    2e50:	ea e4       	ldi	r30, 0x4A	; 74
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    2e56:	eb e4       	ldi	r30, 0x4B	; 75
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    2e5c:	e8 e4       	ldi	r30, 0x48	; 72
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    2e62:	e9 e4       	ldi	r30, 0x49	; 73
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    2e68:	ec e4       	ldi	r30, 0x4C	; 76
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    2e6e:	ed e4       	ldi	r30, 0x4D	; 77
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    2e74:	e6 e4       	ldi	r30, 0x46	; 70
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    2e7a:	e7 e4       	ldi	r30, 0x47	; 71
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	10 82       	st	Z, r1
  
}
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <TIM1_voidEnable>:
void TIM1_voidEnable(u8 u8PrescalValCpy)
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	0f 92       	push	r0
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    2e92:	ae e4       	ldi	r26, 0x4E	; 78
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	ee e4       	ldi	r30, 0x4E	; 78
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	88 7f       	andi	r24, 0xF8	; 248
    2e9e:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    2ea0:	ae e4       	ldi	r26, 0x4E	; 78
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	ee e4       	ldi	r30, 0x4E	; 78
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	98 2f       	mov	r25, r24
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	87 70       	andi	r24, 0x07	; 7
    2eb0:	89 2b       	or	r24, r25
    2eb2:	8c 93       	st	X, r24
	
}
    2eb4:	0f 90       	pop	r0
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    2ec4:	ae e4       	ldi	r26, 0x4E	; 78
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	ee e4       	ldi	r30, 0x4E	; 78
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 7f       	andi	r24, 0xF8	; 248
    2ed0:	8c 93       	st	X, r24
	
}
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    2ee0:	a9 e5       	ldi	r26, 0x59	; 89
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e9 e5       	ldi	r30, 0x59	; 89
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	84 60       	ori	r24, 0x04	; 4
    2eec:	8c 93       	st	X, r24
	
}
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    2efc:	a9 e5       	ldi	r26, 0x59	; 89
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e9 e5       	ldi	r30, 0x59	; 89
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8b 7f       	andi	r24, 0xFB	; 251
    2f08:	8c 93       	st	X, r24
	
}
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    2f18:	a9 e5       	ldi	r26, 0x59	; 89
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e9 e5       	ldi	r30, 0x59	; 89
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	80 61       	ori	r24, 0x10	; 16
    2f24:	8c 93       	st	X, r24
	
}
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    2f34:	a9 e5       	ldi	r26, 0x59	; 89
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e9 e5       	ldi	r30, 0x59	; 89
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	8f 7e       	andi	r24, 0xEF	; 239
    2f40:	8c 93       	st	X, r24
	
}
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    2f50:	a9 e5       	ldi	r26, 0x59	; 89
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e9 e5       	ldi	r30, 0x59	; 89
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	88 60       	ori	r24, 0x08	; 8
    2f5c:	8c 93       	st	X, r24
	
}
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    2f6c:	a9 e5       	ldi	r26, 0x59	; 89
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e9 e5       	ldi	r30, 0x59	; 89
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	87 7f       	andi	r24, 0xF7	; 247
    2f78:	8c 93       	st	X, r24
	
}
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    2f88:	a9 e5       	ldi	r26, 0x59	; 89
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e9 e5       	ldi	r30, 0x59	; 89
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	80 62       	ori	r24, 0x20	; 32
    2f94:	8c 93       	st	X, r24
}
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    2fa4:	a9 e5       	ldi	r26, 0x59	; 89
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e9 e5       	ldi	r30, 0x59	; 89
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	8f 7d       	andi	r24, 0xDF	; 223
    2fb0:	8c 93       	st	X, r24
}
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <TIM1_voidSetCallbackOvfInt+0x6>
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	90 93 41 01 	sts	0x0141, r25
    2fce:	80 93 40 01 	sts	0x0140, r24
}
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <TIM1_voidSetCallbackCompAInt+0x6>
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	9a 81       	ldd	r25, Y+2	; 0x02
    2fee:	90 93 43 01 	sts	0x0143, r25
    2ff2:	80 93 42 01 	sts	0x0142, r24
}
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <TIM1_voidSetCallbackCompBInt+0x6>
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	9a 83       	std	Y+2, r25	; 0x02
    300c:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	9a 81       	ldd	r25, Y+2	; 0x02
    3012:	90 93 3d 01 	sts	0x013D, r25
    3016:	80 93 3c 01 	sts	0x013C, r24
}
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	00 d0       	rcall	.+0      	; 0x302a <TIM1_voidSetCallbackIcuInt+0x6>
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	9a 83       	std	Y+2, r25	; 0x02
    3030:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	90 93 3f 01 	sts	0x013F, r25
    303a:	80 93 3e 01 	sts	0x013E, r24
}
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(u16 u16TimValCpy) //TCNT
{
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	00 d0       	rcall	.+0      	; 0x304e <TIM1_voidSetTimerValue+0x6>
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(u8) u16TimValCpy;
    3056:	ec e4       	ldi	r30, 0x4C	; 76
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	80 83       	st	Z, r24
	TCNT1H =(u8) (u16TimValCpy>>8);
    305e:	ed e4       	ldi	r30, 0x4D	; 77
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	9a 81       	ldd	r25, Y+2	; 0x02
    3066:	89 2f       	mov	r24, r25
    3068:	99 27       	eor	r25, r25
    306a:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(u16 u16CmpAValCpy)
{
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	00 d0       	rcall	.+0      	; 0x307c <TIM1_voidSetCmpARegValue+0x6>
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	9a 83       	std	Y+2, r25	; 0x02
    3082:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (u8)u16CmpAValCpy;
    3084:	ea e4       	ldi	r30, 0x4A	; 74
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	80 83       	st	Z, r24
	OCR1AH= (u8)(u16CmpAValCpy>>8);
    308c:	eb e4       	ldi	r30, 0x4B	; 75
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	9a 81       	ldd	r25, Y+2	; 0x02
    3094:	89 2f       	mov	r24, r25
    3096:	99 27       	eor	r25, r25
    3098:	80 83       	st	Z, r24
	
}
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(u16 u16CmpBValCpy)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <TIM1_voidSetCmpBRegValue+0x6>
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	9a 83       	std	Y+2, r25	; 0x02
    30b0:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (u8)u16CmpBValCpy;
    30b2:	e8 e4       	ldi	r30, 0x48	; 72
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	80 83       	st	Z, r24
	OCR1BH= (u8)(u16CmpBValCpy>>8);
    30ba:	e9 e4       	ldi	r30, 0x49	; 73
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	9a 81       	ldd	r25, Y+2	; 0x02
    30c2:	89 2f       	mov	r24, r25
    30c4:	99 27       	eor	r25, r25
    30c6:	80 83       	st	Z, r24
	
}
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(u16 u16IcuValCpy)
{
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <TIM1_voidSetIcuRegValue+0x6>
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	9a 83       	std	Y+2, r25	; 0x02
    30de:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    30e0:	e6 e4       	ldi	r30, 0x46	; 70
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	91 83       	std	Z+1, r25	; 0x01
    30ea:	80 83       	st	Z, r24

}
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <TIM1_u8ReadTimerValue>:
u16 TIM1_u8ReadTimerValue(void)
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <TIM1_u8ReadTimerValue+0x6>
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
	u16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    3100:	ed e4       	ldi	r30, 0x4D	; 77
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	9a 81       	ldd	r25, Y+2	; 0x02
    3112:	98 2f       	mov	r25, r24
    3114:	88 27       	eor	r24, r24
    3116:	9a 83       	std	Y+2, r25	; 0x02
    3118:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    311a:	ec e4       	ldi	r30, 0x4C	; 76
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	82 2b       	or	r24, r18
    312a:	93 2b       	or	r25, r19
    312c:	9a 83       	std	Y+2, r25	; 0x02
    312e:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    313e:	1f 92       	push	r1
    3140:	0f 92       	push	r0
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	0f 92       	push	r0
    3146:	11 24       	eor	r1, r1
    3148:	2f 93       	push	r18
    314a:	3f 93       	push	r19
    314c:	4f 93       	push	r20
    314e:	5f 93       	push	r21
    3150:	6f 93       	push	r22
    3152:	7f 93       	push	r23
    3154:	8f 93       	push	r24
    3156:	9f 93       	push	r25
    3158:	af 93       	push	r26
    315a:	bf 93       	push	r27
    315c:	ef 93       	push	r30
    315e:	ff 93       	push	r31
    3160:	df 93       	push	r29
    3162:	cf 93       	push	r28
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    3168:	e0 91 40 01 	lds	r30, 0x0140
    316c:	f0 91 41 01 	lds	r31, 0x0141
    3170:	09 95       	icall
	
}
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	ff 91       	pop	r31
    3178:	ef 91       	pop	r30
    317a:	bf 91       	pop	r27
    317c:	af 91       	pop	r26
    317e:	9f 91       	pop	r25
    3180:	8f 91       	pop	r24
    3182:	7f 91       	pop	r23
    3184:	6f 91       	pop	r22
    3186:	5f 91       	pop	r21
    3188:	4f 91       	pop	r20
    318a:	3f 91       	pop	r19
    318c:	2f 91       	pop	r18
    318e:	0f 90       	pop	r0
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	0f 90       	pop	r0
    3194:	1f 90       	pop	r1
    3196:	18 95       	reti

00003198 <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    3198:	1f 92       	push	r1
    319a:	0f 92       	push	r0
    319c:	0f b6       	in	r0, 0x3f	; 63
    319e:	0f 92       	push	r0
    31a0:	11 24       	eor	r1, r1
    31a2:	2f 93       	push	r18
    31a4:	3f 93       	push	r19
    31a6:	4f 93       	push	r20
    31a8:	5f 93       	push	r21
    31aa:	6f 93       	push	r22
    31ac:	7f 93       	push	r23
    31ae:	8f 93       	push	r24
    31b0:	9f 93       	push	r25
    31b2:	af 93       	push	r26
    31b4:	bf 93       	push	r27
    31b6:	ef 93       	push	r30
    31b8:	ff 93       	push	r31
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    31c2:	e0 91 42 01 	lds	r30, 0x0142
    31c6:	f0 91 43 01 	lds	r31, 0x0143
    31ca:	09 95       	icall
}
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	ff 91       	pop	r31
    31d2:	ef 91       	pop	r30
    31d4:	bf 91       	pop	r27
    31d6:	af 91       	pop	r26
    31d8:	9f 91       	pop	r25
    31da:	8f 91       	pop	r24
    31dc:	7f 91       	pop	r23
    31de:	6f 91       	pop	r22
    31e0:	5f 91       	pop	r21
    31e2:	4f 91       	pop	r20
    31e4:	3f 91       	pop	r19
    31e6:	2f 91       	pop	r18
    31e8:	0f 90       	pop	r0
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	0f 90       	pop	r0
    31ee:	1f 90       	pop	r1
    31f0:	18 95       	reti

000031f2 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    31f2:	1f 92       	push	r1
    31f4:	0f 92       	push	r0
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	0f 92       	push	r0
    31fa:	11 24       	eor	r1, r1
    31fc:	2f 93       	push	r18
    31fe:	3f 93       	push	r19
    3200:	4f 93       	push	r20
    3202:	5f 93       	push	r21
    3204:	6f 93       	push	r22
    3206:	7f 93       	push	r23
    3208:	8f 93       	push	r24
    320a:	9f 93       	push	r25
    320c:	af 93       	push	r26
    320e:	bf 93       	push	r27
    3210:	ef 93       	push	r30
    3212:	ff 93       	push	r31
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    321c:	e0 91 3c 01 	lds	r30, 0x013C
    3220:	f0 91 3d 01 	lds	r31, 0x013D
    3224:	09 95       	icall
}
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	ff 91       	pop	r31
    322c:	ef 91       	pop	r30
    322e:	bf 91       	pop	r27
    3230:	af 91       	pop	r26
    3232:	9f 91       	pop	r25
    3234:	8f 91       	pop	r24
    3236:	7f 91       	pop	r23
    3238:	6f 91       	pop	r22
    323a:	5f 91       	pop	r21
    323c:	4f 91       	pop	r20
    323e:	3f 91       	pop	r19
    3240:	2f 91       	pop	r18
    3242:	0f 90       	pop	r0
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	0f 90       	pop	r0
    3248:	1f 90       	pop	r1
    324a:	18 95       	reti

0000324c <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    324c:	1f 92       	push	r1
    324e:	0f 92       	push	r0
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	0f 92       	push	r0
    3254:	11 24       	eor	r1, r1
    3256:	2f 93       	push	r18
    3258:	3f 93       	push	r19
    325a:	4f 93       	push	r20
    325c:	5f 93       	push	r21
    325e:	6f 93       	push	r22
    3260:	7f 93       	push	r23
    3262:	8f 93       	push	r24
    3264:	9f 93       	push	r25
    3266:	af 93       	push	r26
    3268:	bf 93       	push	r27
    326a:	ef 93       	push	r30
    326c:	ff 93       	push	r31
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    3276:	e0 91 3e 01 	lds	r30, 0x013E
    327a:	f0 91 3f 01 	lds	r31, 0x013F
    327e:	09 95       	icall
}
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	ff 91       	pop	r31
    3286:	ef 91       	pop	r30
    3288:	bf 91       	pop	r27
    328a:	af 91       	pop	r26
    328c:	9f 91       	pop	r25
    328e:	8f 91       	pop	r24
    3290:	7f 91       	pop	r23
    3292:	6f 91       	pop	r22
    3294:	5f 91       	pop	r21
    3296:	4f 91       	pop	r20
    3298:	3f 91       	pop	r19
    329a:	2f 91       	pop	r18
    329c:	0f 90       	pop	r0
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	0f 90       	pop	r0
    32a2:	1f 90       	pop	r1
    32a4:	18 95       	reti

000032a6 <TIM1_u16GetIcuValue>:

/*ICU*/


u16 TIM1_u16GetIcuValue(void)
{
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    32ae:	e6 e4       	ldi	r30, 0x46	; 70
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
}
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    32c4:	ae e4       	ldi	r26, 0x4E	; 78
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	ee e4       	ldi	r30, 0x4E	; 78
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	80 64       	ori	r24, 0x40	; 64
    32d0:	8c 93       	st	X, r24
 }
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	08 95       	ret

000032d8 <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    32e0:	ae e4       	ldi	r26, 0x4E	; 78
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	ee e4       	ldi	r30, 0x4E	; 78
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	8f 7b       	andi	r24, 0xBF	; 191
    32ec:	8c 93       	st	X, r24
 }
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <UART_voidInit>:
volatile u8 Global_Var=0;
void (*Tx_pf)(void)=NULL;
void (*Rx_pf)(void)=NULL;
u8 Data=0;
void UART_voidInit(void)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	0f 92       	push	r0
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Temp=0;
    32fe:	19 82       	std	Y+1, r1	; 0x01
/******   Enable Rx Interrupt (RXCIE)   *******/
SET_BIT(UCSRB,UCSRB_RXCIE);
    3300:	aa e2       	ldi	r26, 0x2A	; 42
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	ea e2       	ldi	r30, 0x2A	; 42
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	80 68       	ori	r24, 0x80	; 128
    330c:	8c 93       	st	X, r24
/******   Enable UDRIE          *******/
SET_BIT(UCSRB,UCSRB_UDRIE);
    330e:	aa e2       	ldi	r26, 0x2A	; 42
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	ea e2       	ldi	r30, 0x2A	; 42
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	80 62       	ori	r24, 0x20	; 32
    331a:	8c 93       	st	X, r24

/******   Select 8-BIT Data *********/
CLR_BIT(UCSRB,UCSRB_UCSZ2);
    331c:	aa e2       	ldi	r26, 0x2A	; 42
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	ea e2       	ldi	r30, 0x2A	; 42
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	8b 7f       	andi	r24, 0xFB	; 251
    3328:	8c 93       	st	X, r24
/*select UCSRC Register*/
SET_BIT(Local_Temp,UCSRC_URSEL);
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	80 68       	ori	r24, 0x80	; 128
    332e:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ0);
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	82 60       	ori	r24, 0x02	; 2
    3334:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ1);
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	84 60       	ori	r24, 0x04	; 4
    333a:	89 83       	std	Y+1, r24	; 0x01
/******  Select UART Mode *********/
CLR_BIT(Local_Temp,UCSRC_UMSEL);//select  Asynchronous Mode
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	8f 7b       	andi	r24, 0xBF	; 191
    3340:	89 83       	std	Y+1, r24	; 0x01
/******   Select Parity Mode *********/
CLR_BIT(Local_Temp,UCSRC_UPM0);//disable Parity
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	8f 7e       	andi	r24, 0xEF	; 239
    3346:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(Local_Temp,UCSRC_UPM1);
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	8f 7d       	andi	r24, 0xDF	; 223
    334c:	89 83       	std	Y+1, r24	; 0x01
/******   Select Stop bit *********/
CLR_BIT(Local_Temp,UCSRC_USBS);
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	87 7f       	andi	r24, 0xF7	; 247
    3352:	89 83       	std	Y+1, r24	; 0x01

UCSRC=Local_Temp;
    3354:	e0 e4       	ldi	r30, 0x40	; 64
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	80 83       	st	Z, r24

/******   Select BuadRate *********/
UBRRL=BUAD_RATE;
    335c:	e9 e2       	ldi	r30, 0x29	; 41
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	83 e3       	ldi	r24, 0x33	; 51
    3362:	80 83       	st	Z, r24
/******   Enable Rx *********/
SET_BIT(UCSRB,UCSRB_RXEN);
    3364:	aa e2       	ldi	r26, 0x2A	; 42
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	ea e2       	ldi	r30, 0x2A	; 42
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	80 61       	ori	r24, 0x10	; 16
    3370:	8c 93       	st	X, r24
/******   Enable Tx *********/
SET_BIT(UCSRB,UCSRB_TXEN);
    3372:	aa e2       	ldi	r26, 0x2A	; 42
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ea e2       	ldi	r30, 0x2A	; 42
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	88 60       	ori	r24, 0x08	; 8
    337e:	8c 93       	st	X, r24
}
    3380:	0f 90       	pop	r0
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret

00003388 <UART_voidSendData_Asynch>:
void UART_voidSendData_Asynch(u8 Copy_u8Data)
{
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	89 83       	std	Y+1, r24	; 0x01
//Global_Var =Copy_u8Data;
UDR =Copy_u8Data;
    3394:	ec e2       	ldi	r30, 0x2C	; 44
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	80 83       	st	Z, r24
}
    339c:	0f 90       	pop	r0
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <UART_u8ReceiveData>:
u8  UART_u8ReceiveData(void)
{
    33a4:	df 93       	push	r29
    33a6:	cf 93       	push	r28
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
//GET_BIT(UCSRA,UCSRA_RXC);
return UDR;
    33ac:	ec e2       	ldi	r30, 0x2C	; 44
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
}
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <__vector_13>:


// USART, RXC
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
    33b8:	1f 92       	push	r1
    33ba:	0f 92       	push	r0
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	0f 92       	push	r0
    33c0:	11 24       	eor	r1, r1
    33c2:	2f 93       	push	r18
    33c4:	3f 93       	push	r19
    33c6:	4f 93       	push	r20
    33c8:	5f 93       	push	r21
    33ca:	6f 93       	push	r22
    33cc:	7f 93       	push	r23
    33ce:	8f 93       	push	r24
    33d0:	9f 93       	push	r25
    33d2:	af 93       	push	r26
    33d4:	bf 93       	push	r27
    33d6:	ef 93       	push	r30
    33d8:	ff 93       	push	r31
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
	Rx_pf();
    33e2:	e0 91 37 01 	lds	r30, 0x0137
    33e6:	f0 91 38 01 	lds	r31, 0x0138
    33ea:	09 95       	icall
}
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	ff 91       	pop	r31
    33f2:	ef 91       	pop	r30
    33f4:	bf 91       	pop	r27
    33f6:	af 91       	pop	r26
    33f8:	9f 91       	pop	r25
    33fa:	8f 91       	pop	r24
    33fc:	7f 91       	pop	r23
    33fe:	6f 91       	pop	r22
    3400:	5f 91       	pop	r21
    3402:	4f 91       	pop	r20
    3404:	3f 91       	pop	r19
    3406:	2f 91       	pop	r18
    3408:	0f 90       	pop	r0
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	0f 90       	pop	r0
    340e:	1f 90       	pop	r1
    3410:	18 95       	reti

00003412 <__vector_14>:
// USART, UDRE
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
    3412:	1f 92       	push	r1
    3414:	0f 92       	push	r0
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	0f 92       	push	r0
    341a:	11 24       	eor	r1, r1
    341c:	2f 93       	push	r18
    341e:	3f 93       	push	r19
    3420:	4f 93       	push	r20
    3422:	5f 93       	push	r21
    3424:	6f 93       	push	r22
    3426:	7f 93       	push	r23
    3428:	8f 93       	push	r24
    342a:	9f 93       	push	r25
    342c:	af 93       	push	r26
    342e:	bf 93       	push	r27
    3430:	ef 93       	push	r30
    3432:	ff 93       	push	r31
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
	Tx_pf();
    343c:	e0 91 35 01 	lds	r30, 0x0135
    3440:	f0 91 36 01 	lds	r31, 0x0136
    3444:	09 95       	icall
	//UART_voidSendData_Asynch();
}
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	ff 91       	pop	r31
    344c:	ef 91       	pop	r30
    344e:	bf 91       	pop	r27
    3450:	af 91       	pop	r26
    3452:	9f 91       	pop	r25
    3454:	8f 91       	pop	r24
    3456:	7f 91       	pop	r23
    3458:	6f 91       	pop	r22
    345a:	5f 91       	pop	r21
    345c:	4f 91       	pop	r20
    345e:	3f 91       	pop	r19
    3460:	2f 91       	pop	r18
    3462:	0f 90       	pop	r0
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	0f 90       	pop	r0
    3468:	1f 90       	pop	r1
    346a:	18 95       	reti

0000346c <__vector_15>:
//USART, TXC
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void){
    346c:	1f 92       	push	r1
    346e:	0f 92       	push	r0
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	0f 92       	push	r0
    3474:	11 24       	eor	r1, r1
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62

}
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	0f 90       	pop	r0
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	0f 90       	pop	r0
    3488:	1f 90       	pop	r1
    348a:	18 95       	reti

0000348c <UARTTX_vidSetISR>:
void UARTTX_vidSetISR(void (*p)(void))
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	00 d0       	rcall	.+0      	; 0x3492 <UARTTX_vidSetISR+0x6>
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
	Tx_pf=p;
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	90 93 36 01 	sts	0x0136, r25
    34a2:	80 93 35 01 	sts	0x0135, r24
	//Data=value;
	}
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <UARTRX_vidSetISR>:
void UARTRX_vidSetISR(void (*p)(void))
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <UARTRX_vidSetISR+0x6>
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	9a 83       	std	Y+2, r25	; 0x02
    34bc:	89 83       	std	Y+1, r24	; 0x01
	Rx_pf=p;
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	9a 81       	ldd	r25, Y+2	; 0x02
    34c2:	90 93 38 01 	sts	0x0138, r25
    34c6:	80 93 37 01 	sts	0x0137, r24
	//Data=value;
	}
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <disable_tx>:

void disable_tx(void)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    34dc:	aa e2       	ldi	r26, 0x2A	; 42
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	ea e2       	ldi	r30, 0x2A	; 42
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	8f 7d       	andi	r24, 0xDF	; 223
    34e8:	8c 93       	st	X, r24

	}
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	08 95       	ret

000034f0 <enable_tx>:
void enable_tx(void)
{
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
    34f8:	aa e2       	ldi	r26, 0x2A	; 42
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	ea e2       	ldi	r30, 0x2A	; 42
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	80 62       	ori	r24, 0x20	; 32
    3504:	8c 93       	st	X, r24

}
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <main>:
#define EEPROM_PASSWORD_LOCATION2   0x32
#define EEPROM_PASSWORD_LOCATION3   0x33
#define EEPROM_PASSWORD_LOCATION4   0x34

void main (void)
{
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	c0 57       	subi	r28, 0x70	; 112
    351a:	d0 40       	sbci	r29, 0x00	; 0
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61

	DIO_vidsetPortDir(DIO_PORTB,0x0f);//Initialize Keypad PORT
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	6f e0       	ldi	r22, 0x0F	; 15
    352a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_vidsetPortDir>
	DIO_vidsetPortval(DIO_PORTB,0xf0);
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	60 ef       	ldi	r22, 0xF0	; 240
    3532:	0e 94 58 08 	call	0x10b0	; 0x10b0 <DIO_vidsetPortval>

	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN0,DIO_INPUT);//ADC
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	40 e0       	ldi	r20, 0x00	; 0
    353c:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);//ROOM1
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	63 e0       	ldi	r22, 0x03	; 3
    3544:	41 e0       	ldi	r20, 0x01	; 1
    3546:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);//ROOM2
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	64 e0       	ldi	r22, 0x04	; 4
    354e:	41 e0       	ldi	r20, 0x01	; 1
    3550:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);//Buzzer
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	65 e0       	ldi	r22, 0x05	; 5
    3558:	41 e0       	ldi	r20, 0x01	; 1
    355a:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);//TV
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	66 e0       	ldi	r22, 0x06	; 6
    3562:	41 e0       	ldi	r20, 0x01	; 1
    3564:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);//TIM1
    3568:	83 e0       	ldi	r24, 0x03	; 3
    356a:	64 e0       	ldi	r22, 0x04	; 4
    356c:	41 e0       	ldi	r20, 0x01	; 1
    356e:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);//DC Motor
    3572:	83 e0       	ldi	r24, 0x03	; 3
    3574:	66 e0       	ldi	r22, 0x06	; 6
    3576:	41 e0       	ldi	r20, 0x01	; 1
    3578:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>
	DIO_vidsetPinDir(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);//LED
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	67 e0       	ldi	r22, 0x07	; 7
    3580:	41 e0       	ldi	r20, 0x01	; 1
    3582:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vidsetPinDir>


	HLCD_vidInit_4bit();
    3586:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <HLCD_vidInit_4bit>
//
//	//SERVO
//	TIM1_voidSetCmpBRegValue(2000);//90 degree ->875

	//EEPROM + I2C
	TWI_vMasterInit();
    358a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <TWI_vMasterInit>


	DC_Intro();
    358e:	0e 94 85 14 	call	0x290a	; 0x290a <DC_Intro>
    3592:	fe 01       	movw	r30, r28
    3594:	e3 59       	subi	r30, 0x93	; 147
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	aa e7       	ldi	r26, 0x7A	; 122
    359e:	b4 e4       	ldi	r27, 0x44	; 68
    35a0:	80 83       	st	Z, r24
    35a2:	91 83       	std	Z+1, r25	; 0x01
    35a4:	a2 83       	std	Z+2, r26	; 0x02
    35a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a8:	8e 01       	movw	r16, r28
    35aa:	07 59       	subi	r16, 0x97	; 151
    35ac:	1f 4f       	sbci	r17, 0xFF	; 255
    35ae:	fe 01       	movw	r30, r28
    35b0:	e3 59       	subi	r30, 0x93	; 147
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	60 81       	ld	r22, Z
    35b6:	71 81       	ldd	r23, Z+1	; 0x01
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	93 81       	ldd	r25, Z+3	; 0x03
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	4a ef       	ldi	r20, 0xFA	; 250
    35c2:	54 e4       	ldi	r21, 0x44	; 68
    35c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	f8 01       	movw	r30, r16
    35ce:	80 83       	st	Z, r24
    35d0:	91 83       	std	Z+1, r25	; 0x01
    35d2:	a2 83       	std	Z+2, r26	; 0x02
    35d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35d6:	fe 01       	movw	r30, r28
    35d8:	e7 59       	subi	r30, 0x97	; 151
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	60 81       	ld	r22, Z
    35de:	71 81       	ldd	r23, Z+1	; 0x01
    35e0:	82 81       	ldd	r24, Z+2	; 0x02
    35e2:	93 81       	ldd	r25, Z+3	; 0x03
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e8       	ldi	r20, 0x80	; 128
    35ea:	5f e3       	ldi	r21, 0x3F	; 63
    35ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35f0:	88 23       	and	r24, r24
    35f2:	44 f4       	brge	.+16     	; 0x3604 <main+0xf8>
		__ticks = 1;
    35f4:	fe 01       	movw	r30, r28
    35f6:	e9 59       	subi	r30, 0x99	; 153
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	64 c0       	rjmp	.+200    	; 0x36cc <main+0x1c0>
	else if (__tmp > 65535)
    3604:	fe 01       	movw	r30, r28
    3606:	e7 59       	subi	r30, 0x97	; 151
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	3f ef       	ldi	r19, 0xFF	; 255
    3616:	4f e7       	ldi	r20, 0x7F	; 127
    3618:	57 e4       	ldi	r21, 0x47	; 71
    361a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    361e:	18 16       	cp	r1, r24
    3620:	0c f0       	brlt	.+2      	; 0x3624 <main+0x118>
    3622:	43 c0       	rjmp	.+134    	; 0x36aa <main+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3624:	fe 01       	movw	r30, r28
    3626:	e3 59       	subi	r30, 0x93	; 147
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e2       	ldi	r20, 0x20	; 32
    3638:	51 e4       	ldi	r21, 0x41	; 65
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	8e 01       	movw	r16, r28
    3644:	09 59       	subi	r16, 0x99	; 153
    3646:	1f 4f       	sbci	r17, 0xFF	; 255
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	f8 01       	movw	r30, r16
    3656:	91 83       	std	Z+1, r25	; 0x01
    3658:	80 83       	st	Z, r24
    365a:	1f c0       	rjmp	.+62     	; 0x369a <main+0x18e>
    365c:	fe 01       	movw	r30, r28
    365e:	eb 59       	subi	r30, 0x9B	; 155
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	88 ec       	ldi	r24, 0xC8	; 200
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24
    366a:	fe 01       	movw	r30, r28
    366c:	eb 59       	subi	r30, 0x9B	; 155
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	80 81       	ld	r24, Z
    3672:	91 81       	ldd	r25, Z+1	; 0x01
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <main+0x168>
    3678:	fe 01       	movw	r30, r28
    367a:	eb 59       	subi	r30, 0x9B	; 155
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3682:	de 01       	movw	r26, r28
    3684:	a9 59       	subi	r26, 0x99	; 153
    3686:	bf 4f       	sbci	r27, 0xFF	; 255
    3688:	fe 01       	movw	r30, r28
    368a:	e9 59       	subi	r30, 0x99	; 153
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 81       	ld	r24, Z
    3690:	91 81       	ldd	r25, Z+1	; 0x01
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	11 96       	adiw	r26, 0x01	; 1
    3696:	9c 93       	st	X, r25
    3698:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    369a:	fe 01       	movw	r30, r28
    369c:	e9 59       	subi	r30, 0x99	; 153
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	d1 f6       	brne	.-76     	; 0x365c <main+0x150>
    36a8:	27 c0       	rjmp	.+78     	; 0x36f8 <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36aa:	8e 01       	movw	r16, r28
    36ac:	09 59       	subi	r16, 0x99	; 153
    36ae:	1f 4f       	sbci	r17, 0xFF	; 255
    36b0:	fe 01       	movw	r30, r28
    36b2:	e7 59       	subi	r30, 0x97	; 151
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	60 81       	ld	r22, Z
    36b8:	71 81       	ldd	r23, Z+1	; 0x01
    36ba:	82 81       	ldd	r24, Z+2	; 0x02
    36bc:	93 81       	ldd	r25, Z+3	; 0x03
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	f8 01       	movw	r30, r16
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	80 83       	st	Z, r24
    36cc:	de 01       	movw	r26, r28
    36ce:	ad 59       	subi	r26, 0x9D	; 157
    36d0:	bf 4f       	sbci	r27, 0xFF	; 255
    36d2:	fe 01       	movw	r30, r28
    36d4:	e9 59       	subi	r30, 0x99	; 153
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	8d 93       	st	X+, r24
    36de:	9c 93       	st	X, r25
    36e0:	fe 01       	movw	r30, r28
    36e2:	ed 59       	subi	r30, 0x9D	; 157
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	01 97       	sbiw	r24, 0x01	; 1
    36ec:	f1 f7       	brne	.-4      	; 0x36ea <main+0x1de>
    36ee:	fe 01       	movw	r30, r28
    36f0:	ed 59       	subi	r30, 0x9D	; 157
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	80 83       	st	Z, r24
	_delay_ms(1000);
	HLCD_vidSendCMD_4BIT(LCD_CLR);
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
	//EEPROM_vWrite(EEPROM_STATUS_LOCATION,NOT_PRESSED);
	EEPROM_vRead(EEPROM_STATUS_LOCATION,&Status);
    36fe:	28 e4       	ldi	r18, 0x48	; 72
    3700:	31 e0       	ldi	r19, 0x01	; 1
    3702:	8e e5       	ldi	r24, 0x5E	; 94
    3704:	b9 01       	movw	r22, r18
    3706:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <EEPROM_vRead>
	if(Status==NOT_PRESSED)
    370a:	80 91 48 01 	lds	r24, 0x0148
    370e:	8f 3f       	cpi	r24, 0xFF	; 255
    3710:	09 f0       	breq	.+2      	; 0x3714 <main+0x208>
    3712:	26 c4       	rjmp	.+2124   	; 0x3f60 <main+0xa54>
	{
		HLCD_vidWriteStr_4BIT("Set Passwd2:");
    3714:	8c ea       	ldi	r24, 0xAC	; 172
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
		for(i=0;i<=3;i++)
    371c:	10 92 4d 01 	sts	0x014D, r1
    3720:	8a c1       	rjmp	.+788    	; 0x3a36 <main+0x52a>
		{
			do {
				Key = KPD_u8GetPressedKey();
    3722:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    3726:	80 93 54 01 	sts	0x0154, r24
			}while(Key==NOT_PRESSED);
    372a:	80 91 54 01 	lds	r24, 0x0154
    372e:	8f 3f       	cpi	r24, 0xFF	; 255
    3730:	c1 f3       	breq	.-16     	; 0x3722 <main+0x216>
			HLCD_vidSendChar_4BIT(Key);
    3732:	80 91 54 01 	lds	r24, 0x0154
    3736:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_vidSendChar_4BIT>
    373a:	fe 01       	movw	r30, r28
    373c:	e1 5a       	subi	r30, 0xA1	; 161
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	aa ef       	ldi	r26, 0xFA	; 250
    3746:	b3 e4       	ldi	r27, 0x43	; 67
    3748:	80 83       	st	Z, r24
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	a2 83       	std	Z+2, r26	; 0x02
    374e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3750:	8e 01       	movw	r16, r28
    3752:	05 5a       	subi	r16, 0xA5	; 165
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	fe 01       	movw	r30, r28
    3758:	e1 5a       	subi	r30, 0xA1	; 161
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	60 81       	ld	r22, Z
    375e:	71 81       	ldd	r23, Z+1	; 0x01
    3760:	82 81       	ldd	r24, Z+2	; 0x02
    3762:	93 81       	ldd	r25, Z+3	; 0x03
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	4a ef       	ldi	r20, 0xFA	; 250
    376a:	54 e4       	ldi	r21, 0x44	; 68
    376c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	f8 01       	movw	r30, r16
    3776:	80 83       	st	Z, r24
    3778:	91 83       	std	Z+1, r25	; 0x01
    377a:	a2 83       	std	Z+2, r26	; 0x02
    377c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    377e:	fe 01       	movw	r30, r28
    3780:	e5 5a       	subi	r30, 0xA5	; 165
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	82 81       	ldd	r24, Z+2	; 0x02
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e8       	ldi	r20, 0x80	; 128
    3792:	5f e3       	ldi	r21, 0x3F	; 63
    3794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3798:	88 23       	and	r24, r24
    379a:	44 f4       	brge	.+16     	; 0x37ac <main+0x2a0>
		__ticks = 1;
    379c:	fe 01       	movw	r30, r28
    379e:	e7 5a       	subi	r30, 0xA7	; 167
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	80 83       	st	Z, r24
    37aa:	64 c0       	rjmp	.+200    	; 0x3874 <main+0x368>
	else if (__tmp > 65535)
    37ac:	fe 01       	movw	r30, r28
    37ae:	e5 5a       	subi	r30, 0xA5	; 165
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	60 81       	ld	r22, Z
    37b4:	71 81       	ldd	r23, Z+1	; 0x01
    37b6:	82 81       	ldd	r24, Z+2	; 0x02
    37b8:	93 81       	ldd	r25, Z+3	; 0x03
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	3f ef       	ldi	r19, 0xFF	; 255
    37be:	4f e7       	ldi	r20, 0x7F	; 127
    37c0:	57 e4       	ldi	r21, 0x47	; 71
    37c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c6:	18 16       	cp	r1, r24
    37c8:	0c f0       	brlt	.+2      	; 0x37cc <main+0x2c0>
    37ca:	43 c0       	rjmp	.+134    	; 0x3852 <main+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37cc:	fe 01       	movw	r30, r28
    37ce:	e1 5a       	subi	r30, 0xA1	; 161
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	60 81       	ld	r22, Z
    37d4:	71 81       	ldd	r23, Z+1	; 0x01
    37d6:	82 81       	ldd	r24, Z+2	; 0x02
    37d8:	93 81       	ldd	r25, Z+3	; 0x03
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e2       	ldi	r20, 0x20	; 32
    37e0:	51 e4       	ldi	r21, 0x41	; 65
    37e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	8e 01       	movw	r16, r28
    37ec:	07 5a       	subi	r16, 0xA7	; 167
    37ee:	1f 4f       	sbci	r17, 0xFF	; 255
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	f8 01       	movw	r30, r16
    37fe:	91 83       	std	Z+1, r25	; 0x01
    3800:	80 83       	st	Z, r24
    3802:	1f c0       	rjmp	.+62     	; 0x3842 <main+0x336>
    3804:	fe 01       	movw	r30, r28
    3806:	e9 5a       	subi	r30, 0xA9	; 169
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	88 ec       	ldi	r24, 0xC8	; 200
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	80 83       	st	Z, r24
    3812:	fe 01       	movw	r30, r28
    3814:	e9 5a       	subi	r30, 0xA9	; 169
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 81       	ld	r24, Z
    381a:	91 81       	ldd	r25, Z+1	; 0x01
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	f1 f7       	brne	.-4      	; 0x381c <main+0x310>
    3820:	fe 01       	movw	r30, r28
    3822:	e9 5a       	subi	r30, 0xA9	; 169
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	91 83       	std	Z+1, r25	; 0x01
    3828:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382a:	de 01       	movw	r26, r28
    382c:	a7 5a       	subi	r26, 0xA7	; 167
    382e:	bf 4f       	sbci	r27, 0xFF	; 255
    3830:	fe 01       	movw	r30, r28
    3832:	e7 5a       	subi	r30, 0xA7	; 167
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	01 97       	sbiw	r24, 0x01	; 1
    383c:	11 96       	adiw	r26, 0x01	; 1
    383e:	9c 93       	st	X, r25
    3840:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3842:	fe 01       	movw	r30, r28
    3844:	e7 5a       	subi	r30, 0xA7	; 167
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	80 81       	ld	r24, Z
    384a:	91 81       	ldd	r25, Z+1	; 0x01
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	d1 f6       	brne	.-76     	; 0x3804 <main+0x2f8>
    3850:	27 c0       	rjmp	.+78     	; 0x38a0 <main+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3852:	8e 01       	movw	r16, r28
    3854:	07 5a       	subi	r16, 0xA7	; 167
    3856:	1f 4f       	sbci	r17, 0xFF	; 255
    3858:	fe 01       	movw	r30, r28
    385a:	e5 5a       	subi	r30, 0xA5	; 165
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	60 81       	ld	r22, Z
    3860:	71 81       	ldd	r23, Z+1	; 0x01
    3862:	82 81       	ldd	r24, Z+2	; 0x02
    3864:	93 81       	ldd	r25, Z+3	; 0x03
    3866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	f8 01       	movw	r30, r16
    3870:	91 83       	std	Z+1, r25	; 0x01
    3872:	80 83       	st	Z, r24
    3874:	de 01       	movw	r26, r28
    3876:	ab 5a       	subi	r26, 0xAB	; 171
    3878:	bf 4f       	sbci	r27, 0xFF	; 255
    387a:	fe 01       	movw	r30, r28
    387c:	e7 5a       	subi	r30, 0xA7	; 167
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	91 81       	ldd	r25, Z+1	; 0x01
    3884:	8d 93       	st	X+, r24
    3886:	9c 93       	st	X, r25
    3888:	fe 01       	movw	r30, r28
    388a:	eb 5a       	subi	r30, 0xAB	; 171
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <main+0x386>
    3896:	fe 01       	movw	r30, r28
    3898:	eb 5a       	subi	r30, 0xAB	; 171
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	80 83       	st	Z, r24
			_delay_ms(500);
			HLCD_vidGoToXY(0,11+i);
    38a0:	80 91 4d 01 	lds	r24, 0x014D
    38a4:	98 2f       	mov	r25, r24
    38a6:	95 5f       	subi	r25, 0xF5	; 245
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	69 2f       	mov	r22, r25
    38ac:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
			HLCD_vidSendChar_4BIT('*');
    38b0:	8a e2       	ldi	r24, 0x2A	; 42
    38b2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_vidSendChar_4BIT>
    38b6:	fe 01       	movw	r30, r28
    38b8:	ef 5a       	subi	r30, 0xAF	; 175
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	aa ef       	ldi	r26, 0xFA	; 250
    38c2:	b3 e4       	ldi	r27, 0x43	; 67
    38c4:	80 83       	st	Z, r24
    38c6:	91 83       	std	Z+1, r25	; 0x01
    38c8:	a2 83       	std	Z+2, r26	; 0x02
    38ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38cc:	8e 01       	movw	r16, r28
    38ce:	03 5b       	subi	r16, 0xB3	; 179
    38d0:	1f 4f       	sbci	r17, 0xFF	; 255
    38d2:	fe 01       	movw	r30, r28
    38d4:	ef 5a       	subi	r30, 0xAF	; 175
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	60 81       	ld	r22, Z
    38da:	71 81       	ldd	r23, Z+1	; 0x01
    38dc:	82 81       	ldd	r24, Z+2	; 0x02
    38de:	93 81       	ldd	r25, Z+3	; 0x03
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	4a ef       	ldi	r20, 0xFA	; 250
    38e6:	54 e4       	ldi	r21, 0x44	; 68
    38e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	f8 01       	movw	r30, r16
    38f2:	80 83       	st	Z, r24
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	a2 83       	std	Z+2, r26	; 0x02
    38f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38fa:	fe 01       	movw	r30, r28
    38fc:	e3 5b       	subi	r30, 0xB3	; 179
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	60 81       	ld	r22, Z
    3902:	71 81       	ldd	r23, Z+1	; 0x01
    3904:	82 81       	ldd	r24, Z+2	; 0x02
    3906:	93 81       	ldd	r25, Z+3	; 0x03
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e8       	ldi	r20, 0x80	; 128
    390e:	5f e3       	ldi	r21, 0x3F	; 63
    3910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3914:	88 23       	and	r24, r24
    3916:	44 f4       	brge	.+16     	; 0x3928 <main+0x41c>
		__ticks = 1;
    3918:	fe 01       	movw	r30, r28
    391a:	e5 5b       	subi	r30, 0xB5	; 181
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	91 83       	std	Z+1, r25	; 0x01
    3924:	80 83       	st	Z, r24
    3926:	64 c0       	rjmp	.+200    	; 0x39f0 <main+0x4e4>
	else if (__tmp > 65535)
    3928:	fe 01       	movw	r30, r28
    392a:	e3 5b       	subi	r30, 0xB3	; 179
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	60 81       	ld	r22, Z
    3930:	71 81       	ldd	r23, Z+1	; 0x01
    3932:	82 81       	ldd	r24, Z+2	; 0x02
    3934:	93 81       	ldd	r25, Z+3	; 0x03
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	3f ef       	ldi	r19, 0xFF	; 255
    393a:	4f e7       	ldi	r20, 0x7F	; 127
    393c:	57 e4       	ldi	r21, 0x47	; 71
    393e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3942:	18 16       	cp	r1, r24
    3944:	0c f0       	brlt	.+2      	; 0x3948 <main+0x43c>
    3946:	43 c0       	rjmp	.+134    	; 0x39ce <main+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3948:	fe 01       	movw	r30, r28
    394a:	ef 5a       	subi	r30, 0xAF	; 175
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	60 81       	ld	r22, Z
    3950:	71 81       	ldd	r23, Z+1	; 0x01
    3952:	82 81       	ldd	r24, Z+2	; 0x02
    3954:	93 81       	ldd	r25, Z+3	; 0x03
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e2       	ldi	r20, 0x20	; 32
    395c:	51 e4       	ldi	r21, 0x41	; 65
    395e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	8e 01       	movw	r16, r28
    3968:	05 5b       	subi	r16, 0xB5	; 181
    396a:	1f 4f       	sbci	r17, 0xFF	; 255
    396c:	bc 01       	movw	r22, r24
    396e:	cd 01       	movw	r24, r26
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	f8 01       	movw	r30, r16
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	1f c0       	rjmp	.+62     	; 0x39be <main+0x4b2>
    3980:	fe 01       	movw	r30, r28
    3982:	e7 5b       	subi	r30, 0xB7	; 183
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	88 ec       	ldi	r24, 0xC8	; 200
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	91 83       	std	Z+1, r25	; 0x01
    398c:	80 83       	st	Z, r24
    398e:	fe 01       	movw	r30, r28
    3990:	e7 5b       	subi	r30, 0xB7	; 183
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	80 81       	ld	r24, Z
    3996:	91 81       	ldd	r25, Z+1	; 0x01
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <main+0x48c>
    399c:	fe 01       	movw	r30, r28
    399e:	e7 5b       	subi	r30, 0xB7	; 183
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	91 83       	std	Z+1, r25	; 0x01
    39a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a6:	de 01       	movw	r26, r28
    39a8:	a5 5b       	subi	r26, 0xB5	; 181
    39aa:	bf 4f       	sbci	r27, 0xFF	; 255
    39ac:	fe 01       	movw	r30, r28
    39ae:	e5 5b       	subi	r30, 0xB5	; 181
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	11 96       	adiw	r26, 0x01	; 1
    39ba:	9c 93       	st	X, r25
    39bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39be:	fe 01       	movw	r30, r28
    39c0:	e5 5b       	subi	r30, 0xB5	; 181
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 81       	ld	r24, Z
    39c6:	91 81       	ldd	r25, Z+1	; 0x01
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	d1 f6       	brne	.-76     	; 0x3980 <main+0x474>
    39cc:	27 c0       	rjmp	.+78     	; 0x3a1c <main+0x510>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ce:	8e 01       	movw	r16, r28
    39d0:	05 5b       	subi	r16, 0xB5	; 181
    39d2:	1f 4f       	sbci	r17, 0xFF	; 255
    39d4:	fe 01       	movw	r30, r28
    39d6:	e3 5b       	subi	r30, 0xB3	; 179
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	60 81       	ld	r22, Z
    39dc:	71 81       	ldd	r23, Z+1	; 0x01
    39de:	82 81       	ldd	r24, Z+2	; 0x02
    39e0:	93 81       	ldd	r25, Z+3	; 0x03
    39e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	f8 01       	movw	r30, r16
    39ec:	91 83       	std	Z+1, r25	; 0x01
    39ee:	80 83       	st	Z, r24
    39f0:	de 01       	movw	r26, r28
    39f2:	a9 5b       	subi	r26, 0xB9	; 185
    39f4:	bf 4f       	sbci	r27, 0xFF	; 255
    39f6:	fe 01       	movw	r30, r28
    39f8:	e5 5b       	subi	r30, 0xB5	; 181
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	80 81       	ld	r24, Z
    39fe:	91 81       	ldd	r25, Z+1	; 0x01
    3a00:	8d 93       	st	X+, r24
    3a02:	9c 93       	st	X, r25
    3a04:	fe 01       	movw	r30, r28
    3a06:	e9 5b       	subi	r30, 0xB9	; 185
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	f1 f7       	brne	.-4      	; 0x3a0e <main+0x502>
    3a12:	fe 01       	movw	r30, r28
    3a14:	e9 5b       	subi	r30, 0xB9	; 185
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	80 83       	st	Z, r24
			_delay_ms(500);
			EEPROM_vWrite(EEPROM_PASSWORD_LOCATION1+i,Key);
    3a1c:	80 91 4d 01 	lds	r24, 0x014D
    3a20:	8f 5c       	subi	r24, 0xCF	; 207
    3a22:	90 91 54 01 	lds	r25, 0x0154
    3a26:	69 2f       	mov	r22, r25
    3a28:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_vWrite>
	//EEPROM_vWrite(EEPROM_STATUS_LOCATION,NOT_PRESSED);
	EEPROM_vRead(EEPROM_STATUS_LOCATION,&Status);
	if(Status==NOT_PRESSED)
	{
		HLCD_vidWriteStr_4BIT("Set Passwd2:");
		for(i=0;i<=3;i++)
    3a2c:	80 91 4d 01 	lds	r24, 0x014D
    3a30:	8f 5f       	subi	r24, 0xFF	; 255
    3a32:	80 93 4d 01 	sts	0x014D, r24
    3a36:	80 91 4d 01 	lds	r24, 0x014D
    3a3a:	84 30       	cpi	r24, 0x04	; 4
    3a3c:	08 f4       	brcc	.+2      	; 0x3a40 <main+0x534>
    3a3e:	71 ce       	rjmp	.-798    	; 0x3722 <main+0x216>
			HLCD_vidGoToXY(0,11+i);
			HLCD_vidSendChar_4BIT('*');
			_delay_ms(500);
			EEPROM_vWrite(EEPROM_PASSWORD_LOCATION1+i,Key);
		}
		EEPROM_vWrite(EEPROM_STATUS_LOCATION,0x00);
    3a40:	8e e5       	ldi	r24, 0x5E	; 94
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	0e 94 09 0b 	call	0x1612	; 0x1612 <EEPROM_vWrite>
    3a48:	8b c2       	rjmp	.+1302   	; 0x3f60 <main+0xa54>

	}

	while(flag==0)
	{
		HLCD_vidSendCMD_4BIT(LCD_CLR);
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
		HLCD_vidWriteStr_4BIT("Set Passwd:");
    3a50:	89 eb       	ldi	r24, 0xB9	; 185
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>

		for(i=0;i<=3;i++)
    3a58:	10 92 4d 01 	sts	0x014D, r1
    3a5c:	1d c1       	rjmp	.+570    	; 0x3c98 <main+0x78c>
		{
			do {
				Key = KPD_u8GetPressedKey();
    3a5e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    3a62:	80 93 54 01 	sts	0x0154, r24
			}while(Key==NOT_PRESSED);
    3a66:	80 91 54 01 	lds	r24, 0x0154
    3a6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a6c:	c1 f3       	breq	.-16     	; 0x3a5e <main+0x552>
			HLCD_vidSendChar_4BIT(Key);
    3a6e:	80 91 54 01 	lds	r24, 0x0154
    3a72:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_vidSendChar_4BIT>
    3a76:	fe 01       	movw	r30, r28
    3a78:	ed 5b       	subi	r30, 0xBD	; 189
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	aa ef       	ldi	r26, 0xFA	; 250
    3a82:	b3 e4       	ldi	r27, 0x43	; 67
    3a84:	80 83       	st	Z, r24
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	a2 83       	std	Z+2, r26	; 0x02
    3a8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a8c:	8e 01       	movw	r16, r28
    3a8e:	01 5c       	subi	r16, 0xC1	; 193
    3a90:	1f 4f       	sbci	r17, 0xFF	; 255
    3a92:	fe 01       	movw	r30, r28
    3a94:	ed 5b       	subi	r30, 0xBD	; 189
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	60 81       	ld	r22, Z
    3a9a:	71 81       	ldd	r23, Z+1	; 0x01
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	93 81       	ldd	r25, Z+3	; 0x03
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	4a ef       	ldi	r20, 0xFA	; 250
    3aa6:	54 e4       	ldi	r21, 0x44	; 68
    3aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	f8 01       	movw	r30, r16
    3ab2:	80 83       	st	Z, r24
    3ab4:	91 83       	std	Z+1, r25	; 0x01
    3ab6:	a2 83       	std	Z+2, r26	; 0x02
    3ab8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aba:	fe 01       	movw	r30, r28
    3abc:	ff 96       	adiw	r30, 0x3f	; 63
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	82 81       	ldd	r24, Z+2	; 0x02
    3ac4:	93 81       	ldd	r25, Z+3	; 0x03
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e8       	ldi	r20, 0x80	; 128
    3acc:	5f e3       	ldi	r21, 0x3F	; 63
    3ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ad2:	88 23       	and	r24, r24
    3ad4:	2c f4       	brge	.+10     	; 0x3ae0 <main+0x5d4>
		__ticks = 1;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	9e af       	std	Y+62, r25	; 0x3e
    3adc:	8d af       	std	Y+61, r24	; 0x3d
    3ade:	46 c0       	rjmp	.+140    	; 0x3b6c <main+0x660>
	else if (__tmp > 65535)
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	ff 96       	adiw	r30, 0x3f	; 63
    3ae4:	60 81       	ld	r22, Z
    3ae6:	71 81       	ldd	r23, Z+1	; 0x01
    3ae8:	82 81       	ldd	r24, Z+2	; 0x02
    3aea:	93 81       	ldd	r25, Z+3	; 0x03
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	3f ef       	ldi	r19, 0xFF	; 255
    3af0:	4f e7       	ldi	r20, 0x7F	; 127
    3af2:	57 e4       	ldi	r21, 0x47	; 71
    3af4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3af8:	18 16       	cp	r1, r24
    3afa:	64 f5       	brge	.+88     	; 0x3b54 <main+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afc:	fe 01       	movw	r30, r28
    3afe:	ed 5b       	subi	r30, 0xBD	; 189
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	60 81       	ld	r22, Z
    3b04:	71 81       	ldd	r23, Z+1	; 0x01
    3b06:	82 81       	ldd	r24, Z+2	; 0x02
    3b08:	93 81       	ldd	r25, Z+3	; 0x03
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e2       	ldi	r20, 0x20	; 32
    3b10:	51 e4       	ldi	r21, 0x41	; 65
    3b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	9e af       	std	Y+62, r25	; 0x3e
    3b28:	8d af       	std	Y+61, r24	; 0x3d
    3b2a:	0f c0       	rjmp	.+30     	; 0x3b4a <main+0x63e>
    3b2c:	88 ec       	ldi	r24, 0xC8	; 200
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	9c af       	std	Y+60, r25	; 0x3c
    3b32:	8b af       	std	Y+59, r24	; 0x3b
    3b34:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b36:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	f1 f7       	brne	.-4      	; 0x3b38 <main+0x62c>
    3b3c:	9c af       	std	Y+60, r25	; 0x3c
    3b3e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b42:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	9e af       	std	Y+62, r25	; 0x3e
    3b48:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	69 f7       	brne	.-38     	; 0x3b2c <main+0x620>
    3b52:	16 c0       	rjmp	.+44     	; 0x3b80 <main+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b54:	fe 01       	movw	r30, r28
    3b56:	ff 96       	adiw	r30, 0x3f	; 63
    3b58:	60 81       	ld	r22, Z
    3b5a:	71 81       	ldd	r23, Z+1	; 0x01
    3b5c:	82 81       	ldd	r24, Z+2	; 0x02
    3b5e:	93 81       	ldd	r25, Z+3	; 0x03
    3b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	9e af       	std	Y+62, r25	; 0x3e
    3b6a:	8d af       	std	Y+61, r24	; 0x3d
    3b6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b70:	9a af       	std	Y+58, r25	; 0x3a
    3b72:	89 af       	std	Y+57, r24	; 0x39
    3b74:	89 ad       	ldd	r24, Y+57	; 0x39
    3b76:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	f1 f7       	brne	.-4      	; 0x3b78 <main+0x66c>
    3b7c:	9a af       	std	Y+58, r25	; 0x3a
    3b7e:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			HLCD_vidGoToXY(0,11+i);
    3b80:	80 91 4d 01 	lds	r24, 0x014D
    3b84:	98 2f       	mov	r25, r24
    3b86:	95 5f       	subi	r25, 0xF5	; 245
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	69 2f       	mov	r22, r25
    3b8c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
			HLCD_vidSendChar_4BIT('*');
    3b90:	8a e2       	ldi	r24, 0x2A	; 42
    3b92:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_vidSendChar_4BIT>
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	aa ef       	ldi	r26, 0xFA	; 250
    3b9c:	b3 e4       	ldi	r27, 0x43	; 67
    3b9e:	8d ab       	std	Y+53, r24	; 0x35
    3ba0:	9e ab       	std	Y+54, r25	; 0x36
    3ba2:	af ab       	std	Y+55, r26	; 0x37
    3ba4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba6:	6d a9       	ldd	r22, Y+53	; 0x35
    3ba8:	7e a9       	ldd	r23, Y+54	; 0x36
    3baa:	8f a9       	ldd	r24, Y+55	; 0x37
    3bac:	98 ad       	ldd	r25, Y+56	; 0x38
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	4a ef       	ldi	r20, 0xFA	; 250
    3bb4:	54 e4       	ldi	r21, 0x44	; 68
    3bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	89 ab       	std	Y+49, r24	; 0x31
    3bc0:	9a ab       	std	Y+50, r25	; 0x32
    3bc2:	ab ab       	std	Y+51, r26	; 0x33
    3bc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    3bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    3bca:	8b a9       	ldd	r24, Y+51	; 0x33
    3bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e8       	ldi	r20, 0x80	; 128
    3bd4:	5f e3       	ldi	r21, 0x3F	; 63
    3bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bda:	88 23       	and	r24, r24
    3bdc:	2c f4       	brge	.+10     	; 0x3be8 <main+0x6dc>
		__ticks = 1;
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	98 ab       	std	Y+48, r25	; 0x30
    3be4:	8f a7       	std	Y+47, r24	; 0x2f
    3be6:	3f c0       	rjmp	.+126    	; 0x3c66 <main+0x75a>
	else if (__tmp > 65535)
    3be8:	69 a9       	ldd	r22, Y+49	; 0x31
    3bea:	7a a9       	ldd	r23, Y+50	; 0x32
    3bec:	8b a9       	ldd	r24, Y+51	; 0x33
    3bee:	9c a9       	ldd	r25, Y+52	; 0x34
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	3f ef       	ldi	r19, 0xFF	; 255
    3bf4:	4f e7       	ldi	r20, 0x7F	; 127
    3bf6:	57 e4       	ldi	r21, 0x47	; 71
    3bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bfc:	18 16       	cp	r1, r24
    3bfe:	4c f5       	brge	.+82     	; 0x3c52 <main+0x746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c00:	6d a9       	ldd	r22, Y+53	; 0x35
    3c02:	7e a9       	ldd	r23, Y+54	; 0x36
    3c04:	8f a9       	ldd	r24, Y+55	; 0x37
    3c06:	98 ad       	ldd	r25, Y+56	; 0x38
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e2       	ldi	r20, 0x20	; 32
    3c0e:	51 e4       	ldi	r21, 0x41	; 65
    3c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	bc 01       	movw	r22, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	98 ab       	std	Y+48, r25	; 0x30
    3c26:	8f a7       	std	Y+47, r24	; 0x2f
    3c28:	0f c0       	rjmp	.+30     	; 0x3c48 <main+0x73c>
    3c2a:	88 ec       	ldi	r24, 0xC8	; 200
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	9e a7       	std	Y+46, r25	; 0x2e
    3c30:	8d a7       	std	Y+45, r24	; 0x2d
    3c32:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c34:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <main+0x72a>
    3c3a:	9e a7       	std	Y+46, r25	; 0x2e
    3c3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c40:	98 a9       	ldd	r25, Y+48	; 0x30
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	98 ab       	std	Y+48, r25	; 0x30
    3c46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	69 f7       	brne	.-38     	; 0x3c2a <main+0x71e>
    3c50:	14 c0       	rjmp	.+40     	; 0x3c7a <main+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c52:	69 a9       	ldd	r22, Y+49	; 0x31
    3c54:	7a a9       	ldd	r23, Y+50	; 0x32
    3c56:	8b a9       	ldd	r24, Y+51	; 0x33
    3c58:	9c a9       	ldd	r25, Y+52	; 0x34
    3c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5e:	dc 01       	movw	r26, r24
    3c60:	cb 01       	movw	r24, r22
    3c62:	98 ab       	std	Y+48, r25	; 0x30
    3c64:	8f a7       	std	Y+47, r24	; 0x2f
    3c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c68:	98 a9       	ldd	r25, Y+48	; 0x30
    3c6a:	9c a7       	std	Y+44, r25	; 0x2c
    3c6c:	8b a7       	std	Y+43, r24	; 0x2b
    3c6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c70:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <main+0x766>
    3c76:	9c a7       	std	Y+44, r25	; 0x2c
    3c78:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			arr[i]=Key;
    3c7a:	80 91 4d 01 	lds	r24, 0x014D
    3c7e:	88 2f       	mov	r24, r24
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	20 91 54 01 	lds	r18, 0x0154
    3c86:	fc 01       	movw	r30, r24
    3c88:	ec 5b       	subi	r30, 0xBC	; 188
    3c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8c:	20 83       	st	Z, r18
	while(flag==0)
	{
		HLCD_vidSendCMD_4BIT(LCD_CLR);
		HLCD_vidWriteStr_4BIT("Set Passwd:");

		for(i=0;i<=3;i++)
    3c8e:	80 91 4d 01 	lds	r24, 0x014D
    3c92:	8f 5f       	subi	r24, 0xFF	; 255
    3c94:	80 93 4d 01 	sts	0x014D, r24
    3c98:	80 91 4d 01 	lds	r24, 0x014D
    3c9c:	84 30       	cpi	r24, 0x04	; 4
    3c9e:	08 f4       	brcc	.+2      	; 0x3ca2 <main+0x796>
    3ca0:	de ce       	rjmp	.-580    	; 0x3a5e <main+0x552>
			HLCD_vidSendChar_4BIT('*');
			_delay_ms(500);
			arr[i]=Key;
		}

		for(i=0;i<=3;i++)
    3ca2:	10 92 4d 01 	sts	0x014D, r1
    3ca6:	17 c0       	rjmp	.+46     	; 0x3cd6 <main+0x7ca>
		{

			EEPROM_vRead(EEPROM_PASSWORD_LOCATION1+i,&E_Data);
    3ca8:	80 91 4d 01 	lds	r24, 0x014D
    3cac:	8f 5c       	subi	r24, 0xCF	; 207
    3cae:	2c e4       	ldi	r18, 0x4C	; 76
    3cb0:	31 e0       	ldi	r19, 0x01	; 1
    3cb2:	b9 01       	movw	r22, r18
    3cb4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <EEPROM_vRead>
			arr2[i]=E_Data;
    3cb8:	80 91 4d 01 	lds	r24, 0x014D
    3cbc:	88 2f       	mov	r24, r24
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	20 91 4c 01 	lds	r18, 0x014C
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	eb 5a       	subi	r30, 0xAB	; 171
    3cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cca:	20 83       	st	Z, r18
			HLCD_vidSendChar_4BIT('*');
			_delay_ms(500);
			arr[i]=Key;
		}

		for(i=0;i<=3;i++)
    3ccc:	80 91 4d 01 	lds	r24, 0x014D
    3cd0:	8f 5f       	subi	r24, 0xFF	; 255
    3cd2:	80 93 4d 01 	sts	0x014D, r24
    3cd6:	80 91 4d 01 	lds	r24, 0x014D
    3cda:	84 30       	cpi	r24, 0x04	; 4
    3cdc:	28 f3       	brcs	.-54     	; 0x3ca8 <main+0x79c>
		{

			EEPROM_vRead(EEPROM_PASSWORD_LOCATION1+i,&E_Data);
			arr2[i]=E_Data;
		}
		if((arr[0]==arr2[0])&&(arr[1]==arr2[1])&&(arr[2]==arr2[2])&&(arr[3]==arr2[3]))
    3cde:	90 91 44 01 	lds	r25, 0x0144
    3ce2:	80 91 55 01 	lds	r24, 0x0155
    3ce6:	98 17       	cp	r25, r24
    3ce8:	b1 f4       	brne	.+44     	; 0x3d16 <main+0x80a>
    3cea:	90 91 45 01 	lds	r25, 0x0145
    3cee:	80 91 56 01 	lds	r24, 0x0156
    3cf2:	98 17       	cp	r25, r24
    3cf4:	81 f4       	brne	.+32     	; 0x3d16 <main+0x80a>
    3cf6:	90 91 46 01 	lds	r25, 0x0146
    3cfa:	80 91 57 01 	lds	r24, 0x0157
    3cfe:	98 17       	cp	r25, r24
    3d00:	51 f4       	brne	.+20     	; 0x3d16 <main+0x80a>
    3d02:	90 91 47 01 	lds	r25, 0x0147
    3d06:	80 91 58 01 	lds	r24, 0x0158
    3d0a:	98 17       	cp	r25, r24
    3d0c:	21 f4       	brne	.+8      	; 0x3d16 <main+0x80a>
		{
			flag=1;
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	80 93 3a 01 	sts	0x013A, r24
    3d14:	25 c1       	rjmp	.+586    	; 0x3f60 <main+0xa54>
		}

		else
		{
			max_tries--;
    3d16:	80 91 20 01 	lds	r24, 0x0120
    3d1a:	81 50       	subi	r24, 0x01	; 1
    3d1c:	80 93 20 01 	sts	0x0120, r24
			HLCD_vidSendCMD_4BIT(LCD_CLR);
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
			HLCD_vidGoToXY(0,0);
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
			HLCD_vidWriteStr_4BIT("Wrong password");
    3d2e:	85 ec       	ldi	r24, 0xC5	; 197
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
			HLCD_vidGoToXY(1,0);
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
			if(max_tries==0)
    3d3e:	80 91 20 01 	lds	r24, 0x0120
    3d42:	88 23       	and	r24, r24
    3d44:	09 f0       	breq	.+2      	; 0x3d48 <main+0x83c>
    3d46:	90 c0       	rjmp	.+288    	; 0x3e68 <main+0x95c>
			{
				HLCD_vidWriteStr_4BIT("tries left: ");
    3d48:	84 ed       	ldi	r24, 0xD4	; 212
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
				HLCD_vidSendChar_4BIT('0');
    3d50:	80 e3       	ldi	r24, 0x30	; 48
    3d52:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_vidSendChar_4BIT>
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	aa ef       	ldi	r26, 0xFA	; 250
    3d5c:	b3 e4       	ldi	r27, 0x43	; 67
    3d5e:	8f a3       	std	Y+39, r24	; 0x27
    3d60:	98 a7       	std	Y+40, r25	; 0x28
    3d62:	a9 a7       	std	Y+41, r26	; 0x29
    3d64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d66:	6f a1       	ldd	r22, Y+39	; 0x27
    3d68:	78 a5       	ldd	r23, Y+40	; 0x28
    3d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    3d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	4a ef       	ldi	r20, 0xFA	; 250
    3d74:	54 e4       	ldi	r21, 0x44	; 68
    3d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	8b a3       	std	Y+35, r24	; 0x23
    3d80:	9c a3       	std	Y+36, r25	; 0x24
    3d82:	ad a3       	std	Y+37, r26	; 0x25
    3d84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d86:	6b a1       	ldd	r22, Y+35	; 0x23
    3d88:	7c a1       	ldd	r23, Y+36	; 0x24
    3d8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e8       	ldi	r20, 0x80	; 128
    3d94:	5f e3       	ldi	r21, 0x3F	; 63
    3d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d9a:	88 23       	and	r24, r24
    3d9c:	2c f4       	brge	.+10     	; 0x3da8 <main+0x89c>
		__ticks = 1;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	9a a3       	std	Y+34, r25	; 0x22
    3da4:	89 a3       	std	Y+33, r24	; 0x21
    3da6:	3f c0       	rjmp	.+126    	; 0x3e26 <main+0x91a>
	else if (__tmp > 65535)
    3da8:	6b a1       	ldd	r22, Y+35	; 0x23
    3daa:	7c a1       	ldd	r23, Y+36	; 0x24
    3dac:	8d a1       	ldd	r24, Y+37	; 0x25
    3dae:	9e a1       	ldd	r25, Y+38	; 0x26
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	3f ef       	ldi	r19, 0xFF	; 255
    3db4:	4f e7       	ldi	r20, 0x7F	; 127
    3db6:	57 e4       	ldi	r21, 0x47	; 71
    3db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dbc:	18 16       	cp	r1, r24
    3dbe:	4c f5       	brge	.+82     	; 0x3e12 <main+0x906>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc0:	6f a1       	ldd	r22, Y+39	; 0x27
    3dc2:	78 a5       	ldd	r23, Y+40	; 0x28
    3dc4:	89 a5       	ldd	r24, Y+41	; 0x29
    3dc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e2       	ldi	r20, 0x20	; 32
    3dce:	51 e4       	ldi	r21, 0x41	; 65
    3dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	bc 01       	movw	r22, r24
    3dda:	cd 01       	movw	r24, r26
    3ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	9a a3       	std	Y+34, r25	; 0x22
    3de6:	89 a3       	std	Y+33, r24	; 0x21
    3de8:	0f c0       	rjmp	.+30     	; 0x3e08 <main+0x8fc>
    3dea:	88 ec       	ldi	r24, 0xC8	; 200
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	98 a3       	std	Y+32, r25	; 0x20
    3df0:	8f 8f       	std	Y+31, r24	; 0x1f
    3df2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3df4:	98 a1       	ldd	r25, Y+32	; 0x20
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <main+0x8ea>
    3dfa:	98 a3       	std	Y+32, r25	; 0x20
    3dfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    3e00:	9a a1       	ldd	r25, Y+34	; 0x22
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	9a a3       	std	Y+34, r25	; 0x22
    3e06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e08:	89 a1       	ldd	r24, Y+33	; 0x21
    3e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e0c:	00 97       	sbiw	r24, 0x00	; 0
    3e0e:	69 f7       	brne	.-38     	; 0x3dea <main+0x8de>
    3e10:	14 c0       	rjmp	.+40     	; 0x3e3a <main+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e12:	6b a1       	ldd	r22, Y+35	; 0x23
    3e14:	7c a1       	ldd	r23, Y+36	; 0x24
    3e16:	8d a1       	ldd	r24, Y+37	; 0x25
    3e18:	9e a1       	ldd	r25, Y+38	; 0x26
    3e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	9a a3       	std	Y+34, r25	; 0x22
    3e24:	89 a3       	std	Y+33, r24	; 0x21
    3e26:	89 a1       	ldd	r24, Y+33	; 0x21
    3e28:	9a a1       	ldd	r25, Y+34	; 0x22
    3e2a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e2c:	8d 8f       	std	Y+29, r24	; 0x1d
    3e2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	f1 f7       	brne	.-4      	; 0x3e32 <main+0x926>
    3e36:	9e 8f       	std	Y+30, r25	; 0x1e
    3e38:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				HLCD_vidSendCMD_4BIT(LCD_CLR);
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
				HLCD_vidGoToXY(0,0);
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	60 e0       	ldi	r22, 0x00	; 0
    3e44:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
				HLCD_vidWriteStr_4BIT("7ARAMY");
    3e48:	81 ee       	ldi	r24, 0xE1	; 225
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
				HLCD_vidGoToXY(1,0);
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
				HLCD_vidWriteStr_4BIT("WAIT A MINUTE ");
    3e58:	88 ee       	ldi	r24, 0xE8	; 232
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
				flag=2;
    3e60:	82 e0       	ldi	r24, 0x02	; 2
    3e62:	80 93 3a 01 	sts	0x013A, r24
    3e66:	0a c0       	rjmp	.+20     	; 0x3e7c <main+0x970>
			}
			else
			{
				HLCD_vidWriteStr_4BIT("tries left: ");
    3e68:	84 ed       	ldi	r24, 0xD4	; 212
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
				HLCD_voidDisplayint(max_tries);
    3e70:	80 91 20 01 	lds	r24, 0x0120
    3e74:	88 2f       	mov	r24, r24
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 90 14 	call	0x2920	; 0x2920 <HLCD_voidDisplayint>
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	aa ef       	ldi	r26, 0xFA	; 250
    3e82:	b3 e4       	ldi	r27, 0x43	; 67
    3e84:	89 8f       	std	Y+25, r24	; 0x19
    3e86:	9a 8f       	std	Y+26, r25	; 0x1a
    3e88:	ab 8f       	std	Y+27, r26	; 0x1b
    3e8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    3e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	4a ef       	ldi	r20, 0xFA	; 250
    3e9a:	54 e4       	ldi	r21, 0x44	; 68
    3e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	8d 8b       	std	Y+21, r24	; 0x15
    3ea6:	9e 8b       	std	Y+22, r25	; 0x16
    3ea8:	af 8b       	std	Y+23, r26	; 0x17
    3eaa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3eac:	6d 89       	ldd	r22, Y+21	; 0x15
    3eae:	7e 89       	ldd	r23, Y+22	; 0x16
    3eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e8       	ldi	r20, 0x80	; 128
    3eba:	5f e3       	ldi	r21, 0x3F	; 63
    3ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ec0:	88 23       	and	r24, r24
    3ec2:	2c f4       	brge	.+10     	; 0x3ece <main+0x9c2>
		__ticks = 1;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	9c 8b       	std	Y+20, r25	; 0x14
    3eca:	8b 8b       	std	Y+19, r24	; 0x13
    3ecc:	3f c0       	rjmp	.+126    	; 0x3f4c <main+0xa40>
	else if (__tmp > 65535)
    3ece:	6d 89       	ldd	r22, Y+21	; 0x15
    3ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	3f ef       	ldi	r19, 0xFF	; 255
    3eda:	4f e7       	ldi	r20, 0x7F	; 127
    3edc:	57 e4       	ldi	r21, 0x47	; 71
    3ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ee2:	18 16       	cp	r1, r24
    3ee4:	4c f5       	brge	.+82     	; 0x3f38 <main+0xa2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	40 e2       	ldi	r20, 0x20	; 32
    3ef4:	51 e4       	ldi	r21, 0x41	; 65
    3ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	bc 01       	movw	r22, r24
    3f00:	cd 01       	movw	r24, r26
    3f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	9c 8b       	std	Y+20, r25	; 0x14
    3f0c:	8b 8b       	std	Y+19, r24	; 0x13
    3f0e:	0f c0       	rjmp	.+30     	; 0x3f2e <main+0xa22>
    3f10:	88 ec       	ldi	r24, 0xC8	; 200
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	9a 8b       	std	Y+18, r25	; 0x12
    3f16:	89 8b       	std	Y+17, r24	; 0x11
    3f18:	89 89       	ldd	r24, Y+17	; 0x11
    3f1a:	9a 89       	ldd	r25, Y+18	; 0x12
    3f1c:	01 97       	sbiw	r24, 0x01	; 1
    3f1e:	f1 f7       	brne	.-4      	; 0x3f1c <main+0xa10>
    3f20:	9a 8b       	std	Y+18, r25	; 0x12
    3f22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f24:	8b 89       	ldd	r24, Y+19	; 0x13
    3f26:	9c 89       	ldd	r25, Y+20	; 0x14
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	9c 8b       	std	Y+20, r25	; 0x14
    3f2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f30:	9c 89       	ldd	r25, Y+20	; 0x14
    3f32:	00 97       	sbiw	r24, 0x00	; 0
    3f34:	69 f7       	brne	.-38     	; 0x3f10 <main+0xa04>
    3f36:	14 c0       	rjmp	.+40     	; 0x3f60 <main+0xa54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f38:	6d 89       	ldd	r22, Y+21	; 0x15
    3f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	9c 8b       	std	Y+20, r25	; 0x14
    3f4a:	8b 8b       	std	Y+19, r24	; 0x13
    3f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f50:	98 8b       	std	Y+16, r25	; 0x10
    3f52:	8f 87       	std	Y+15, r24	; 0x0f
    3f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f56:	98 89       	ldd	r25, Y+16	; 0x10
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <main+0xa4c>
    3f5c:	98 8b       	std	Y+16, r25	; 0x10
    3f5e:	8f 87       	std	Y+15, r24	; 0x0f
		}
		EEPROM_vWrite(EEPROM_STATUS_LOCATION,0x00);

	}

	while(flag==0)
    3f60:	80 91 3a 01 	lds	r24, 0x013A
    3f64:	88 23       	and	r24, r24
    3f66:	09 f4       	brne	.+2      	; 0x3f6a <main+0xa5e>
    3f68:	70 cd       	rjmp	.-1312   	; 0x3a4a <main+0x53e>
				HLCD_voidDisplayint(max_tries);
			}
			_delay_ms(500);
		}
	}
	if(flag==1)
    3f6a:	80 91 3a 01 	lds	r24, 0x013A
    3f6e:	81 30       	cpi	r24, 0x01	; 1
    3f70:	09 f0       	breq	.+2      	; 0x3f74 <main+0xa68>
    3f72:	8b c0       	rjmp	.+278    	; 0x408a <main+0xb7e>
	{
		HLCD_vidSendCMD_4BIT(LCD_CLR);
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
		HLCD_vidGoToXY(0,0);
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	60 e0       	ldi	r22, 0x00	; 0
    3f7e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
		HLCD_vidWriteStr_4BIT("Correct password");
    3f82:	87 ef       	ldi	r24, 0xF7	; 247
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>
		HLCD_vidGoToXY(1,0);
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <HLCD_vidGoToXY>
		HLCD_vidWriteStr_4BIT("Ya 100 Welcome");
    3f92:	88 e0       	ldi	r24, 0x08	; 8
    3f94:	91 e0       	ldi	r25, 0x01	; 1
    3f96:	0e 94 32 14 	call	0x2864	; 0x2864 <HLCD_vidWriteStr_4BIT>

		//SERVO
		TIM1_voidSetCmpBRegValue(1000);//90 degree ->875
    3f9a:	88 ee       	ldi	r24, 0xE8	; 232
    3f9c:	93 e0       	ldi	r25, 0x03	; 3
    3f9e:	0e 94 52 18 	call	0x30a4	; 0x30a4 <TIM1_voidSetCmpBRegValue>
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	aa e7       	ldi	r26, 0x7A	; 122
    3fa8:	b4 e4       	ldi	r27, 0x44	; 68
    3faa:	8b 87       	std	Y+11, r24	; 0x0b
    3fac:	9c 87       	std	Y+12, r25	; 0x0c
    3fae:	ad 87       	std	Y+13, r26	; 0x0d
    3fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	4a ef       	ldi	r20, 0xFA	; 250
    3fc0:	54 e4       	ldi	r21, 0x44	; 68
    3fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	8f 83       	std	Y+7, r24	; 0x07
    3fcc:	98 87       	std	Y+8, r25	; 0x08
    3fce:	a9 87       	std	Y+9, r26	; 0x09
    3fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd4:	78 85       	ldd	r23, Y+8	; 0x08
    3fd6:	89 85       	ldd	r24, Y+9	; 0x09
    3fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e8       	ldi	r20, 0x80	; 128
    3fe0:	5f e3       	ldi	r21, 0x3F	; 63
    3fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fe6:	88 23       	and	r24, r24
    3fe8:	2c f4       	brge	.+10     	; 0x3ff4 <main+0xae8>
		__ticks = 1;
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	9e 83       	std	Y+6, r25	; 0x06
    3ff0:	8d 83       	std	Y+5, r24	; 0x05
    3ff2:	3f c0       	rjmp	.+126    	; 0x4072 <main+0xb66>
	else if (__tmp > 65535)
    3ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff6:	78 85       	ldd	r23, Y+8	; 0x08
    3ff8:	89 85       	ldd	r24, Y+9	; 0x09
    3ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	3f ef       	ldi	r19, 0xFF	; 255
    4000:	4f e7       	ldi	r20, 0x7F	; 127
    4002:	57 e4       	ldi	r21, 0x47	; 71
    4004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4008:	18 16       	cp	r1, r24
    400a:	4c f5       	brge	.+82     	; 0x405e <main+0xb52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    400c:	6b 85       	ldd	r22, Y+11	; 0x0b
    400e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4010:	8d 85       	ldd	r24, Y+13	; 0x0d
    4012:	9e 85       	ldd	r25, Y+14	; 0x0e
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e2       	ldi	r20, 0x20	; 32
    401a:	51 e4       	ldi	r21, 0x41	; 65
    401c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	bc 01       	movw	r22, r24
    4026:	cd 01       	movw	r24, r26
    4028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402c:	dc 01       	movw	r26, r24
    402e:	cb 01       	movw	r24, r22
    4030:	9e 83       	std	Y+6, r25	; 0x06
    4032:	8d 83       	std	Y+5, r24	; 0x05
    4034:	0f c0       	rjmp	.+30     	; 0x4054 <main+0xb48>
    4036:	88 ec       	ldi	r24, 0xC8	; 200
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	9c 83       	std	Y+4, r25	; 0x04
    403c:	8b 83       	std	Y+3, r24	; 0x03
    403e:	8b 81       	ldd	r24, Y+3	; 0x03
    4040:	9c 81       	ldd	r25, Y+4	; 0x04
    4042:	01 97       	sbiw	r24, 0x01	; 1
    4044:	f1 f7       	brne	.-4      	; 0x4042 <main+0xb36>
    4046:	9c 83       	std	Y+4, r25	; 0x04
    4048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    404a:	8d 81       	ldd	r24, Y+5	; 0x05
    404c:	9e 81       	ldd	r25, Y+6	; 0x06
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	9e 83       	std	Y+6, r25	; 0x06
    4052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4054:	8d 81       	ldd	r24, Y+5	; 0x05
    4056:	9e 81       	ldd	r25, Y+6	; 0x06
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	69 f7       	brne	.-38     	; 0x4036 <main+0xb2a>
    405c:	14 c0       	rjmp	.+40     	; 0x4086 <main+0xb7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405e:	6f 81       	ldd	r22, Y+7	; 0x07
    4060:	78 85       	ldd	r23, Y+8	; 0x08
    4062:	89 85       	ldd	r24, Y+9	; 0x09
    4064:	9a 85       	ldd	r25, Y+10	; 0x0a
    4066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	9e 83       	std	Y+6, r25	; 0x06
    4070:	8d 83       	std	Y+5, r24	; 0x05
    4072:	8d 81       	ldd	r24, Y+5	; 0x05
    4074:	9e 81       	ldd	r25, Y+6	; 0x06
    4076:	9a 83       	std	Y+2, r25	; 0x02
    4078:	89 83       	std	Y+1, r24	; 0x01
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	9a 81       	ldd	r25, Y+2	; 0x02
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <main+0xb72>
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		//DC Motor
		ADC_PRINT();
    4086:	0e 94 8f 20 	call	0x411e	; 0x411e <ADC_PRINT>

	}
	if(flag==2)
    408a:	80 91 3a 01 	lds	r24, 0x013A
    408e:	82 30       	cpi	r24, 0x02	; 2
    4090:	29 f4       	brne	.+10     	; 0x409c <main+0xb90>
	{
		DIO_vidsetPinval(DIO_PORTA,DIO_PIN5,DIO_HIGH);
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	65 e0       	ldi	r22, 0x05	; 5
    4096:	41 e0       	ldi	r20, 0x01	; 1
    4098:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>

	}
	while(1)
	{

		if(flag==1)
    409c:	80 91 3a 01 	lds	r24, 0x013A
    40a0:	81 30       	cpi	r24, 0x01	; 1
    40a2:	e1 f7       	brne	.-8      	; 0x409c <main+0xb90>
		{
			//DC Motor
			ADC_PRINT();
    40a4:	0e 94 8f 20 	call	0x411e	; 0x411e <ADC_PRINT>
			HLCD_vidSendCMD_4BIT(LCD_CLR);
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
			HLCD_option1();
    40ae:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <HLCD_option1>
			do {
				Key = KPD_u8GetPressedKey();
    40b2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <KPD_u8GetPressedKey>
    40b6:	80 93 54 01 	sts	0x0154, r24
			}while(Key==NOT_PRESSED);
    40ba:	80 91 54 01 	lds	r24, 0x0154
    40be:	8f 3f       	cpi	r24, 0xFF	; 255
    40c0:	c1 f3       	breq	.-16     	; 0x40b2 <main+0xba6>
			if(Key=='1'||Key=='2'||Key=='3')
    40c2:	80 91 54 01 	lds	r24, 0x0154
    40c6:	81 33       	cpi	r24, 0x31	; 49
    40c8:	41 f0       	breq	.+16     	; 0x40da <main+0xbce>
    40ca:	80 91 54 01 	lds	r24, 0x0154
    40ce:	82 33       	cpi	r24, 0x32	; 50
    40d0:	21 f0       	breq	.+8      	; 0x40da <main+0xbce>
    40d2:	80 91 54 01 	lds	r24, 0x0154
    40d6:	83 33       	cpi	r24, 0x33	; 51
    40d8:	09 f7       	brne	.-62     	; 0x409c <main+0xb90>
			{
				HLCD_vidSendCMD_4BIT(LCD_CLR);
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	0e 94 c5 11 	call	0x238a	; 0x238a <HLCD_vidSendCMD_4BIT>
				HLCD_option2();
    40e0:	0e 94 00 15 	call	0x2a00	; 0x2a00 <HLCD_option2>
				flag=3;
    40e4:	83 e0       	ldi	r24, 0x03	; 3
    40e6:	80 93 3a 01 	sts	0x013A, r24
				target=Key;
    40ea:	80 91 54 01 	lds	r24, 0x0154
    40ee:	80 93 3b 01 	sts	0x013B, r24
				UARTTX_vidSetISR(send_char);
    40f2:	87 ee       	ldi	r24, 0xE7	; 231
    40f4:	90 e2       	ldi	r25, 0x20	; 32
    40f6:	0e 94 46 1a 	call	0x348c	; 0x348c <UARTTX_vidSetISR>
				UARTRX_vidSetISR(receive_char);
    40fa:	84 ef       	ldi	r24, 0xF4	; 244
    40fc:	90 e2       	ldi	r25, 0x20	; 32
    40fe:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <UARTRX_vidSetISR>
    4102:	cc cf       	rjmp	.-104    	; 0x409c <main+0xb90>

00004104 <ADC_voidGetData_INT>:

	}
}
//ADC
void ADC_voidGetData_INT(void)
{
    4104:	df 93       	push	r29
    4106:	cf 93       	push	r28
    4108:	cd b7       	in	r28, 0x3d	; 61
    410a:	de b7       	in	r29, 0x3e	; 62
	Digital=ADC_GetConvertedDig();
    410c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ADC_GetConvertedDig>
    4110:	90 93 53 01 	sts	0x0153, r25
    4114:	80 93 52 01 	sts	0x0152, r24

}
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	08 95       	ret

0000411e <ADC_PRINT>:

void ADC_PRINT(void)
{
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
	ADC_StartConversion(DIO_PIN0);//-> interrupt
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ADC_StartConversion>
	ACD_vidSetISR(ADC_voidGetData_INT);
    412c:	82 e8       	ldi	r24, 0x82	; 130
    412e:	90 e2       	ldi	r25, 0x20	; 32
    4130:	0e 94 09 06 	call	0xc12	; 0xc12 <ACD_vidSetISR>

	//Digital=ADC_getReading(DIO_PIN0);//-> polling
	//CONVERT ADC STEPS TO VOLTAGE
	volt=((u32)Digital*5000)/1024;
    4134:	80 91 52 01 	lds	r24, 0x0152
    4138:	90 91 53 01 	lds	r25, 0x0153
    413c:	cc 01       	movw	r24, r24
    413e:	a0 e0       	ldi	r26, 0x00	; 0
    4140:	b0 e0       	ldi	r27, 0x00	; 0
    4142:	28 e8       	ldi	r18, 0x88	; 136
    4144:	33 e1       	ldi	r19, 0x13	; 19
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	bc 01       	movw	r22, r24
    414c:	cd 01       	movw	r24, r26
    414e:	0e 94 c4 22 	call	0x4588	; 0x4588 <__mulsi3>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	07 2e       	mov	r0, r23
    4158:	7a e0       	ldi	r23, 0x0A	; 10
    415a:	b6 95       	lsr	r27
    415c:	a7 95       	ror	r26
    415e:	97 95       	ror	r25
    4160:	87 95       	ror	r24
    4162:	7a 95       	dec	r23
    4164:	d1 f7       	brne	.-12     	; 0x415a <ADC_PRINT+0x3c>
    4166:	70 2d       	mov	r23, r0
    4168:	80 93 4e 01 	sts	0x014E, r24
    416c:	90 93 4f 01 	sts	0x014F, r25
    4170:	a0 93 50 01 	sts	0x0150, r26
    4174:	b0 93 51 01 	sts	0x0151, r27
	//CONVERT ADC STEPS to tempreture
	temp=volt/10;
    4178:	80 91 4e 01 	lds	r24, 0x014E
    417c:	90 91 4f 01 	lds	r25, 0x014F
    4180:	a0 91 50 01 	lds	r26, 0x0150
    4184:	b0 91 51 01 	lds	r27, 0x0151
    4188:	2a e0       	ldi	r18, 0x0A	; 10
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	bc 01       	movw	r22, r24
    4192:	cd 01       	movw	r24, r26
    4194:	0e 94 f7 22 	call	0x45ee	; 0x45ee <__udivmodsi4>
    4198:	da 01       	movw	r26, r20
    419a:	c9 01       	movw	r24, r18
    419c:	90 93 4b 01 	sts	0x014B, r25
    41a0:	80 93 4a 01 	sts	0x014A, r24
	//	HLCD_vidWriteStr_4BIT("temp = ");
	//	HLCD_voidDisplayint(temp);
	if(temp>30)
    41a4:	80 91 4a 01 	lds	r24, 0x014A
    41a8:	90 91 4b 01 	lds	r25, 0x014B
    41ac:	8f 31       	cpi	r24, 0x1F	; 31
    41ae:	91 05       	cpc	r25, r1
    41b0:	30 f0       	brcs	.+12     	; 0x41be <ADC_PRINT+0xa0>
	{
		//DC Motor
		DIO_vidsetPinval(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    41b2:	83 e0       	ldi	r24, 0x03	; 3
    41b4:	66 e0       	ldi	r22, 0x06	; 6
    41b6:	41 e0       	ldi	r20, 0x01	; 1
    41b8:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    41bc:	05 c0       	rjmp	.+10     	; 0x41c8 <ADC_PRINT+0xaa>
	}
	else
	{
		DIO_vidsetPinval(DIO_PORTD,DIO_PIN6,DIO_LOW);
    41be:	83 e0       	ldi	r24, 0x03	; 3
    41c0:	66 e0       	ldi	r22, 0x06	; 6
    41c2:	40 e0       	ldi	r20, 0x00	; 0
    41c4:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>

	}
}
    41c8:	cf 91       	pop	r28
    41ca:	df 91       	pop	r29
    41cc:	08 95       	ret

000041ce <send_char>:
//UART
void send_char(void)
{
    41ce:	df 93       	push	r29
    41d0:	cf 93       	push	r28
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendData_Asynch(Tx_data);
    41d6:	80 91 1f 01 	lds	r24, 0x011F
    41da:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidSendData_Asynch>
	disable_tx();
    41de:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <disable_tx>
}
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	08 95       	ret

000041e8 <receive_char>:
void receive_char(void)
{
    41e8:	df 93       	push	r29
    41ea:	cf 93       	push	r28
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	aa 97       	sbiw	r28, 0x2a	; 42
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
	Rx_data=UART_u8ReceiveData();
    41fc:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <UART_u8ReceiveData>
    4200:	80 93 49 01 	sts	0x0149, r24
	if(Rx_data=='A')
    4204:	80 91 49 01 	lds	r24, 0x0149
    4208:	81 34       	cpi	r24, 0x41	; 65
    420a:	09 f0       	breq	.+2      	; 0x420e <receive_char+0x26>
    420c:	97 c0       	rjmp	.+302    	; 0x433c <receive_char+0x154>
	{
		enable_tx();
    420e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <enable_tx>
		UART_voidSendData_Asynch('A');
    4212:	81 e4       	ldi	r24, 0x41	; 65
    4214:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidSendData_Asynch>
		if(target=='1')
    4218:	80 91 3b 01 	lds	r24, 0x013B
    421c:	81 33       	cpi	r24, 0x31	; 49
    421e:	31 f4       	brne	.+12     	; 0x422c <receive_char+0x44>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	63 e0       	ldi	r22, 0x03	; 3
    4224:	41 e0       	ldi	r20, 0x01	; 1
    4226:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    422a:	13 c0       	rjmp	.+38     	; 0x4252 <receive_char+0x6a>
		}
		else if(target=='2')
    422c:	80 91 3b 01 	lds	r24, 0x013B
    4230:	82 33       	cpi	r24, 0x32	; 50
    4232:	31 f4       	brne	.+12     	; 0x4240 <receive_char+0x58>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	64 e0       	ldi	r22, 0x04	; 4
    4238:	41 e0       	ldi	r20, 0x01	; 1
    423a:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    423e:	09 c0       	rjmp	.+18     	; 0x4252 <receive_char+0x6a>
		}
		else if(target=='3')
    4240:	80 91 3b 01 	lds	r24, 0x013B
    4244:	83 33       	cpi	r24, 0x33	; 51
    4246:	29 f4       	brne	.+10     	; 0x4252 <receive_char+0x6a>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN6,DIO_HIGH);
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	66 e0       	ldi	r22, 0x06	; 6
    424c:	41 e0       	ldi	r20, 0x01	; 1
    424e:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	aa e7       	ldi	r26, 0x7A	; 122
    4258:	b4 e4       	ldi	r27, 0x44	; 68
    425a:	8f a3       	std	Y+39, r24	; 0x27
    425c:	98 a7       	std	Y+40, r25	; 0x28
    425e:	a9 a7       	std	Y+41, r26	; 0x29
    4260:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4262:	6f a1       	ldd	r22, Y+39	; 0x27
    4264:	78 a5       	ldd	r23, Y+40	; 0x28
    4266:	89 a5       	ldd	r24, Y+41	; 0x29
    4268:	9a a5       	ldd	r25, Y+42	; 0x2a
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	4a ef       	ldi	r20, 0xFA	; 250
    4270:	54 e4       	ldi	r21, 0x44	; 68
    4272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	8b a3       	std	Y+35, r24	; 0x23
    427c:	9c a3       	std	Y+36, r25	; 0x24
    427e:	ad a3       	std	Y+37, r26	; 0x25
    4280:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4282:	6b a1       	ldd	r22, Y+35	; 0x23
    4284:	7c a1       	ldd	r23, Y+36	; 0x24
    4286:	8d a1       	ldd	r24, Y+37	; 0x25
    4288:	9e a1       	ldd	r25, Y+38	; 0x26
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	40 e8       	ldi	r20, 0x80	; 128
    4290:	5f e3       	ldi	r21, 0x3F	; 63
    4292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4296:	88 23       	and	r24, r24
    4298:	2c f4       	brge	.+10     	; 0x42a4 <receive_char+0xbc>
		__ticks = 1;
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	9a a3       	std	Y+34, r25	; 0x22
    42a0:	89 a3       	std	Y+33, r24	; 0x21
    42a2:	3f c0       	rjmp	.+126    	; 0x4322 <receive_char+0x13a>
	else if (__tmp > 65535)
    42a4:	6b a1       	ldd	r22, Y+35	; 0x23
    42a6:	7c a1       	ldd	r23, Y+36	; 0x24
    42a8:	8d a1       	ldd	r24, Y+37	; 0x25
    42aa:	9e a1       	ldd	r25, Y+38	; 0x26
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	3f ef       	ldi	r19, 0xFF	; 255
    42b0:	4f e7       	ldi	r20, 0x7F	; 127
    42b2:	57 e4       	ldi	r21, 0x47	; 71
    42b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42b8:	18 16       	cp	r1, r24
    42ba:	4c f5       	brge	.+82     	; 0x430e <receive_char+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42bc:	6f a1       	ldd	r22, Y+39	; 0x27
    42be:	78 a5       	ldd	r23, Y+40	; 0x28
    42c0:	89 a5       	ldd	r24, Y+41	; 0x29
    42c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	40 e2       	ldi	r20, 0x20	; 32
    42ca:	51 e4       	ldi	r21, 0x41	; 65
    42cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	bc 01       	movw	r22, r24
    42d6:	cd 01       	movw	r24, r26
    42d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	9a a3       	std	Y+34, r25	; 0x22
    42e2:	89 a3       	std	Y+33, r24	; 0x21
    42e4:	0f c0       	rjmp	.+30     	; 0x4304 <receive_char+0x11c>
    42e6:	88 ec       	ldi	r24, 0xC8	; 200
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	98 a3       	std	Y+32, r25	; 0x20
    42ec:	8f 8f       	std	Y+31, r24	; 0x1f
    42ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42f0:	98 a1       	ldd	r25, Y+32	; 0x20
    42f2:	01 97       	sbiw	r24, 0x01	; 1
    42f4:	f1 f7       	brne	.-4      	; 0x42f2 <receive_char+0x10a>
    42f6:	98 a3       	std	Y+32, r25	; 0x20
    42f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42fa:	89 a1       	ldd	r24, Y+33	; 0x21
    42fc:	9a a1       	ldd	r25, Y+34	; 0x22
    42fe:	01 97       	sbiw	r24, 0x01	; 1
    4300:	9a a3       	std	Y+34, r25	; 0x22
    4302:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4304:	89 a1       	ldd	r24, Y+33	; 0x21
    4306:	9a a1       	ldd	r25, Y+34	; 0x22
    4308:	00 97       	sbiw	r24, 0x00	; 0
    430a:	69 f7       	brne	.-38     	; 0x42e6 <receive_char+0xfe>
    430c:	14 c0       	rjmp	.+40     	; 0x4336 <receive_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    430e:	6b a1       	ldd	r22, Y+35	; 0x23
    4310:	7c a1       	ldd	r23, Y+36	; 0x24
    4312:	8d a1       	ldd	r24, Y+37	; 0x25
    4314:	9e a1       	ldd	r25, Y+38	; 0x26
    4316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	9a a3       	std	Y+34, r25	; 0x22
    4320:	89 a3       	std	Y+33, r24	; 0x21
    4322:	89 a1       	ldd	r24, Y+33	; 0x21
    4324:	9a a1       	ldd	r25, Y+34	; 0x22
    4326:	9e 8f       	std	Y+30, r25	; 0x1e
    4328:	8d 8f       	std	Y+29, r24	; 0x1d
    432a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    432c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    432e:	01 97       	sbiw	r24, 0x01	; 1
    4330:	f1 f7       	brne	.-4      	; 0x432e <receive_char+0x146>
    4332:	9e 8f       	std	Y+30, r25	; 0x1e
    4334:	8d 8f       	std	Y+29, r24	; 0x1d
		else
		{
			//
		}
		_delay_ms(1000);
		disable_tx();
    4336:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <disable_tx>
    433a:	1d c1       	rjmp	.+570    	; 0x4576 <receive_char+0x38e>

	}
	else if(Rx_data=='B')
    433c:	80 91 49 01 	lds	r24, 0x0149
    4340:	82 34       	cpi	r24, 0x42	; 66
    4342:	09 f0       	breq	.+2      	; 0x4346 <receive_char+0x15e>
    4344:	97 c0       	rjmp	.+302    	; 0x4474 <receive_char+0x28c>
	{

		enable_tx();
    4346:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <enable_tx>
		UART_voidSendData_Asynch('B');
    434a:	82 e4       	ldi	r24, 0x42	; 66
    434c:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidSendData_Asynch>
		if(target=='1')
    4350:	80 91 3b 01 	lds	r24, 0x013B
    4354:	81 33       	cpi	r24, 0x31	; 49
    4356:	31 f4       	brne	.+12     	; 0x4364 <receive_char+0x17c>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN3,DIO_LOW);
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	63 e0       	ldi	r22, 0x03	; 3
    435c:	40 e0       	ldi	r20, 0x00	; 0
    435e:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    4362:	13 c0       	rjmp	.+38     	; 0x438a <receive_char+0x1a2>
		}
		else if(target=='2')
    4364:	80 91 3b 01 	lds	r24, 0x013B
    4368:	82 33       	cpi	r24, 0x32	; 50
    436a:	31 f4       	brne	.+12     	; 0x4378 <receive_char+0x190>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN4,DIO_LOW);
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	64 e0       	ldi	r22, 0x04	; 4
    4370:	40 e0       	ldi	r20, 0x00	; 0
    4372:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    4376:	09 c0       	rjmp	.+18     	; 0x438a <receive_char+0x1a2>
		}
		else if(target=='3')
    4378:	80 91 3b 01 	lds	r24, 0x013B
    437c:	83 33       	cpi	r24, 0x33	; 51
    437e:	29 f4       	brne	.+10     	; 0x438a <receive_char+0x1a2>
		{
			DIO_vidsetPinval(DIO_PORTA,DIO_PIN6,DIO_LOW);
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	66 e0       	ldi	r22, 0x06	; 6
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_vidsetPinval>
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	aa e7       	ldi	r26, 0x7A	; 122
    4390:	b4 e4       	ldi	r27, 0x44	; 68
    4392:	89 8f       	std	Y+25, r24	; 0x19
    4394:	9a 8f       	std	Y+26, r25	; 0x1a
    4396:	ab 8f       	std	Y+27, r26	; 0x1b
    4398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439a:	69 8d       	ldd	r22, Y+25	; 0x19
    439c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    439e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	4a ef       	ldi	r20, 0xFA	; 250
    43a8:	54 e4       	ldi	r21, 0x44	; 68
    43aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	8d 8b       	std	Y+21, r24	; 0x15
    43b4:	9e 8b       	std	Y+22, r25	; 0x16
    43b6:	af 8b       	std	Y+23, r26	; 0x17
    43b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43ba:	6d 89       	ldd	r22, Y+21	; 0x15
    43bc:	7e 89       	ldd	r23, Y+22	; 0x16
    43be:	8f 89       	ldd	r24, Y+23	; 0x17
    43c0:	98 8d       	ldd	r25, Y+24	; 0x18
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	40 e8       	ldi	r20, 0x80	; 128
    43c8:	5f e3       	ldi	r21, 0x3F	; 63
    43ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43ce:	88 23       	and	r24, r24
    43d0:	2c f4       	brge	.+10     	; 0x43dc <receive_char+0x1f4>
		__ticks = 1;
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	9c 8b       	std	Y+20, r25	; 0x14
    43d8:	8b 8b       	std	Y+19, r24	; 0x13
    43da:	3f c0       	rjmp	.+126    	; 0x445a <receive_char+0x272>
	else if (__tmp > 65535)
    43dc:	6d 89       	ldd	r22, Y+21	; 0x15
    43de:	7e 89       	ldd	r23, Y+22	; 0x16
    43e0:	8f 89       	ldd	r24, Y+23	; 0x17
    43e2:	98 8d       	ldd	r25, Y+24	; 0x18
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	3f ef       	ldi	r19, 0xFF	; 255
    43e8:	4f e7       	ldi	r20, 0x7F	; 127
    43ea:	57 e4       	ldi	r21, 0x47	; 71
    43ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43f0:	18 16       	cp	r1, r24
    43f2:	4c f5       	brge	.+82     	; 0x4446 <receive_char+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f4:	69 8d       	ldd	r22, Y+25	; 0x19
    43f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	40 e2       	ldi	r20, 0x20	; 32
    4402:	51 e4       	ldi	r21, 0x41	; 65
    4404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	9c 8b       	std	Y+20, r25	; 0x14
    441a:	8b 8b       	std	Y+19, r24	; 0x13
    441c:	0f c0       	rjmp	.+30     	; 0x443c <receive_char+0x254>
    441e:	88 ec       	ldi	r24, 0xC8	; 200
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	9a 8b       	std	Y+18, r25	; 0x12
    4424:	89 8b       	std	Y+17, r24	; 0x11
    4426:	89 89       	ldd	r24, Y+17	; 0x11
    4428:	9a 89       	ldd	r25, Y+18	; 0x12
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	f1 f7       	brne	.-4      	; 0x442a <receive_char+0x242>
    442e:	9a 8b       	std	Y+18, r25	; 0x12
    4430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4432:	8b 89       	ldd	r24, Y+19	; 0x13
    4434:	9c 89       	ldd	r25, Y+20	; 0x14
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	9c 8b       	std	Y+20, r25	; 0x14
    443a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443c:	8b 89       	ldd	r24, Y+19	; 0x13
    443e:	9c 89       	ldd	r25, Y+20	; 0x14
    4440:	00 97       	sbiw	r24, 0x00	; 0
    4442:	69 f7       	brne	.-38     	; 0x441e <receive_char+0x236>
    4444:	14 c0       	rjmp	.+40     	; 0x446e <receive_char+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4446:	6d 89       	ldd	r22, Y+21	; 0x15
    4448:	7e 89       	ldd	r23, Y+22	; 0x16
    444a:	8f 89       	ldd	r24, Y+23	; 0x17
    444c:	98 8d       	ldd	r25, Y+24	; 0x18
    444e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	9c 8b       	std	Y+20, r25	; 0x14
    4458:	8b 8b       	std	Y+19, r24	; 0x13
    445a:	8b 89       	ldd	r24, Y+19	; 0x13
    445c:	9c 89       	ldd	r25, Y+20	; 0x14
    445e:	98 8b       	std	Y+16, r25	; 0x10
    4460:	8f 87       	std	Y+15, r24	; 0x0f
    4462:	8f 85       	ldd	r24, Y+15	; 0x0f
    4464:	98 89       	ldd	r25, Y+16	; 0x10
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	f1 f7       	brne	.-4      	; 0x4466 <receive_char+0x27e>
    446a:	98 8b       	std	Y+16, r25	; 0x10
    446c:	8f 87       	std	Y+15, r24	; 0x0f
		else
		{
			//
		}
		_delay_ms(1000);
		disable_tx();
    446e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <disable_tx>
    4472:	81 c0       	rjmp	.+258    	; 0x4576 <receive_char+0x38e>

	}
	else if(Rx_data=='C')
    4474:	80 91 49 01 	lds	r24, 0x0149
    4478:	83 34       	cpi	r24, 0x43	; 67
    447a:	09 f0       	breq	.+2      	; 0x447e <receive_char+0x296>
    447c:	7c c0       	rjmp	.+248    	; 0x4576 <receive_char+0x38e>
	{

		enable_tx();
    447e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <enable_tx>
		UART_voidSendData_Asynch('C');
    4482:	83 e4       	ldi	r24, 0x43	; 67
    4484:	0e 94 c4 19 	call	0x3388	; 0x3388 <UART_voidSendData_Asynch>
		flag=1;
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	80 93 3a 01 	sts	0x013A, r24
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	aa e7       	ldi	r26, 0x7A	; 122
    4494:	b4 e4       	ldi	r27, 0x44	; 68
    4496:	8b 87       	std	Y+11, r24	; 0x0b
    4498:	9c 87       	std	Y+12, r25	; 0x0c
    449a:	ad 87       	std	Y+13, r26	; 0x0d
    449c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    449e:	6b 85       	ldd	r22, Y+11	; 0x0b
    44a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	4a ef       	ldi	r20, 0xFA	; 250
    44ac:	54 e4       	ldi	r21, 0x44	; 68
    44ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	8f 83       	std	Y+7, r24	; 0x07
    44b8:	98 87       	std	Y+8, r25	; 0x08
    44ba:	a9 87       	std	Y+9, r26	; 0x09
    44bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44be:	6f 81       	ldd	r22, Y+7	; 0x07
    44c0:	78 85       	ldd	r23, Y+8	; 0x08
    44c2:	89 85       	ldd	r24, Y+9	; 0x09
    44c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	5f e3       	ldi	r21, 0x3F	; 63
    44ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44d2:	88 23       	and	r24, r24
    44d4:	2c f4       	brge	.+10     	; 0x44e0 <receive_char+0x2f8>
		__ticks = 1;
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	9e 83       	std	Y+6, r25	; 0x06
    44dc:	8d 83       	std	Y+5, r24	; 0x05
    44de:	3f c0       	rjmp	.+126    	; 0x455e <receive_char+0x376>
	else if (__tmp > 65535)
    44e0:	6f 81       	ldd	r22, Y+7	; 0x07
    44e2:	78 85       	ldd	r23, Y+8	; 0x08
    44e4:	89 85       	ldd	r24, Y+9	; 0x09
    44e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	3f ef       	ldi	r19, 0xFF	; 255
    44ec:	4f e7       	ldi	r20, 0x7F	; 127
    44ee:	57 e4       	ldi	r21, 0x47	; 71
    44f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44f4:	18 16       	cp	r1, r24
    44f6:	4c f5       	brge	.+82     	; 0x454a <receive_char+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    44fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	40 e2       	ldi	r20, 0x20	; 32
    4506:	51 e4       	ldi	r21, 0x41	; 65
    4508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	bc 01       	movw	r22, r24
    4512:	cd 01       	movw	r24, r26
    4514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	9e 83       	std	Y+6, r25	; 0x06
    451e:	8d 83       	std	Y+5, r24	; 0x05
    4520:	0f c0       	rjmp	.+30     	; 0x4540 <receive_char+0x358>
    4522:	88 ec       	ldi	r24, 0xC8	; 200
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	9c 83       	std	Y+4, r25	; 0x04
    4528:	8b 83       	std	Y+3, r24	; 0x03
    452a:	8b 81       	ldd	r24, Y+3	; 0x03
    452c:	9c 81       	ldd	r25, Y+4	; 0x04
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <receive_char+0x346>
    4532:	9c 83       	std	Y+4, r25	; 0x04
    4534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4536:	8d 81       	ldd	r24, Y+5	; 0x05
    4538:	9e 81       	ldd	r25, Y+6	; 0x06
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	9e 83       	std	Y+6, r25	; 0x06
    453e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4540:	8d 81       	ldd	r24, Y+5	; 0x05
    4542:	9e 81       	ldd	r25, Y+6	; 0x06
    4544:	00 97       	sbiw	r24, 0x00	; 0
    4546:	69 f7       	brne	.-38     	; 0x4522 <receive_char+0x33a>
    4548:	14 c0       	rjmp	.+40     	; 0x4572 <receive_char+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    454a:	6f 81       	ldd	r22, Y+7	; 0x07
    454c:	78 85       	ldd	r23, Y+8	; 0x08
    454e:	89 85       	ldd	r24, Y+9	; 0x09
    4550:	9a 85       	ldd	r25, Y+10	; 0x0a
    4552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	9e 83       	std	Y+6, r25	; 0x06
    455c:	8d 83       	std	Y+5, r24	; 0x05
    455e:	8d 81       	ldd	r24, Y+5	; 0x05
    4560:	9e 81       	ldd	r25, Y+6	; 0x06
    4562:	9a 83       	std	Y+2, r25	; 0x02
    4564:	89 83       	std	Y+1, r24	; 0x01
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	9a 81       	ldd	r25, Y+2	; 0x02
    456a:	01 97       	sbiw	r24, 0x01	; 1
    456c:	f1 f7       	brne	.-4      	; 0x456a <receive_char+0x382>
    456e:	9a 83       	std	Y+2, r25	; 0x02
    4570:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		disable_tx();
    4572:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <disable_tx>

	}
}
    4576:	aa 96       	adiw	r28, 0x2a	; 42
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	f8 94       	cli
    457c:	de bf       	out	0x3e, r29	; 62
    457e:	0f be       	out	0x3f, r0	; 63
    4580:	cd bf       	out	0x3d, r28	; 61
    4582:	cf 91       	pop	r28
    4584:	df 91       	pop	r29
    4586:	08 95       	ret

00004588 <__mulsi3>:
    4588:	62 9f       	mul	r22, r18
    458a:	d0 01       	movw	r26, r0
    458c:	73 9f       	mul	r23, r19
    458e:	f0 01       	movw	r30, r0
    4590:	82 9f       	mul	r24, r18
    4592:	e0 0d       	add	r30, r0
    4594:	f1 1d       	adc	r31, r1
    4596:	64 9f       	mul	r22, r20
    4598:	e0 0d       	add	r30, r0
    459a:	f1 1d       	adc	r31, r1
    459c:	92 9f       	mul	r25, r18
    459e:	f0 0d       	add	r31, r0
    45a0:	83 9f       	mul	r24, r19
    45a2:	f0 0d       	add	r31, r0
    45a4:	74 9f       	mul	r23, r20
    45a6:	f0 0d       	add	r31, r0
    45a8:	65 9f       	mul	r22, r21
    45aa:	f0 0d       	add	r31, r0
    45ac:	99 27       	eor	r25, r25
    45ae:	72 9f       	mul	r23, r18
    45b0:	b0 0d       	add	r27, r0
    45b2:	e1 1d       	adc	r30, r1
    45b4:	f9 1f       	adc	r31, r25
    45b6:	63 9f       	mul	r22, r19
    45b8:	b0 0d       	add	r27, r0
    45ba:	e1 1d       	adc	r30, r1
    45bc:	f9 1f       	adc	r31, r25
    45be:	bd 01       	movw	r22, r26
    45c0:	cf 01       	movw	r24, r30
    45c2:	11 24       	eor	r1, r1
    45c4:	08 95       	ret

000045c6 <__udivmodhi4>:
    45c6:	aa 1b       	sub	r26, r26
    45c8:	bb 1b       	sub	r27, r27
    45ca:	51 e1       	ldi	r21, 0x11	; 17
    45cc:	07 c0       	rjmp	.+14     	; 0x45dc <__udivmodhi4_ep>

000045ce <__udivmodhi4_loop>:
    45ce:	aa 1f       	adc	r26, r26
    45d0:	bb 1f       	adc	r27, r27
    45d2:	a6 17       	cp	r26, r22
    45d4:	b7 07       	cpc	r27, r23
    45d6:	10 f0       	brcs	.+4      	; 0x45dc <__udivmodhi4_ep>
    45d8:	a6 1b       	sub	r26, r22
    45da:	b7 0b       	sbc	r27, r23

000045dc <__udivmodhi4_ep>:
    45dc:	88 1f       	adc	r24, r24
    45de:	99 1f       	adc	r25, r25
    45e0:	5a 95       	dec	r21
    45e2:	a9 f7       	brne	.-22     	; 0x45ce <__udivmodhi4_loop>
    45e4:	80 95       	com	r24
    45e6:	90 95       	com	r25
    45e8:	bc 01       	movw	r22, r24
    45ea:	cd 01       	movw	r24, r26
    45ec:	08 95       	ret

000045ee <__udivmodsi4>:
    45ee:	a1 e2       	ldi	r26, 0x21	; 33
    45f0:	1a 2e       	mov	r1, r26
    45f2:	aa 1b       	sub	r26, r26
    45f4:	bb 1b       	sub	r27, r27
    45f6:	fd 01       	movw	r30, r26
    45f8:	0d c0       	rjmp	.+26     	; 0x4614 <__udivmodsi4_ep>

000045fa <__udivmodsi4_loop>:
    45fa:	aa 1f       	adc	r26, r26
    45fc:	bb 1f       	adc	r27, r27
    45fe:	ee 1f       	adc	r30, r30
    4600:	ff 1f       	adc	r31, r31
    4602:	a2 17       	cp	r26, r18
    4604:	b3 07       	cpc	r27, r19
    4606:	e4 07       	cpc	r30, r20
    4608:	f5 07       	cpc	r31, r21
    460a:	20 f0       	brcs	.+8      	; 0x4614 <__udivmodsi4_ep>
    460c:	a2 1b       	sub	r26, r18
    460e:	b3 0b       	sbc	r27, r19
    4610:	e4 0b       	sbc	r30, r20
    4612:	f5 0b       	sbc	r31, r21

00004614 <__udivmodsi4_ep>:
    4614:	66 1f       	adc	r22, r22
    4616:	77 1f       	adc	r23, r23
    4618:	88 1f       	adc	r24, r24
    461a:	99 1f       	adc	r25, r25
    461c:	1a 94       	dec	r1
    461e:	69 f7       	brne	.-38     	; 0x45fa <__udivmodsi4_loop>
    4620:	60 95       	com	r22
    4622:	70 95       	com	r23
    4624:	80 95       	com	r24
    4626:	90 95       	com	r25
    4628:	9b 01       	movw	r18, r22
    462a:	ac 01       	movw	r20, r24
    462c:	bd 01       	movw	r22, r26
    462e:	cf 01       	movw	r24, r30
    4630:	08 95       	ret

00004632 <__prologue_saves__>:
    4632:	2f 92       	push	r2
    4634:	3f 92       	push	r3
    4636:	4f 92       	push	r4
    4638:	5f 92       	push	r5
    463a:	6f 92       	push	r6
    463c:	7f 92       	push	r7
    463e:	8f 92       	push	r8
    4640:	9f 92       	push	r9
    4642:	af 92       	push	r10
    4644:	bf 92       	push	r11
    4646:	cf 92       	push	r12
    4648:	df 92       	push	r13
    464a:	ef 92       	push	r14
    464c:	ff 92       	push	r15
    464e:	0f 93       	push	r16
    4650:	1f 93       	push	r17
    4652:	cf 93       	push	r28
    4654:	df 93       	push	r29
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	ca 1b       	sub	r28, r26
    465c:	db 0b       	sbc	r29, r27
    465e:	0f b6       	in	r0, 0x3f	; 63
    4660:	f8 94       	cli
    4662:	de bf       	out	0x3e, r29	; 62
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	cd bf       	out	0x3d, r28	; 61
    4668:	09 94       	ijmp

0000466a <__epilogue_restores__>:
    466a:	2a 88       	ldd	r2, Y+18	; 0x12
    466c:	39 88       	ldd	r3, Y+17	; 0x11
    466e:	48 88       	ldd	r4, Y+16	; 0x10
    4670:	5f 84       	ldd	r5, Y+15	; 0x0f
    4672:	6e 84       	ldd	r6, Y+14	; 0x0e
    4674:	7d 84       	ldd	r7, Y+13	; 0x0d
    4676:	8c 84       	ldd	r8, Y+12	; 0x0c
    4678:	9b 84       	ldd	r9, Y+11	; 0x0b
    467a:	aa 84       	ldd	r10, Y+10	; 0x0a
    467c:	b9 84       	ldd	r11, Y+9	; 0x09
    467e:	c8 84       	ldd	r12, Y+8	; 0x08
    4680:	df 80       	ldd	r13, Y+7	; 0x07
    4682:	ee 80       	ldd	r14, Y+6	; 0x06
    4684:	fd 80       	ldd	r15, Y+5	; 0x05
    4686:	0c 81       	ldd	r16, Y+4	; 0x04
    4688:	1b 81       	ldd	r17, Y+3	; 0x03
    468a:	aa 81       	ldd	r26, Y+2	; 0x02
    468c:	b9 81       	ldd	r27, Y+1	; 0x01
    468e:	ce 0f       	add	r28, r30
    4690:	d1 1d       	adc	r29, r1
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	de bf       	out	0x3e, r29	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	cd bf       	out	0x3d, r28	; 61
    469c:	ed 01       	movw	r28, r26
    469e:	08 95       	ret

000046a0 <_exit>:
    46a0:	f8 94       	cli

000046a2 <__stop_program>:
    46a2:	ff cf       	rjmp	.-2      	; 0x46a2 <__stop_program>
